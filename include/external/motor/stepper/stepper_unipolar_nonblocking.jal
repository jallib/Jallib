-- -------------------------------------------------------------------
-- Title: Library to manage unipolar stepper motors with non blocking delays
-- Author: Pavel Milanes Costa (CO7WT) - pavelmc@gmail.com, copyright (c) 2014, all rights reserved.
-- Adapted-by: original design for jallib
-- Compiler: >=2.4q3
-- May work on older ones.
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library implement the drive procedures for UNIPOLAR stepper motors
-- See stepper_unipolar_common.jal for modes explanations
--
-- Sources:
-- I used this tutorial in spanish here http://www.todorobot.com.ar/informacion/tutorial%20stepper/
-- This is a good source also http://www.cs.uiowa.edu/~jones/step/ thanks vasi vasi for the link.
--
-- Notes:
-- * You must define the kind of mode you will use AFTER include the lib, if not it will use normal.
-- * You have to know & declare the sweet spot frecuency/RPM of your motor, but... you can guess.
-- * You can change the mode on the fly, but need to send a stepper_init() each time after that.
-- * Creation date/time: 4 Nov 2014 04:28:50.UTC
-- * This file is maintained by hand!!!
--
-- Usage:
-- Notes:
-- * You have to know & declare the sweet spot frequency/RPM of your motor before including the lib
--   as always you can try & error until you find it.
-- * Release date: 8 Nov 2014
--
-- Usage:
-- --
-- You need to define some vars/constants/alias BEFORE include the lib:
-- --
-- Declare you desired RPM of operation, but this is more complex because the RPM depends
-- on how many steps the motor needs to make a 360 degree turn, so we need to know that too
--				const word STEPPER_RPM = 60
--				const byte STEPPER_STEPS_1TURN = 48
-- --
-- The limits on the RPM are from 1 RPM to about 300-600 RPM depending on the steps per full turn
-- --
-- WARNING !!!! The STEPPER_RPM * STEPPER_STEPS_1TURN value MUST NEVER be > 65535
-- or you will get unexpected results.
-- --
-- Take notice:  the higher the RPM the inaccurate the results on the timing, you have been warned !
-- --
-- The direction of movement is controlled by this var (by default CW)
-- 				var bit stepper_cw = on
-- --
-- I choose this convention: ON is forward (CW), OFF is reverse (CCW)
-- You can olso invert the direction by hardware, so make up your logic to match this...
-- --
-- Then you must declare the pins and let them be outputs, you need 4 of them, called A, B, C, D
--				alias stepper_coil_a is pin_a0
--				alias stepper_coil_b is pin_a1
--				alias stepper_coil_c is pin_a2
--				alias stepper_coil_d is pin_a3
-- --
-- Declare them as outputs
--				pin_A0_direction = output
--				pin_A1_direction = output
--				pin_A2_direction = output
--				pin_A3_direction = output
-- --
-- You can now define the mode (only if different from normal which is the default)
--				stepper_half = on
--				stepper_wave = off
-- --
-- Define the options if needed (see stepper_unipolar_common for details)
--				const bit STEPPER_FREE				= on
--				const bit STEPPER_SMOOTH			= on
-- --
-- You can load now the lib & initialize it
--				include stepper_unipolar_blocking
--				stepper_init()
-- --
-- See the examples for more details
--

-- This is the non blocking version so we instruct the common lib about
const bit STEPPER_BLOCKIGN			= off

-- variables
var byte _tmr0_load			-- this has the data to load on the tmr0 register on overflow
var word _isr_count
-- FALGS to manage the movement
var bit stepper_go = off
-- this is the var in which we store the amount of steps to do
-- it get decreased over time...
var word stepper_steps = 0

-- include the common lib to import constants and default procedures
include stepper_unipolar_common

-- if defined smooth initialize
if defined(STEPPER_SMOOTH) then
   -- hold the initial count of smoth pulses to apply at the start
   var word _smooth = 0
   -- hold the real value of the var befor tweaking
   var word real_delay = stepper_delay
end if

-- procedure to calculate, setup and start the interrupt routine on tmr0
procedure _int_setup() is
   pragma inline
   -- calculate the vars
   -- (this pat was borrowed from the timer0_isr_timer)
   const dword timer0_div = (dword(target_clock) / 4 / 1000) - 1
   --
   -- calculating the prescaler value
   if (timer0_div > ((256 * 256) - 1)) then
      _error "Clock is greater than 20Mhz, please use a lower clock"
   elsif (timer0_div > ((128 * 256) - 1)) then
      T0CON_T0PS = 7 ; prescaler 256
      _tmr0_load = 255 - byte(timer0_div / 256)
   elsif (timer0_div > ((64 * 256) - 1)) then
      T0CON_T0PS = 6 ; prescaler 128
      _tmr0_load = 255 - byte(timer0_div / 128)
   elsif (timer0_div > ((32 * 256) - 1)) then
      T0CON_T0PS = 5 ; prescaler 64
      _tmr0_load = 255 - byte(timer0_div / 64)
   elsif (timer0_div > ((16 * 256) - 1)) then
      T0CON_T0PS = 4 ; prescaler 32
      _tmr0_load = 255 - byte(timer0_div / 32)
   elsif (timer0_div > ((8 * 256) - 1)) then
      T0CON_T0PS = 3 ; prescaler 16
      _tmr0_load = 255 - byte(timer0_div / 16)
   elsif (timer0_div > ((4 * 256) - 1)) then
      T0CON_T0PS = 2 ; prescaler 8
      _tmr0_load = 255 - byte(timer0_div / 8)
   elsif (timer0_div > ((2 * 256) - 1)) then
      T0CON_T0PS = 1 ; prescaler 4
      _tmr0_load = 255 - byte(timer0_div / 4)
   else
      T0CON_T0PS = 0 ; prescaler 2
      _tmr0_load = 255 - timer0_div / 2
   end if
   --
   T0CON_T0CS = 0			-- internal clock
   T0CON_PSA  = 0			-- assign prescaler to timer0
   INTCON_TMR0IF = off		-- flag off
   INTCON_TMR0IE = on		-- enable the tmr0 interrupts
   INTCON_GIE  = on		-- enable global interrupts
   INTCON_PEIE = on		-- enabledevices interrupt
end procedure

-- init procedure for the non blocking version
procedure stepper_init() is
   -- set the motor outs to off
   stepper_off()
   -- setup of the interrupt
   _int_setup()
   -- let the coil free is instructed so
   if !defined(STEPPER_FREE) then
      -- need to lock the motor to a astable state
      -- do 1 step fwd
      stepper_cw = on
      stepper_step()
   end if
end procedure

-- interrupt procedure, must capture de interrupt and
-- preload the tmr0 to the calculated value to account for the 1khz isr
-- has to count interrupt to match stepper_delay to adjust the RPM and
-- command to move.
procedure isr_proc() is
   pragma interrupt
   if (INTCON_TMR0IF == true) then
      tmr0 = _tmr0_load
      -- I have to move?
      if (stepper_go == true) then
         -- counter+
         _isr_count = _isr_count +1
         -- is time to move the motor if we command so...
         if (_isr_count >= stepper_delay) then
            -- check for smooth if possible
            if defined(STEPPER_SMOOTH) then
               -- calculating the simulated speed
               if (smooth_pulses > 0) then
                  --
                  -- decelerate first to take priotity if steps < 2* smooth_pulses
                  if (stepper_steps < smooth_pulses) then
                     -- decelerating
                     stepper_delay = real_delay * (smooth_pulses - stepper_steps)
                  elsif (_smooth < smooth_pulses) then
                     -- new value, accelerating
                     stepper_delay = real_delay * (smooth_pulses - _smooth)
                     -- increase _smooth
                     _smooth = _smooth +1
                  end if
               end if
            end if
            -- move the motor
            stepper_step()
            -- reset the counter
            _isr_count = 0
            -- verify if we have been commander to do a amount of steps
            if (stepper_steps > 0) then
               -- decrement
               stepper_steps = stepper_steps -1
               -- check if we are at the end
               if (stepper_steps == 0 ) then
                  -- command the routine to stp
                  stepper_go = false
                  -- check if we ned to let the motor free at the end
                  if defined(STEPPER_FREE) then
                     -- shut off the motor.
                     -- You must have a mechanism to lock the geard externaly !!!
                     stepper_off()
                  end if
               end if
            end if
         end if
      else
         if defined(STEPPER_SMOOTH) then
            -- stepper_go is false, I must reset the count of _smooth
            _smooth = 0
         end if
      end if
      -- reset the flag before return
      INTCON_TMR0IF = false
   end if
end procedure
