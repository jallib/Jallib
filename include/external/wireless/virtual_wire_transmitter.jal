-- -----------------------------------------------------------------------------
-- Title: Virtual Wire transmitter only version
--
-- Author: Rob Jansen, Copyright (c) 2018..2019, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r2
--
-- Revision: $Revision$
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: http://www.airspayce.com/mikem/arduino/VirtualWire.pdf
--
-- Description: This is the transmit only version of Virtual_Wire, see the file
--              virtual_wire.jal for all changes compared to the original
--              Virtual_Wire library and more information.
--
-- Dependencies: -
--
-- Notes: -
--
-- -------------------------------- Pins ---------------------------------------

-- A transmit pin must be defined by the main program.
if !defined(vw_tx_pin) then
   pragma error "A Virtual Wire transmission pin (vw_tx_pin) must be defined"
end if


-- ------------------ Public functions and procedurs  --------------------------------
-- Initialize the virtual wire driver.
procedure vw_init()

-- This is the service routine that must be called by the main program when the
-- timer overflows. Its job is to output the next bit from the transmitter
-- (every 8 calls).
procedure vw_service()

-- Wait until transmitter is available (!vw_tx_active) and encode and queue the
-- message into vw_tx_buf. The message is raw bytes, with no packet structure
-- imposed. It is transmitted preceded a byte count and followed by 2 FCS bytes.
-- After the transmission is done, the transmitter is stopped.
function vw_send(byte in buf[], byte in len) return bit

-- Return true if the transmitter is active (busy).
function vw_tx_active() return bit

-- Wait for the transmitter to become available. Busy-wait loop until the
-- ISR says the message has been sent.
procedure vw_wait_tx()

-- ------------------------- Constant declarations -----------------------------

-- The user can define the buffer, if not defined we define it here.
-- Maximum number of bytes in a message, counting the byte (1) count and FCS (2)
-- so minimum size for sending or receving 1 byte is 4. Note that the actual
-- used data space for the  buffer is twice as big due to the symbol encoding.
if defined(VW_MESSAGE_BUFFER) then
  const byte VW_MAX_MESSAGE_LEN = VW_MESSAGE_BUFFER + 3
else
  const byte VW_MAX_MESSAGE_LEN = 10
end if

-- Number of samples per bit.
const byte VW_RX_SAMPLES_PER_BIT = 8

-- The maximum payload length, count (1) and FCS (2) must be subtracted.
const byte VW_MAX_PAYLOAD = VW_MAX_MESSAGE_LEN - 3

-- The size of the receiver ramp. Ramp wraps modulo this number
const byte VW_RX_RAMP_LEN = 160

-- Ramp adjustment parameters
-- Standard is if a transition occurs before VW_RAMP_TRANSITION (80) in the ramp,
-- the ramp is retarded by adding VW_RAMP_INC_RETARD (11)
-- else by adding VW_RAMP_INC_ADVANCE (29)
-- If there is no transition it is adjusted by VW_RAMP_INC (20)
-- Internal ramp adjustment parameter
const byte VW_RAMP_INC = (VW_RX_RAMP_LEN/VW_RX_SAMPLES_PER_BIT)
-- Internal ramp adjustment parameter
const byte  VW_RAMP_TRANSITION = VW_RX_RAMP_LEN/2
-- Internal ramp adjustment parameter
const byte VW_RAMP_ADJUST = 9
-- Internal ramp adjustment parameter
const byte VW_RAMP_INC_RETARD = (VW_RAMP_INC - VW_RAMP_ADJUST)
-- Internal ramp adjustment parameter
const byte VW_RAMP_INC_ADVANCE = (VW_RAMP_INC + VW_RAMP_ADJUST)

-- Outgoing message bits grouped as 6-bit words
-- 36 alternating 1/0 bits, followed by 12 bits of start symbol
-- Followed immediately by the 4-6 bit encoded byte count,
-- message buffer and 2 byte FCS
-- Each byte from the byte count on is translated into 2x6-bit words
-- Caution, each symbol is transmitted LSBit first,
-- but each byte is transmitted high nybble first
const byte VW_HEADER_LEN = 8

-- Transmit header to synchronize the receiver.
const byte vw_tx_header_buf[VW_HEADER_LEN]
           = {0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x38, 0x2c}

-- ------------------------- Variable declarations -----------------------------

-- Transmit and receive buffer. The symbol buffer for transmission is combined
-- with the data buffer for reception.
var byte vw_tx_rx_buf[VW_MAX_MESSAGE_LEN * 2]

-- Number of symbols in VW_Tx_Buf to be sent
var byte vw_tx_len

-- Index of he next symbot to send. Ranges from 0 to VW_Tx_Len
var byte vw_tx_index

-- Bit number of next bot to send
var byte vw_tx_bit

-- Sample number for the transmitter. Runs 0 to 7 during one bit interval.
var byte vw_tx_sample

-- Indicates if the transmitter is active.
var bit vw_tx_enabled

-- Indicates that the header must be transmitted first.
var bit vw_tx_header

-- 4 bit to 6 bit symbol converter table for coding
-- Used to convert the high and low nibbles of the transmitted data
-- into 6 bit symbols for transmission. Each 6-bit symbol has 3 1s and 3 0s
-- with at most 3 consecutive identical bits
const byte symbols_c[] =
{
    0x0d, 0x0e, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c,
    0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x32, 0x34
}

-- ------------------------- Functions and Procedures --------------------------

-- Calculate new crc over given data. Formula is:
-- Xexp16 + Xexp12 + Xexp5 + 1
function _vw_calc_crc(word in crc, byte in data) return word is
var word data_2
  data = data ^ byte(crc & 0x00ff)
  data = data ^ (data << 4)
  data_2 = word(data)
  return (((data_2 << 8) | (crc >> 8)) ^ (data_2 >> 4) ^ (data_2 << 3))
end function

-- Initialize the virtual wire driver.
procedure vw_init() is
  vw_tx_pin = FALSE
  vw_tx_enabled = FALSE
  vw_tx_header = FALSE
  vw_tx_len = 0
  vw_tx_index = 0
  vw_tx_bit = 0
  vw_tx_sample = 0
end procedure

-- Start the transmitter, call when the tx buffer is ready to go and vw_tx_len is
-- set to the total number of symbols to send
procedure vw_tx_start()is
  vw_tx_index = 0
  vw_tx_bit = 0
  vw_tx_sample = 0
  vw_tx_header = true

  -- Next tick interrupt will send the first bit.
  vw_tx_enabled = true
end procedure

-- Stop the transmitter, call when all bits are sent
procedure vw_tx_stop() is
  vw_tx_pin = false

  -- No more ticks for the transmitter
  vw_tx_enabled = false
end procedure

-- Return true if the transmitter is active
function vw_tx_active() return bit is
    return vw_tx_enabled
end function

-- Wait for the transmitter to become available
-- Busy-wait loop until the ISR says the message has been sent
procedure vw_wait_tx() is
   while vw_tx_enabled loop end loop
end procedure

-- Wait until transmitter is available and encode and queue the message
-- into vw_tx_buf
-- The message is raw bytes, with no packet structure imposed
-- It is transmitted preceded a byte count and followed by 2 FCS bytes
function vw_send(byte in buf[], byte in len) return bit is
    var byte i
    var byte index = 0
    var word crc = 0xffff
    var byte nr = len + 3 -- Added byte count and FCS to get total number of bytes

    if (len > VW_MAX_PAYLOAD) then return false end if

    -- Wait for transmitter to become available
    vw_wait_tx()

    -- Encode the message length
    crc = _vw_calc_crc(crc, nr)
    vw_tx_rx_buf[index] = symbols_c[nr >> 4]
    index = index + 1
    vw_tx_rx_buf[index] = symbols_c[nr & 0xf]
    index = index + 1

    -- Encode the message into 6 bit symbols. Each byte is converted into
    -- 2 6-bit symbols, high nybble first, low nybble second
    for len using i loop
	    crc = _vw_calc_crc(crc, buf[i])
	    vw_tx_rx_buf[index] = symbols_c[buf[i] >> 4]
      index = index + 1
	    vw_tx_rx_buf[index] = symbols_c[buf[i] & 0xf]
      index = index + 1
    end loop

    -- Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    -- Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    -- VW sends FCS as low byte then hi byte
    crc = !crc
    vw_tx_rx_buf[index] = symbols_c[byte((crc >> 4)  & 0x0f)]
    index = index + 1
    vw_tx_rx_buf[index] = symbols_c[byte(crc & 0x0f)]
    index = index + 1
    vw_tx_rx_buf[index] = symbols_c[byte((crc >> 12) & 0x0f)]
    index = index + 1
    vw_tx_rx_buf[index] = symbols_c[byte((crc >> 8)  & 0x0f)]
    index = index + 1

    -- Total number of 6-bit symbols to send, header is not included in buffer.
    vw_tx_len = index

    -- Start the low level interrupt handler sending symbols.
    vw_tx_start()

    return true--
end function


-- This is the service routine that must be called by the main program when the
-- timer overflows. Its job is to output the next bit from the transmitter
-- (every 8 calls).
procedure vw_service() is

  if vw_tx_enabled & (vw_tx_sample == 0) then
    -- Check if we are transmission the header
    if vw_tx_header then
       vw_tx_pin = vw_tx_header_buf[vw_tx_index] & (1 << vw_tx_bit)
       vw_tx_bit = vw_tx_bit + 1
       if (vw_tx_bit >= 6) then
       vw_tx_bit = 0
       vw_tx_index = vw_tx_index + 1
	       end if
	       if (vw_tx_index >=  VW_HEADER_LEN) then
	         -- Header done.
	         vw_tx_header = false
	         vw_tx_index = 0
	       end if
      else
	      -- No sending header send next bit from the buffer.
	      -- Symbols are sent LSB first
	      -- Finished sending the whole message? (after waiting one bit period
	      -- since the last bit)
	      if (vw_tx_index >= vw_tx_len) then
	        vw_tx_stop()--
	      else
          vw_tx_pin = vw_tx_rx_buf[vw_tx_index] & (1 << vw_tx_bit)
	        vw_tx_bit = vw_tx_bit + 1
	        if (vw_tx_bit >= 6) then
	          vw_tx_bit = 0
	          vw_tx_index = vw_tx_index + 1
	        end if
	      end if -- vw_tx_index
	    end if -- vw_tx_header
    end if -- vw_tx_enabled
    vw_tx_sample = vw_tx_sample + 1
    -- Only once per 8 samples we change the bit.
    if (vw_tx_sample > 7) then
      vw_tx_sample = 0
    end if

end procedure




