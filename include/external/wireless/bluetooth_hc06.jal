-- -----------------------------------------------------------------------------
-- Title: Library for the Bluetooth HC-06 module.
--
-- Author: Rob Jansen, Copyright (c) 2021..2021, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.5r5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: JAL library for use of the Bluetooth HC-06 module.
--
-- Sources: Bluetooth HC-06 Module Datasheet revision 2.2 (2011/04/06)
--          Guangzhou HC Information Technology Co., Ltd.
--
-- Notes: The default serial interface of the HC-06 is 9600 baud, 1 stopbit, 
--        no parity and no flowcontrol. 
--        At least one of the JAL serial hardware libraries must be included and
--        initialized by the main program with these settings. 
--
--        This library was tested with HC-06 firmware version: DX_Smartv2.0
--
--        A read timeout is used for the module to respond. This timeout is
--        can be set in steps of 100 us can be overruled by defining:
--        - const word BT_HC06_READ_TIMEOUT = 5_000 -- 0.5 seconds (default). 
--
--        It is recommended to use the JAL serial libraries that work on an 
--        interrupt basis. These libraries make use of buffers which reduce
--        the chance of data loss in case the main program is slow or in case
--        where different baudrates are used.
--

-- -----------------------------------------------------------------------------
-- ---------------------- PUBLIC CONSTANTS DEFINTIONS --------------------------
-- -----------------------------------------------------------------------------

-- Maximum wait time to receive data from the module. The read timeout can 
-- be overruled by the main program. Timeout is in steps of 100 us.
if !defined(BLUETOOTH_HC06_READ_TIMEOUT) then
  const word BLUETOOTH_HC06_READ_TIMEOUT = 5_000 -- 0.5 second (default). 
end if


-- Baudrate definitions. Default baudrate of the HC-06 module is 9600 baud.
const byte BLUETOOTH_HC06_BAUDRATE_1200    = 1 -- Not supported by FW DX_Smartv2.0
const byte BLUETOOTH_HC06_BAUDRATE_2400    = 2
const byte BLUETOOTH_HC06_BAUDRATE_4800    = 3
const byte BLUETOOTH_HC06_BAUDRATE_9600    = 4
const byte BLUETOOTH_HC06_BAUDRATE_19200   = 5
const byte BLUETOOTH_HC06_BAUDRATE_38400   = 6
const byte BLUETOOTH_HC06_BAUDRATE_57600   = 7
const byte BLUETOOTH_HC06_BAUDRATE_115200  = 8
const byte BLUETOOTH_HC06_BAUDRATE_230400  = 9 -- Not supported by FW DX_Smartv2.0

-- -----------------------------------------------------------------------------
-- -------------------------- Public API ---------------------------------------
-- -----------------------------------------------------------------------------

-- Initialize the module. This is the same as resetting the module.
procedure bluetooth_hc06_init()
alias bluetooth_hc06_reset is bluetooth_hc06_init

-- Returns TRUE if the module is responding, otherwise FALSE is returned.
-- When the module is connected to the host the response will also be FALSE.
function bluetooth_hc06_available() return bit 

-- Set the device pincode. The pincode must be 4 characters. Returns TRUE when 
-- succesful. The default factory pin is "1234".                                          
function bluetooth_hc06_set_device_pin(byte in pincode[]) return bit   

-- Set the device name. The device name may not be longer than 20 characters.
-- Returns TRUE when succcesful.
function bluetooth_hc06_set_device_name(byte in name[])return bit  

-- Set the baudrate of the module and the baudrate of the serial interface
-- connected to the module. Returns TRUE when succesful.
-- Note: The baudrate changes after a new power up of the module. Make sure
--       that the baudrate of the PIC is also changed to this new baudrate 
--       after power up.
function bluetooth_hc06_set_baudrate(byte in baudrate) return bit   

-- Returns TRUE if data is received from the module. Data can then be obluetoothained 
-- by reading from the variable 'bluetooth_hc06_data'.
function bluetooth_hc06_data_available() return bit

-- Returns TRUE when data can be sent to the module. The data can then be sent 
-- by writing to the variable 'bluetooth_hc06_data'.                 
function bluetooth_hc06_data_ready() return bit

-- Send a command to the module and return TRUE when succesful. This function
-- can be used if the firmware of the module uses commands not supported by
-- this library.
function bluetooth_hc06_send_command(byte in command[]) return bit

-- -----------------------------------------------------------------------------
-- -------------------------- Private stuff ------------------------------------
-- -----------------------------------------------------------------------------

-- -----------------------------------------------------------------------------
-- -------------------------- Private API --------------------------------------
-- -----------------------------------------------------------------------------

-- Sends the given string to the module over the serial interface. 
procedure _bluetooth_hc06_send_string(byte in string[])

-- Check for an acknowledge of the last sent command and return TRUE when it was
-- received. This can can only be done once, successive calls will return FALSE.  
function _bluetooth_hc06_acknowledge() return bit 

-- Flush the serial receive buffer.
procedure _bluetooth_hc06_flush_serial_receive_buffer()

-- Parse the data in the serial buffer, received from the module and return 
-- TRUE if the given string token if found.
function _bluetooth_hc06_wait_and_parse_response(byte in token[]) return bit 


-- -----------------------------------------------------------------------------
-- -------------------------- Implementation -----------------------------------
-- -----------------------------------------------------------------------------

-- The main program can use different versions of the JAL serial hardware
-- libraries so we use aliases to make this generic.
if defined(serial_hw_write) then
   alias _bluetooth_hc06_serial_write          is serial_hw_write
   alias _bluetooth_hc06_serial_read           is serial_hw_read
   alias _bluetooth_hc06_serial_data           is serial_hw_data
   alias _bluetooth_hc06_serial_data_available is serial_hw_data_available
   alias _bluetooth_hc06_serial_data_ready     is serial_hw_data_ready
elsif defined(serial_hw2_write) then
   alias _bluetooth_hc06_serial_write          is serial_hw2_write
   alias _bluetooth_hc06_serial_read           is serial_hw2_read
   alias _bluetooth_hc06_serial_data           is serial_hw2_data
   alias _bluetooth_hc06_serial_data_available is serial_hw2_data_available
   alias _bluetooth_hc06_serial_data_ready     is serial_hw2_data_ready
else
   _error "no serial port defined"     
end if


-- Initialize the module. This is the same as resetting the module.
procedure bluetooth_hc06_init() is

   var bit dummy 
   
   _bluetooth_hc06_flush_serial_receive_buffer()  
   _bluetooth_hc06_send_string("AT+RESET")
   dummy = _bluetooth_hc06_acknowledge() -- Reply is OK  
   
end procedure


-- Returns TRUE if the module is responding, otherwise FALSE is returned.
-- When the module is connected to the host the response will also be FALSE.
function bluetooth_hc06_available() return bit is

   _bluetooth_hc06_flush_serial_receive_buffer()  
   _bluetooth_hc06_send_string("AT")   
   return _bluetooth_hc06_acknowledge() -- Reply is OK  

end function


-- Set the device pincode. The pincode must be 4 characters. Returns TRUE when 
-- succesful. The default factory pin is "1234".                                           
function bluetooth_hc06_set_device_pin(byte in pincode[]) return bit is  

   _bluetooth_hc06_flush_serial_receive_buffer()  
   -- Send the command,
   if (count(pincode) == 4) then
      _bluetooth_hc06_send_string("AT+PIN")
      _bluetooth_hc06_send_string(pincode)
      return _bluetooth_hc06_acknowledge()  -- Reply is OKsetPIN  
   else
      return FALSE    
   end if 
   
end function


-- Set the device name. The device name may not be longer than 20 characters.
-- Returns TRUE when succcesful.
function bluetooth_hc06_set_device_name(byte in name[]) return bit is  

   _bluetooth_hc06_flush_serial_receive_buffer()  
   -- Send the command,
   if (count(name) <= 20) then
      _bluetooth_hc06_send_string("AT+NAME")
      _bluetooth_hc06_send_string(name)
       return _bluetooth_hc06_acknowledge()  -- Reply is OKsetname  
   else
      return FALSE     
   end if 
     
end function


-- Set the baudrate of the module and the baudrate of the serial interface
-- connected to the module. Returns TRUE when succesful.
-- Note: The baudrate changes after a new power up of the module. Make sure
--       that the baudrate of the PIC is also changed to this new baudrate 
--       after power up.
function bluetooth_hc06_set_baudrate(byte in baudrate) return bit is  
   
   case baudrate of
   
      BLUETOOTH_HC06_BAUDRATE_1200:
      block
         _bluetooth_hc06_send_string("AT+BAUD1")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_2400:
      block
         _bluetooth_hc06_send_string("AT+BAUD2")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_4800:
      block
         _bluetooth_hc06_send_string("AT+BAUD3")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_9600:
      block
         _bluetooth_hc06_send_string("AT+BAUD4")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_19200:
      block
         _bluetooth_hc06_send_string("AT+BAUD5")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_38400:
      block
         _bluetooth_hc06_send_string("AT+BAUD6")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_57600:
      block
         _bluetooth_hc06_send_string("AT+BAUD7")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_115200:
      block
         _bluetooth_hc06_send_string("AT+BAUD8")
      end block
      
      BLUETOOTH_HC06_BAUDRATE_230400:
      block
         _bluetooth_hc06_send_string("AT+BAUD9")
      end block
      
   end case

   -- The device will return an OK stil using the previous set baudrate. After a
   -- new power up of the device the baudrate is changed to the new set baudrate.
   return _bluetooth_hc06_acknowledge()

end function


-- Returns TRUE if data is received from the module. Data can then be obluetoothained 
-- by reading from the variable 'bluetooth_hc06_data'.
function bluetooth_hc06_data_available() return bit is

   return _bluetooth_hc06_serial_data_available()

end function


-- Returns TRUE when data can be sent to the module. The data can then be sent 
-- by writing to the variable 'bluetooth_hc06_data'.                 
function bluetooth_hc06_data_ready() return bit is

   return _bluetooth_hc06_serial_data_ready()

end function


-- Pseudo variable to send data to the module. Wait for the serial interface to 
-- be ready and send a data byte. Note that this is a blocking call until the 
-- previous byte is transmitted. 
procedure bluetooth_hc06_data'put(byte in data) is

   while !_bluetooth_hc06_serial_data_ready() loop
      -- Empty body, wait for serial port to be ready.
   end loop
   _bluetooth_hc06_serial_data = data

end procedure


-- Pseudo variable to receive data from the module. Wait for a data byte from 
-- the module and return it. Note that this is a blocking call until data is 
-- received. 
function bluetooth_hc06_data'get() return byte is

   while !_bluetooth_hc06_serial_data_available() loop
      -- Emtpy body, wait for data to be available.
   end loop

   return _bluetooth_hc06_serial_data

end function


-- Send a command to the module and return TRUE when succesful. This function
-- can be used if the firmware of the module uses commands not supported by
-- this library.
function bluetooth_hc06_send_command(byte in command[]) return bit is

   _bluetooth_hc06_send_string(command)

   return _bluetooth_hc06_acknowledge()

end function



  
-- -----------------------------------------------------------------------------
-- ----------------- PRIVATE PROCEDURES AND FUNCTIONS --------------------------
-- -----------------------------------------------------------------------------


-- Sends the given string to the module over the serial interface. 
procedure _bluetooth_hc06_send_string(byte in string[]) is

   var byte index
   
   for count(string) using index loop
      _bluetooth_hc06_serial_data = string[index]
   end loop

end procedure


-- Check for an acknowledge of the last sent command and return TRUE when it was
-- received. This can can only be done once, successive calls will return FALSE.  
function _bluetooth_hc06_acknowledge() return bit is

   return _bluetooth_hc06_wait_and_parse_response("OK")

end function


-- Flush the serial receive buffer of the module.
procedure _bluetooth_hc06_flush_serial_receive_buffer() is

   var byte dummy
   
   while _bluetooth_hc06_serial_read(dummy) loop 
      -- Nothing, just flushing the input buffer.
   end loop 
   
end procedure


-- Wait for data from the module and parse it. Returns TRUE if the given string 
-- token if found. After that it flushes the receive buffer.
function _bluetooth_hc06_wait_and_parse_response(byte in token[]) return bit is

   var word timeout = 0
   var byte character
   var byte index = 0
   
   while (index < count(token)) & (index != count(token)) & (timeout < BLUETOOTH_HC06_READ_TIMEOUT) loop
     -- Getting the character is a one time read so stop as soon as it is over.
      if _bluetooth_hc06_serial_read(character) then
         if (character == token[index]) then
            index = index + 1
         else
            -- No match (yet), try again.
            index = 0
         end if  
      end if
      timeout = timeout + 1
      _usec_delay(100)
   end loop
   -- Remove all other data from the receive buffer (if any).
   _bluetooth_hc06_flush_serial_receive_buffer()  
   
   return (index == count(token))
   
end function



