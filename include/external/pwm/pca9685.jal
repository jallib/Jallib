-- -----------------------------------------------------------------------------
-- Title: Library for PCA9685 16 channel 12-bit PWM Controller
-- Author: Rob Jansen, Copyright (c) 2022..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for controlling the PCA9685 16 channel 12-bit PWM Controller.
--              The chip uses an IIC interface. In order to support multiple devices
--              connected to the same IIC bus, the IIC address is selectable.
--
-- Sources: NXP Product data sheet, Rev. 4 â€” 16 April 2015
--
-- Notes: This library supports the control of the PCA9685 via IIC.
--        The default is hardware IIC control but this can be overruled using 
--        software IIC control by defining the following constant:
--        -) const PCA9685_SOFTWARE_IIC = TRUE 
--
--        The default IIC address is defined by PCA9685_IIC_ADDRESS and can be
--        overruled by: const byte PCA9685_IIC_ADDRESS = <your iic address>.
--        During operation the IIC address can be changed dynamically to support
--        the control of multiple PCA9685 devices.
--
--        The following pins must be defined by the main program before 
--        including this library. Common pins for using IIC:
--        -) alias pca9685_sck             -- IIC to sck of rtc
--        -) alias pca9685_sck_direction    
--        -) alias pca9685_sdo             -- IIC to sda of rtc  
--        -) alias pca9685_sdo_direction  
-- 
--

-- =============================================================================
-- ============================= PUBLIC CONSTANTS ==============================
-- =============================================================================

-- Define a default IIC address for the PCA9685 if not already defined. The 
-- default address with A0 to A5 zero is 0x80, see figure 4 of the data sheet.
if !defined(PCA9685_IIC_ADDRESS) then
   const byte PCA9685_IIC_ADDRESS = 0x80
end if

-- Min and max values of the PWM time. These are starting positions at which
-- an output can be turned on and turned off.
const word PCA9685_PWM_MIN_TIME   = 0    
const word PCA9685_PWM_MAX_TIME   = 4095 
-- Special value for PWM full on or full off. Full is bit 12 on (4096 decimal).
const word PCA9685_PWM_FULL_TIME  = 0x1000 

-- Channel definitions.
const byte PCA9685_NR_OF_CHANNELS = 16
const byte PCA9685_MIN_CHANNEL    = 0
const byte PCA9685_MAX_CHANNEL    = PCA9685_NR_OF_CHANNELS - 1
-- Use a special value to write all channel values at once.
const byte PCA9685_ALL_CHANNEL    = PCA9685_NR_OF_CHANNELS

-- PWM frequencies in Hz based on using a 25 MHz clock as is generated by the
-- internal oscillator. When using an external clock with a different frequency 
-- these values have to be recalculated accordingly.
const word PCA9685_PWM_MIN_FREQUENCY     = 24
const word PCA9685_PWM_MAX_FREQUENCY     = 1525
const word PCA9685_PWM_DEFAULT_FREQUENCY = 200  -- Value after power up or reset.

-- =============================================================================
-- ========================== Public API ======================================
-- =============================================================================

-- ----------------------------------------------------------------------------
-- Intialize the PCA9685 by initializing the IIC interface and restart the 
-- device. 
-- Note: When using a second PCA9685 device you need to set the IIC address
--       of that device first and call this init procedure again.
-- ----------------------------------------------------------------------------
procedure pca9685_init()

-- ----------------------------------------------------------------------------
-- Put the PCA9685 to sleep. This will activate the low power mode. Make sure
-- to call pca9685_restart() to restore operation.
-- ----------------------------------------------------------------------------
procedure pca9685_sleep()

-- ----------------------------------------------------------------------------
-- Restart the PCA9685 as to wakeup from sleep (must be sleeping to wakeup). 
-- ----------------------------------------------------------------------------
procedure pca9685_restart() 

-- ----------------------------------------------------------------------------
-- Reset all PCA9685 devices connected to the IIC bus bringing them back to the
-- default settings. Make sure to call pca9685_init() to restore operation.
-- ----------------------------------------------------------------------------
procedure pca9685_reset()

-- ----------------------------------------------------------------------------
-- Set the IIC address of the device to communicate with. Once set, all 
-- IIC communication is done to the device with this IIC address. 
-- Only needed when commmunicating needs to be done with multiple devices.
-- ----------------------------------------------------------------------------
procedure pca9685_set_iic_address(byte in iic_address)

-- ----------------------------------------------------------------------------
-- Get the currently set IIC address of the device we are communicating with. 
-- ----------------------------------------------------------------------------
function pca9685_get_iic_address() return byte

-- ----------------------------------------------------------------------------
-- Set the currently set IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_all_call_address(byte in iic_address)

-- ----------------------------------------------------------------------------
-- Get the IIC all call address. 
-- ----------------------------------------------------------------------------
function pca9685_get_all_call_address() return byte

-- ----------------------------------------------------------------------------
-- Enable the IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_all_call_address()

-- ----------------------------------------------------------------------------
-- Disable the IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_all_call_address()

-- ----------------------------------------------------------------------------
-- Set the PWM frequency. The frequency is given in Hz and must be
-- >= PCA9685_PWM_MIN_FREQUENCY and <= PCA9685_PWM_MAX_FREQUENCY when using 
-- an oscillator frequency of 25 MHz (default internal oscillator frequency).
-- ----------------------------------------------------------------------------
procedure pca9685_set_pwm_frequency(word in frequency)

-- ----------------------------------------------------------------------------
-- Get the currently set PWM frequency in Hz.
-- ----------------------------------------------------------------------------
function pca9685_get_pwm_frequency() return word

-- ----------------------------------------------------------------------------
-- Select the external oscillator with the given oscillator frequency. The
-- freqency is given in Hz and must be <= 50 MHz. Switching back to the internal
-- oscillator can only be achieved by a power cycle or a software reset.
-- ----------------------------------------------------------------------------
procedure pca9685_select_external_oscillator(dword in frequency)

-- ----------------------------------------------------------------------------
-- Get the currently set oscillator frequency. 
-- ----------------------------------------------------------------------------
function pca9685_get_oscillator_frequency() return dword

-- ----------------------------------------------------------------------------
-- Set the given channel output to ON. The given channel must be in range 
-- PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL. If the given channel equals 
-- PCA9685_ALL_CHANNEL then all channels are set to ON.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_on(byte in channel)

-- ----------------------------------------------------------------------------
-- Set the given channel output to OFF. The given channel must be in range 
-- PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL. If the given channel equals 
-- PCA9685_ALL_CHANNEL then all channels are set to OFF.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_off(byte in channel)

-- ----------------------------------------------------------------------------
-- Set the channel PWM duty cycle in % of the on time where 0% is off and 100% 
-- is on. The given channel must be in range PCA9685_MIN_CHANNEL to
-- PCA9685_MAX_CHANNEL. If the given channel equals PCA9685_ALL_CHANNEL then
-- all channels will be set with the given percentage.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_pwm_percent(byte in channel, byte in percent)

-- ----------------------------------------------------------------------------
-- Set the channel PWM duty cycle ratio by setting the ON time and OFF time. 
-- -) The on_time is the moment between 0 and PCA9685_PWM_MAX_TIME where the
--    the output it turned ON. 
-- -) The off_time is the moment between 0 and PCA9685_PWM_MAX_TIME where the
--    the output it turned OFF. 
-- This gives maximum flexibility in defining the PWM delay and PWM duty cycle.
-- The given channel must be in range PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL.
-- If the given channel equals PCA9685_ALL_CHANNEL then all channels will be
-- set with the given PWM duty cycle ratio.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_pwm_ratio(byte in channel, word in on_time, 
                                        word in off_time)

-- ----------------------------------------------------------------------------
-- Get the channel PWM duty cycle ratio by returning the ON time and OFF time
-- of the given channel. The given channel must be in range PCA9685_MIN_CHANNEL
-- to PCA9685_MAX_CHANNEL.
-- ----------------------------------------------------------------------------
procedure pca9685_get_channel_pwm_ratio(byte in channel, word out on_time, 
                                        word out off_time) 


-- ----------------------------------------------------------------------------
-- Set the output to inverted mode (output must be enabled, that is OE=LOW).
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_inverted()

-- ----------------------------------------------------------------------------
-- Set the output to not inverted mode (output must be enabled, that is OE=LOW).
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_not_inverted() 

-- ----------------------------------------------------------------------------
-- Set the output to totem pole (output must be enabled, that is OE=LOW)
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_totempole()

-- ----------------------------------------------------------------------------
-- Set the output to open drain (output must be enabled, that is OE=LOW)
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_open_drain()

-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=1=HIGH) to high. 
-- Note the output is only high if the output was set to totem pole otherwise 
-- the output will be high-impedance.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_high()

-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=HIGH) to Low.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_low()

-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=HIGH) to high 
-- impedance.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_high_impedance() 

-- ----------------------------------------------------------------------------
-- Set the PWM output to change on acknowledge. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_change_on_ack() 

-- ----------------------------------------------------------------------------
-- Set the PWM output to change on stop. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_change_on_stop()

-- ----------------------------------------------------------------------------
-- Set IIC sub address 1. Default value is 0xE2.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_1(byte in iic_address)

-- ----------------------------------------------------------------------------
-- Get IIC sub address 1.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_1() return byte

-- ----------------------------------------------------------------------------
-- Set IIC sub address 2. Default value is 0xE4.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_2(byte in iic_address)

-- ----------------------------------------------------------------------------
-- Get IIC sub address 2.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_2() return byte

-- ----------------------------------------------------------------------------
-- Set IIC sub address 3. Default value is 0xE8.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_3(byte in iic_address)

-- ----------------------------------------------------------------------------
-- Get IIC sub address 3.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_3() return byte

-- ----------------------------------------------------------------------------
-- Enable IIC sub address 1. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_1()

-- ----------------------------------------------------------------------------
-- Disable IIC sub address 1. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_1()

-- ----------------------------------------------------------------------------
-- Enable IIC sub address 2. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_2()

-- ----------------------------------------------------------------------------
-- Disable IIC sub address 2. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_2()

-- ----------------------------------------------------------------------------
-- Enable IIC sub address 3. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_3()

-- ----------------------------------------------------------------------------
-- Disable IIC sub address 3. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_3()

-- =============================================================================
-- ================================ PRIVATE ====================================
-- =============================================================================

-- ---------------------- Private constants and variables ----------------------

--Register addresses from data sheet.
const byte _PCA9685_MODE1_REG               = 0x00
const byte _PCA9685_MODE2_REG               = 0x01
const byte _PCA9685_SUBADR1_REG             = 0x02
const byte _PCA9685_SUBADR2_REG             = 0x03
const byte _PCA9685_SUBADR3_REG             = 0x04
const byte _PCA9685_ALLCALL_REG             = 0x05
const byte _PCA9685_LED0_REG                = 0x06  
const byte _PCA9685_PRESCALE_REG            = 0xFE
const byte _PCA9685_ALLLED_REG              = 0xFA

-- Mode1 register values.
const byte _PCA9685_MODE1_RESTART           = 0x80
const byte _PCA9685_MODE1_EXTCLK            = 0x40
const byte _PCA9685_MODE1_AUTOINC           = 0x20
const byte _PCA9685_MODE1_SLEEP             = 0x10
const byte _PCA9685_MODE1_SUBADR1           = 0x08
const byte _PCA9685_MODE1_SUBADR2           = 0x04
const byte _PCA9685_MODE1_SUBADR3           = 0x02
const byte _PCA9685_MODE1_ALLCALL           = 0x01

-- Mode2 register values.
const byte _PCA9685_MODE2_OUTDRV_TPOLE      = 0x04
const byte _PCA9685_MODE2_INVRT             = 0x10
const byte _PCA9685_MODE2_OUTNE_HIGH        = 0x01
const byte _PCA9685_MODE2_OUTNE_HIGHZ       = 0x02
const byte _PCA9685_MODE2_OCH_ONACK         = 0x08

-- Command sent to address 0x00 to reset all devices on the IIC bus.
const byte _PCA9685_SW_RESET                = 0x06    

-- Default internal oscillator frequency.
const dword _PCA9685_OSC_INTERNAL_FREQUENCY = 25_000_000 
-- Maximun external oscillator frequency when using an external clock.
const dword _PCA9685_OSC_MAX_FREQUENCY      = 50_000_000 

-- Private variables. Preset some at the start of the program as in pca9685_reset().
-- Selected default oscillator frequency.
var dword _pca9685_oscillator_frequency = _PCA9685_OSC_INTERNAL_FREQUENCY 
-- Selected default PWM frequency.
var word _pca9685_pwm_frequency         = PCA9685_PWM_DEFAULT_FREQUENCY
-- Selected IIC address.   
var byte _pca9685_iic_address           = PCA9685_IIC_ADDRESS             

-- ------------------------- Private function prototypes ----------------------

-- ----------------------------------------------------------------------------
-- Write the given data to the given register of the PCA9685.
-- ----------------------------------------------------------------------------
procedure _pca9685_write_register(byte in register, byte in data)

-- ----------------------------------------------------------------------------
-- Read a byte from the given register of the PCA9685 and return it.
-- ----------------------------------------------------------------------------
function _pca9685_read_register(byte in register) return byte 

-- ----------------------------------------------------------------------------
-- Write the given on time and off time to the given channel register. 
-- ----------------------------------------------------------------------------
procedure __pca9685_write_register_data_on_off(byte in register, word in on_time, 
                                              word in off_time) 

-- ----------------------------------------------------------------------------
-- Read and return the on time and off time of the given output register. 
-- ----------------------------------------------------------------------------
procedure __pca9685_read_register_data_on_off(byte in register, word out on_time, 
                                             word out off_time)

-- ----------------------------------------------------------------------------
-- Calculate the output channel register and return it. 
-- ----------------------------------------------------------------------------
function _calculate_channel_register(byte in channel) return byte

-- =============================================================================
-- ============================== IMPLEMENTATION ===============================
-- =============================================================================

-- Use IIC control. Set the clock speed to 400kHz. Use HW or SW IIC.
if !defined(_i2c_bus_speed) then
   const word _i2c_bus_speed = 4 -- 400kHz (set to 1 gives 100 kHz clock speed) 
end if

if defined(RTC_SOFTWARE_IIC) then 
   if !defined(i2c_scl) then
      alias i2c_scl is pca9685_sck
   end if 
   if !defined(i2c_sda) then
      alias i2c_sda is pca9685_sdo
   end if 
   if !defined(i2c_scl_direction) then
      alias i2c_scl_direction is pca9685_sck_direction
   end if 
   if !defined(i2c_sda_direction) then
      alias i2c_sda_direction is pca9685_sdo_direction
   end if 
   include i2c_software
else
   -- Hardware IIC. In some device files, the IIC pins are already defined 
   -- and assigned to a specific hardware pin (see datasheet of your PIC).
   if !defined(pin_scl_direction) then
      alias pin_scl_direction  is pca9685_sck_direction
   end if
   if !defined(pin_sda_direction) then
      alias pin_sda_direction is pca9685_sdo_direction
   end if
   -- I2C level setting. For SMB levels use: const bit _i2c_level = FALSE
   if !defined(_i2c_level) then 
      const bit _i2c_level = TRUE -- i2c levels (not SMB)
   end if
   include i2c_hardware
end if


-- ----------------------------------------------------------------------------
-- Reset all PCA9685 devices connected to the IIC bus bringing them back to the
-- default settings. Make sure to call pca9685_init() to restore operation.
-- ----------------------------------------------------------------------------
procedure pca9685_reset() is

   var bit _trash 

   -- Perform a Software Reset Call for all devices. 
   i2c_start()
   _trash = i2c_transmit_byte(0)
   _trash = i2c_transmit_byte(_PCA9685_SW_RESET)
   i2c_stop()
   -- Wait bus free time.
   _usec_delay(10)

   -- Also set other internal variables and default values.
   _pca9685_oscillator_frequency = _PCA9685_OSC_INTERNAL_FREQUENCY
   _pca9685_pwm_frequency = PCA9685_PWM_DEFAULT_FREQUENCY
   _pca9685_iic_address = PCA9685_IIC_ADDRESS

end procedure


-- ----------------------------------------------------------------------------
-- Intialize the PCA9685 by initializing the IIC interface and restart the 
-- device. 
-- Note: When using a second PCA9685 device you need to set the IIC address
--       of that device first and call this init procedure again.
-- ----------------------------------------------------------------------------
procedure pca9685_init() is

   var byte mode1_value

   -- Initialize the IIC interface, can be hardware IIC or software IIC.
   i2c_initialize()
 
   -- Set mode 1 register to auto increment, also set the restart bit.
   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) | _PCA9685_MODE1_AUTOINC |
                                        _PCA9685_MODE1_RESTART
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)

   -- Restart the device (after reset or power up it is in power down mode)
   pca9685_restart()
   
end procedure


-- ----------------------------------------------------------------------------
-- Put the PCA9685 to sleep. This will activate the low power mode. Make sure
-- to call pca9685_restart() to restore operation.
-- ----------------------------------------------------------------------------
procedure pca9685_sleep() is

   var byte mode1_value

   -- Get current setting and activate sleep. 
   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_RESTART | 
                                        _PCA9685_MODE1_SLEEP 
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)

end procedure


-- ----------------------------------------------------------------------------
-- Restart the PCA9685 as to wakeup from sleep (must be sleeping to wakeup). 
-- ----------------------------------------------------------------------------
procedure pca9685_restart() is

   var byte mode1_value

   -- Get current setting and clear sleep bit.
   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_SLEEP
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   -- We must give the device time to power up again before activating restart. Also 
   -- make sure that auto increment is enabled.
   _usec_delay(500)
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value | _PCA9685_MODE1_RESTART |
                           _PCA9685_MODE1_AUTOINC)

end procedure


-- ----------------------------------------------------------------------------
-- Set the IIC address of the device to communicate with. Once set, all 
-- IIC communication is done to the device with this IIC address. 
-- Only needed when commmunicating needs to be done with multiple devices.
-- ----------------------------------------------------------------------------
procedure pca9685_set_iic_address(byte in iic_address) is

   _pca9685_iic_address= iic_address 
    
end procedure


-- ----------------------------------------------------------------------------
-- Get the currently set IIC address of the device we are communicating with. 
-- ----------------------------------------------------------------------------
function pca9685_get_iic_address() return byte is

   return _pca9685_iic_address
    
end function


-- ----------------------------------------------------------------------------
-- Set the IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_all_call_address(byte in iic_address) is

   -- Set the all call address, bit 0 must be 0.
   _pca9685_write_register(_PCA9685_ALLCALL_REG, iic_address & 0xFE) 
    
end procedure


-- ----------------------------------------------------------------------------
-- Get the currently set IIC all call address. 
-- ----------------------------------------------------------------------------
function pca9685_get_all_call_address() return byte is

   return _pca9685_read_register(_PCA9685_ALLCALL_REG) 

end function


-- ----------------------------------------------------------------------------
-- Enable the IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_all_call_address() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG)
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value | _PCA9685_MODE1_ALLCALL)
    
end procedure


-- ----------------------------------------------------------------------------
-- Disable the IIC all call address. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_all_call_address() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG)
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value & !_PCA9685_MODE1_ALLCALL)
    
end procedure


-- ----------------------------------------------------------------------------
-- Set the PWM frequency. The frequency is given in Hz and must be 
-- >= PCA9685_PWM_MIN_FREQUENCY and <= PCA9685_PWM_MAX_FREQUENCY when using 
-- an oscillator frequency of 25 MHz (default internal oscillator frequency).
-- ----------------------------------------------------------------------------
procedure pca9685_set_pwm_frequency(word in frequency) is

   var dword calculation

   -- See if the given frequency is not too high. The maximum frequency is determined
   -- by the oscillator frequency. 
   calculation = _pca9685_oscillator_frequency / (4 * 4096)
   if (frequency <= word(calculation)) then
      _pca9685_pwm_frequency = frequency
      -- Calculate the prescaler value.
      calculation = (_pca9685_oscillator_frequency / 4096 / dword(_pca9685_pwm_frequency)) - 1
      -- Check the allowable ranges for the prescaler.
      if (calculation > 255) then
         calculation = 255
      elsif (calculation < 3) then
         calculation = 3
      end if
      -- The prescaler register can only be set when the device is put to sleep.
      pca9685_sleep()
      _pca9685_write_register(_PCA9685_PRESCALE_REG, byte(calculation))
      -- Restart the device to wakeup from sleep.
      pca9685_restart()
   end if 
   
end procedure


-- ----------------------------------------------------------------------------
-- Get the currently set PWM frequency in Hz.
-- ----------------------------------------------------------------------------
function pca9685_get_pwm_frequency() return word is

   return _pca9685_pwm_frequency

end function


-- ----------------------------------------------------------------------------
-- Select the external oscillator with the given oscillator frequency. The
-- freqency is given in Hz and must be <= 50 MHz. Switching back to the internal
-- oscillator can only be achieved by a power cycle or a software reset.
-- ----------------------------------------------------------------------------
procedure pca9685_select_external_oscillator(dword in frequency) is

   var byte mode1_value

   if (frequency <= _PCA9685_OSC_MAX_FREQUENCY ) then
      -- Get the current mode1 value, and activate sleep.
      mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_RESTART |
                    _PCA9685_MODE1_SLEEP
      _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
      -- Now select the external oscillator.
      _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value | _PCA9685_MODE1_EXTCLK)
      _pca9685_oscillator_frequency = frequency
      -- Restart the device to wakeup from sleep.
      pca9685_restart()
   end if 
   
end procedure


-- ----------------------------------------------------------------------------
-- Get the currently set oscillator frequency. 
-- ----------------------------------------------------------------------------
function pca9685_get_oscillator_frequency() return dword is

   return _pca9685_oscillator_frequency

end function


-- ----------------------------------------------------------------------------
-- Set the given channel output to ON. The given channel must be in range 
-- PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL. If the given channel equals 
-- PCA9685_ALL_CHANNEL then all channels are set to ON.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_on(byte in channel) is

   if  (channel <= PCA9685_ALL_CHANNEL) then
      __pca9685_write_register_data_on_off(_calculate_channel_register(channel), 
                                          PCA9685_PWM_FULL_TIME, 0)
   end if 

end procedure


-- ----------------------------------------------------------------------------
-- Set the given channel output to OFF. The given channel must be in range 
-- PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL. If the given channel equals 
-- PCA9685_ALL_CHANNEL then all channels are set to OFF.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_off(byte in channel) is

   if  (channel <= PCA9685_ALL_CHANNEL) then
      __pca9685_write_register_data_on_off(_calculate_channel_register(channel), 
                                          0, PCA9685_PWM_FULL_TIME)
   end if 

end procedure


-- ----------------------------------------------------------------------------
-- Set the channel PWM duty cycle in % of the on time where 0% is off and 100% 
-- is on. The given channel must be in range PCA9685_MIN_CHANNEL to
-- PCA9685_MAX_CHANNEL. If the given channel equals PCA9685_ALL_CHANNEL then
-- all channels will be set with the given percentage.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_pwm_percent(byte in channel, byte in percent) is

   var dword calculation
   var word on_time, off_time

   if (percent <= 100) & (channel <= PCA9685_ALL_CHANNEL) then

      -- The on and off values are the moment where the output is turned on 
      -- and off in the range PCA9685_PWM_MIN_RATIO to PCA9685_PWM_MAX_RATIO.
      if (percent == 0) then
         -- Completely off.  
         pca9685_set_channel_off(channel)
      elsif (percent == 100) then
         -- Completey on. 
         pca9685_set_channel_on(channel)
      else 
         -- We always start the on time at PCA9685_PWM_MIN_TIME.
         on_time = PCA9685_PWM_MIN_TIME
         -- Calculate when we have to switch the output off.
         calculation = (dword(percent) * PCA9685_PWM_MAX_TIME) / 100
         off_time = word(calculation)
         -- Send the data to the right registers of the channel.
         __pca9685_write_register_data_on_off(_calculate_channel_register(channel), 
                                              on_time, off_time)
      end if

   end if
    
end procedure


-- ----------------------------------------------------------------------------
-- Set the channel PWM duty cycle ratio by setting the ON time and OFF time. 
-- -) The on_time is the moment between 0 and PCA9685_PWM_MAX_TIME where the
--    the output it turned ON. 
-- -) The off_time is the moment between 0 and PCA9685_PWM_MAX_TIME where the
--    the output it turned OFF. 
-- This gives maximum flexibility in defining the PWM delay and PWM duty cycle.
-- The given channel must be in range PCA9685_MIN_CHANNEL to PCA9685_MAX_CHANNEL.
-- If the given channel equals PCA9685_ALL_CHANNEL then all channels will be
-- set with the given PWM duty cycle ratio.
-- ----------------------------------------------------------------------------
procedure pca9685_set_channel_pwm_ratio(byte in channel, word in on_time, 
                                        word in off_time) is


   if (on_time <= PCA9685_PWM_MAX_TIME) & (off_time <= PCA9685_PWM_MAX_TIME) &
      (channel <= PCA9685_ALL_CHANNEL) then

     -- Send the data to the right registers of the channel.
      __pca9685_write_register_data_on_off(_calculate_channel_register(channel), 
                                           on_time, off_time)
   end if
  
end procedure


-- ----------------------------------------------------------------------------
-- Get the channel PWM duty cycle ratio by returning the ON time and OFF time
-- of the given channel. The given channel must be in range PCA9685_MIN_CHANNEL
-- to PCA9685_MAX_CHANNEL.
-- ----------------------------------------------------------------------------
procedure pca9685_get_channel_pwm_ratio(byte in channel, word out on_time, 
                                        word out off_time) is

   var bit _trash
  
   -- We only have to check if the channel is valid. Cannot be PCA9685_ALL_CHANNEL.
   if (channel <= PCA9685_MAX_CHANNEL) then
      -- Send the data to the right registers of the channel.
      __pca9685_read_register_data_on_off(_calculate_channel_register(channel), 
                                         on_time, off_time)
   end if
  
end procedure


-- ----------------------------------------------------------------------------
-- Set the output to inverted mode (output must be enabled, that is OE=LOW).
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_inverted() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) | _PCA9685_MODE2_INVRT 
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)

end procedure


-- ----------------------------------------------------------------------------
-- Set the output to not inverted mode (output must be enabled, that is OE=LOW).
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_not_inverted() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) & !_PCA9685_MODE2_INVRT 
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the output to totem pole (output must be enabled, that is OE=LOW)
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_totempole() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) | _PCA9685_MODE2_OUTDRV_TPOLE 
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the output to open drain (output must be enabled, that is OE=LOW)
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_open_drain() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) & !_PCA9685_MODE2_OUTDRV_TPOLE 
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=1=HIGH) to high. 
-- Note the output is only high if the output was set to totem pole otherwise 
-- the output will be high-impedance.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_high() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) | _PCA9685_MODE2_OUTNE_HIGH &
                                      !_PCA9685_MODE2_OUTNE_HIGHZ       
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=HIGH) to Low.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_low() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) & !_PCA9685_MODE2_OUTNE_HIGH &
                                      !_PCA9685_MODE2_OUTNE_HIGHZ       
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the disabled output (output must be disabled, that is OE=HIGH) to high 
-- impedance.
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_disable_high_impedance() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) | _PCA9685_MODE2_OUTNE_HIGHZ
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the PWM output to change on acknowledge. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_change_on_ack() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) | _PCA9685_MODE2_OCH_ONACK
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the PWM output to change on stop. 
-- ----------------------------------------------------------------------------
procedure pca9685_set_output_change_on_stop() is

   var byte mode2_value

   mode2_value = _pca9685_read_register(_PCA9685_MODE2_REG) & !_PCA9685_MODE2_OCH_ONACK
   _pca9685_write_register(_PCA9685_MODE2_REG, mode2_value)
   
end procedure

-- ----------------------------------------------------------------------------
-- Set IIC sub address 1. Default value is 0xE2.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_1(byte in iic_address) is

   _pca9685_write_register(_PCA9685_SUBADR1_REG, iic_address)
   
end procedure

-- ----------------------------------------------------------------------------
-- Get IIC sub address 1.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_1() return byte is

   return _pca9685_read_register(_PCA9685_SUBADR1_REG)
   
end function


-- ----------------------------------------------------------------------------
-- Set IIC sub address 2. Default value is 0xE4.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_2(byte in iic_address) is

   _pca9685_write_register(_PCA9685_SUBADR2_REG, iic_address)
   
end procedure

-- ----------------------------------------------------------------------------
-- Get IIC sub address 2.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_2() return byte is

   return _pca9685_read_register(_PCA9685_SUBADR2_REG)
   
end function


-- ----------------------------------------------------------------------------
-- Set IIC sub address 3. Default value is 0xE8.
-- ----------------------------------------------------------------------------
procedure pca9685_set_sub_address_3(byte in iic_address) is

   _pca9685_write_register(_PCA9685_SUBADR3_REG, iic_address)
   
end procedure


-- ----------------------------------------------------------------------------
-- Get IIC sub address 3.
-- ----------------------------------------------------------------------------
function pca9685_get_sub_address_3() return byte is

   return _pca9685_read_register(_PCA9685_SUBADR3_REG)
   
end function


-- ----------------------------------------------------------------------------
-- Enable IIC sub address 1. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_1() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) | _PCA9685_MODE1_SUBADR1
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Disable IIC sub address 1. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_1() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_SUBADR1
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Enable IIC sub address 2. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_2() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) | _PCA9685_MODE1_SUBADR2
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure

-- ----------------------------------------------------------------------------
-- Disable IIC sub address 2. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_2() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_SUBADR2
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure



-- ----------------------------------------------------------------------------
-- Enable IIC sub address 3. 
-- ----------------------------------------------------------------------------
procedure pca9685_enable_sub_address_3() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) | _PCA9685_MODE1_SUBADR3
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure


-- ----------------------------------------------------------------------------
-- Disable IIC sub address 3. 
-- ----------------------------------------------------------------------------
procedure pca9685_disable_sub_address_3() is

   var byte mode1_value

   mode1_value = _pca9685_read_register(_PCA9685_MODE1_REG) & !_PCA9685_MODE1_SUBADR3
   _pca9685_write_register(_PCA9685_MODE1_REG, mode1_value)
   
end procedure


-- ---------------------- Private procedures and functions --------------------

-- ----------------------------------------------------------------------------
-- Write the given data to the given register of the PCA9685.
-- ----------------------------------------------------------------------------
procedure _pca9685_write_register(byte in register, byte in data) is

   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_pca9685_iic_address & 0b1111_1110)
   _trash = i2c_transmit_byte(register)
   _trash = i2c_transmit_byte(data)
   i2c_stop()

end procedure


-- ----------------------------------------------------------------------------
-- Read a byte from the given register of the PCA9685 and return it.
-- ----------------------------------------------------------------------------
function _pca9685_read_register(byte in register) return byte is

   var byte data 
   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_pca9685_iic_address & 0b1111_1110)
   _trash = i2c_transmit_byte(register)
   i2c_restart()
   _trash = i2c_transmit_byte(_pca9685_iic_address | 0b0000_0001)
   -- Read only one byte so no acknowledge.
   data =  i2c_receive_byte(FALSE) 
   i2c_stop()

   return data

end function


-- ----------------------------------------------------------------------------
-- Write the given on time and off time to the given channel register. 
-- ----------------------------------------------------------------------------
procedure __pca9685_write_register_data_on_off(byte in register, word in on_time, 
                                               word in off_time) is

   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_pca9685_iic_address & 0b1111_1110)
   -- Register is calculated using register of LED0 as starting point. Each channel uses
   -- four bytes, two for the on-tme and two for the off time.
   _trash = i2c_transmit_byte(register)
   _trash = i2c_transmit_byte(byte(on_time))
   _trash = i2c_transmit_byte(byte(on_time >> 8))
   _trash = i2c_transmit_byte(byte(off_time))
   _trash = i2c_transmit_byte(byte(off_time >> 8))
   i2c_stop()    

end procedure


-- ----------------------------------------------------------------------------
-- Read and return the on time and off time of the given output register. 
-- ----------------------------------------------------------------------------
procedure __pca9685_read_register_data_on_off(byte in register, word out on_time, 
                                             word out off_time) is

   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_pca9685_iic_address & 0b1111_1110)
   -- Register is calculated using register of LED0 as starting point. Each channel uses
   -- four bytes, two for the on-tme and two for the off time.
   _trash = i2c_transmit_byte(register)
   -- Switch to read.
   i2c_restart()
   _trash = i2c_transmit_byte(_pca9685_iic_address | 0b0000_0001)
   on_time = i2c_receive_byte(TRUE)
   on_time = on_time + (word(i2c_receive_byte(TRUE)) << 8)
   off_time = i2c_receive_byte(TRUE)
   -- Read last byte so no acknowledge.
   off_time = off_time + (word(i2c_receive_byte(FALSE)) << 8)
   i2c_stop()

end procedure

-- ----------------------------------------------------------------------------
-- Calculate the output channel register based on the given channel and return it. 
-- ----------------------------------------------------------------------------
function _calculate_channel_register(byte in channel) return byte is

   if (channel == PCA9685_ALL_CHANNEL) then
      return _PCA9685_ALLLED_REG
   else
      return _PCA9685_LED0_REG + (channel * 4)
   end if

end function


