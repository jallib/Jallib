-- -----------------------------------------------------------------------------
-- Title: Library to support a chain of WS2812B chips via USART interface
--
-- Author: Rob Hamerling, Copyright (c) 2014..2016, all rights reserved.
--
-- Adapted-by: Rob Hamerling
--
-- Compiler: 2.4q6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description: Library to control a chain of WS2812Bs
-- This library uses the USART module with master SYNC protocol.
-- - A PIC with Fosc of at least 32 MHz is required.
-- - A high speed USART is required (BRG16 bit in BAUDCON).
-- - The first or only USART interface is used and initialized automatically.
-- - The DIN wire of the WS2812B must be connected to pin_RX/DT of the PIC.
--   - The pin_RX/DT may have to be configured with Peripheral Pin Select (PPS)
--     or Alternate Pin Function (APFCON_RXDTSEL),
--     (the clock pin is not used).
-- - Because the WS2812b requires low-level for reset and the (E)USART
--   keeps RXDT high-level in idle-state an external polarity inverter is
--   required. The library generates an 'inverted' bitstream.
-- - The number of WS2812Bs in the chain must be defined with a constant:
--      const WS2812B_NUM = 30               -- for 30 chained WS2812Bs
-- - The user program should contain 3 byte arrays of WS2812B_NUM bytes each,
--   one for green, one for red, one for blue, e.g.:
--      var byte agreen[WS2812B_NUM]
--      var byte ared[WS2812B_NUM]
--      var byte ablue[WS2812B_NUM]
-- - Initialize the interface with procedure ws2812b_sync_init().
-- - Procedure ws2812b_refresh() is used to pass the current color settings
--   to the WS2812B LEDs.
-- - Procedure ws2812b_all_color() can be used to give all LEDs the same
--   color (or clear all leds with intensity 0) while keeping
--   the color settings in the arrays unchanged.
--
-- Dependencies: ws2812b_common.jal
--
-- Notes: - Warnings are temporary(?) commented out.
--
-- -----------------------------------------------------------------------------

-- ========= 'private' procedures =====================

-- ----------------------------------------------------------------------------
-- Title:   Transmit a byte (with 3 WS2812B 'bits')
-- Input:   Byte with 3 WS2812B bits as 9 USART bits.
--          The 9th bit is fixed, so only 8 bits need be passed.
-- Notes: - We do not wait for completion after a write, but we need
--          to wait for TXREG being empty before transfer of data.
-- ----------------------------------------------------------------------------
procedure _transfer_byte(byte in data) is
   pragma inline
   while (!PIR1_TXIF) loop end loop           -- wait until TXREG is free
   TXREG = data                               -- send to USART
end procedure


-- ----------------------------------------------------------------------------
-- Title:  Transfer 3 color bytes to the WS2812B chain
-- Input:  Color intensities of green, red and blue (3 bytes)
-- Notes:  - Each WS2812B bit is represented by 3 USART bits:
--           (WS2812B '0' = 0b100, WS2812B '1' = 0b110).
--         - The USART is configured for 9 databits (sync: no start-/stop-bits),
--           thus 3 ws2812b-bits fit in a USART databyte (with bit 9 fixed 1).
--         - The USART transfers data with least significant bit first
--           therefore the bit patterns become 0->'001' and 1->'011'
--         - Because of the required external inverter: 0->'110' and 1->'100'
-- ----------------------------------------------------------------------------
procedure _ws2812b_write_pixel(byte in green, byte in red, byte in blue) is

   var bit  b00   at green : 7
   var bit  b01   at green : 6
   var bit  b02   at green : 5
   var bit  b03   at green : 4
   var bit  b04   at green : 3
   var bit  b05   at green : 2
   var bit  b06   at green : 1
   var bit  b07   at green : 0
   var bit  b08   at red   : 7
   var bit  b09   at red   : 6
   var bit  b10   at red   : 5
   var bit  b11   at red   : 4
   var bit  b12   at red   : 3
   var bit  b13   at red   : 2
   var bit  b14   at red   : 1
   var bit  b15   at red   : 0
   var bit  b16   at blue  : 7
   var bit  b17   at blue  : 6
   var bit  b18   at blue  : 5
   var bit  b19   at blue  : 4
   var bit  b20   at blue  : 3
   var bit  b21   at blue  : 2
   var bit  b22   at blue  : 1
   var bit  b23   at blue  : 0

   var byte data                                -- byte to transfer
   var bit  dbit1 at data  : 1                  -- )
   var bit  dbit4 at data  : 4                  -- )
   var bit  dbit7 at data  : 7                  -- )

   const byte DATA000 = 0b10_110_110            -- 3 WS2812B zero bits
                                                -- LSb first, 9th bit fixed
   data = DATA000                               -- 0 0 0  WS2812b bits
   if (b00) then dbit1 = 0 end if               -- . . x
   if (b01) then dbit4 = 0 end if               -- . x .
   if (b02) then dbit7 = 0 end if               -- x . .
   _transfer_byte(data)

   data = DATA000
   if (b03) then dbit1 = 0 end if
   if (b04) then dbit4 = 0 end if
   if (b05) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b06) then dbit1 = 0 end if
   if (b07) then dbit4 = 0 end if
   if (b08) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b09) then dbit1 = 0 end if
   if (b10) then dbit4 = 0 end if
   if (b11) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b12) then dbit1 = 0 end if
   if (b13) then dbit4 = 0 end if
   if (b14) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b15) then dbit1 = 0 end if
   if (b16) then dbit4 = 0 end if
   if (b17) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b18) then dbit1 = 0 end if
   if (b19) then dbit4 = 0 end if
   if (b20) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b21) then dbit1 = 0 end if
   if (b22) then dbit4 = 0 end if
   if (b23) then dbit7 = 0 end if
   _transfer_byte(data)

end procedure


-- ----------------------------------------------------------------------------
-- Title:   Initialize the USART for Synchronous transmit at the required speed
-- Input:   (none)
-- Notes:   Transmit mode only (clock pin not really used)
--          Baudrate rounded up (too fast works better than too slow)
-- ----------------------------------------------------------------------------
procedure  ws2812b_sync_init() is

   if (defined(BAUDCON_BRG16)) then
      BAUDCON_BRG16 = 1                         -- high speed
   else
      _error "PIC must have a high speed capable USART (16 bits SPBRG)"
   end if

   const WS2812B_BITMUX = 3                  -- 3 USART bits per WS2812 bit
   const WS2812B_BAUDRATE = 800000           -- bitrate of WS2812B is 800 Kbps
   SPBRGH = 0
   SPBRGL = byte(target_clock / 4 / WS2812B_BAUDRATE / WS2812B_BITMUX - 1)
   TXSTA_SYNC = 1                            -- synchronous mode
   TXSTA_CSRC = 1                            -- master mode (clock source)
   TXSTA_TXEN = 1                            -- transmit mode
   TXSTA_TX9  = 1                            -- using 9-bits data
   TXSTA_TX9D = 1                            -- 9th data bit fixed 1
   RCSTA_SREN = 0                            -- transmit mode
   RCSTA_CREN = 0                            -- transmit mode
   RCSTA_SPEN = 1                            -- enable serial port

end procedure

include ws2812b_common                       -- common WS2812B procedures

--
