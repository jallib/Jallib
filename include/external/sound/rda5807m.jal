-- -----------------------------------------------------------------------------
-- Title: Library for the RDA5807M FM RadioTuner.
-- Author: Rob Jansen, Copyright (c) 2023..2023, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r7
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for controlling the RDA5807M Radio Tuner.
--              The chip uses an IIC interface which must be defined by 
--              the main program.
--
-- Sources: Single-Chip Broadcast FM Radio Tuner Rev.1.8â€“Aug.2014
--
-- Notes: The main program has to define and include the used IIC library and
--        if needed define aliases to rule out differences between IIC 
--        libraries. The chip operates at 3.3 Volt so make sure to use a level
--        shifter on the IIC lines if your PIC is running at 5 Volt.
--

-- -----------------------------------------------------------------------------
-- ------------------ PUBLIC CONSTANTS & VARIABLES -----------------------------
-- -----------------------------------------------------------------------------

-- Band selection options.
const byte RDA5807M_BAND_US_EUROPE   = 0 -- 87 .. 108 MHz.
const byte RDA5807M_BAND_JAPAN       = 1 -- 76 .. 91 MHz.
const byte RDA5807M_BAND_WORLD_WIDE  = 2 -- 76 .. 108 MHz.
const byte RDA5807M_BAND_EAST_EUROPE = 3 -- 56 .. 67 or 50 .. 65 MHz.

-- Channel spacing selection options.
const byte RDA5807M_SPACING_25_KHZ  = 0
const byte RDA5807M_SPACING_50_KHZ  = 1
const byte RDA5807M_SPACING_100_KHZ = 2 -- Used for Europe.
const byte RDA5807M_SPACING_200_KHZ = 3

-- Deemphasis options.
const byte RDA5807M_DEEMPHASIS_50_US = 0 -- Used for Europe.
const byte RDA5807M_DEEMPHASIS_75_US = 1

-- Volume levels.
const byte RDA5807M_VOLUME_MIN = 0
const byte RDA5807M_VOLUME_MAX = 15

-- Signal strength (RSSI) levels.
const byte RDA5807M_RSSI_MIN = 0
const byte RDA5807M_RSSI_MAX = 127

-- -- Variables.
-- Lowest frequency of the selected band in kHz.
var dword rda5807m_band_frequency_low  
-- Highest frequency of the selected band in kHz.
var dword rda5807m_band_frequency_high 

-- -----------------------------------------------------------------------------
-- -------------------------- Public API ---------------------------------------
-- -----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
-- Intialize the RDA5807M. The device is initialized for Europe as follows:
-- -) Set the band to RDA5807M_BAND_US_EUROPE
-- -) Set the spacing to RDA5807M_SPACING_100_KHZ
-- -) Set the de-emphasis to RDA5807M_DEEMPHASIS_50_US
-- The device is reset and powered up.
-- ----------------------------------------------------------------------------
procedure rda5807_init()

-- ----------------------------------------------------------------------------
-- Enable the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_power()
   
-- ----------------------------------------------------------------------------
-- Disable the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_power()

-- ----------------------------------------------------------------------------
-- Enable the output of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_output()

-- ----------------------------------------------------------------------------
-- Disable the output of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_output()

-- ----------------------------------------------------------------------------
-- Set the volme of the RDA5870M. Volume must be in range RDA5807M_VOLUME_MIN
-- to RDA5807M_VOLUME_MAX.
-- ----------------------------------------------------------------------------
procedure rda5807_set_volume(byte in volume)
 
-- ----------------------------------------------------------------------------
-- Mute the output off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_mute() 

-- ----------------------------------------------------------------------------
-- Unmute the output off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_unmute() 

-- ----------------------------------------------------------------------------
-- Enable soft mute off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_enable_soft_mute()

-- ----------------------------------------------------------------------------
-- Disable soft mute off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_disable_soft_mute()

-- ----------------------------------------------------------------------------
-- Enable the bass boost off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_enable_bass_boost()

-- ----------------------------------------------------------------------------
-- Disable the bass boost off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807_disable_bass_boost()

-- ----------------------------------------------------------------------------
-- Enable the RDS of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_rds()

-- ----------------------------------------------------------------------------
-- Disable the RDS off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_rds()

-- ----------------------------------------------------------------------------
-- Set the output of the RDA5807M to mono.
-- ----------------------------------------------------------------------------
procedure rda5807_set_mono()

-- ----------------------------------------------------------------------------
-- Set the output of the RDA5807M to stereo.
-- ----------------------------------------------------------------------------
procedure rda5807_set_stereo()

-- ----------------------------------------------------------------------------
-- Set De-emphasis of the RDA5807M to the given value. Value must be
-- RDA5807M_DEEMPHASIS_50_US or RDA5807M_DEEMPHASIS_75_US.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_deemphasis(byte in deemphasis_value) 

-- ----------------------------------------------------------------------------
-- Set the band of the RDA5807M. This will also set the global variables that
-- hold the high and low frequeny of the selected band.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_band(byte in band_selection)

-- ----------------------------------------------------------------------------
-- Set the channel spacing of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_channel_spacing(byte in channel_spacing)

-- ----------------------------------------------------------------------------
-- Set the frequency of the RDA5807M. The given frequency is given in kHz and 
-- must be in the range of the selectded band. 
-- ----------------------------------------------------------------------------
procedure rda5807m_set_frequency(dword in frequency)

-- ----------------------------------------------------------------------------
-- Get the frequency of the RDA5807M. The frequency is returned in kHz.
-- ----------------------------------------------------------------------------
function rda5807m_get_frequency() return dword

-- ----------------------------------------------------------------------------
-- Get the RSSI signal strength of the current selected channel.
-- Return value is between RDA5807M_RSSI_MIN and RDA5807M_RSSI_MAX
-- ----------------------------------------------------------------------------
function rda5807m_get_signal_strength() return byte

-- ----------------------------------------------------------------------------
-- Get the RDS data. The channel must have RDS.
-- ----------------------------------------------------------------------------
procedure rda5807m_get_rds_data(word out rdsa, word out rdsb,
                                word out rdsc, word out rdsd)

-- ----------------------------------------------------------------------------
-- Seek up to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_up()

-- ----------------------------------------------------------------------------
-- Seek down to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_down() 

-- ----------------------------------------------------------------------------
-- Stop seeking to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_stop() 

-- ----------------------------------------------------------------------------
-- Returns TRUE when a seek was completed.
-- ----------------------------------------------------------------------------
function rda5807m_seek_completed() return bit

-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel has RDS. RDS must be enabled.
-- ----------------------------------------------------------------------------
function rda5807m_channel_has_rds() return bit

-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is stereo.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_stereo() return bit 

-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is an FM station.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_fm() return bit 

-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is ready.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_ready() return bit 

-- ---------------------- Advanced procedures ----------------------------------

-- ----------------------------------------------------------------------------
-- Write a byte to the given register of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_write_register(byte in register, word in data) 

-- ----------------------------------------------------------------------------
-- Read a byte from the given register of the RDA5807M and return it.
-- ----------------------------------------------------------------------------
function rda5807m_read_register(byte in register) return word  


-- ----------------------------------------------------------------------------
-- ---------------------------- Implementation --------------------------------
-- ----------------------------------------------------------------------------

-- --------- Private constants, variables and function prototypes -------------

-- IIC read and IIC write address of the RDA5807M. The data sheet is not clear
-- (not complete!) on this. Apparently the device has two modes of operation, 
-- sequential access and random access. This access type depends on the chosen 
-- IIC address. Only the random access mode is used by this library.
-- const byte _RDA5807M_IIC_WR_ADDRESS = 0b0010_0000 -- Sequential access mode.
-- const byte _RDA5807M_IIC_RD_ADDRESS = 0b0010_0001
const byte _RDA5807M_IIC_WR_ADDRESS = 0b0010_0010    -- Random access mode.
const byte _RDA5807M_IIC_RD_ADDRESS = 0b0010_0011

-- Registers and register masks. Registers are read only or write only.

-- Register R0. Holds the chip ID but we do not use it.
const byte _RDA5807M_REG_R0         = 0x00

-- Register R2. Write only control register.
const byte _RDA5807M_REG_R2         = 0x02
const word _RDA5807M_MASK_R2_OUTPUT = 0x8000
const word _RDA5807M_MASK_R2_DMUTE  = 0x4000
const word _RDA5807M_MASK_R2_MONO   = 0x2000
const word _RDA5807M_MASK_R2_BASS   = 0x1000
const word _RDA5807M_MASK_R2_SEEKUP = 0x0200
const word _RDA5807M_MASK_R2_SEEK   = 0x0100
const word _RDA5807M_MASK_R2_RDS    = 0x0008
const word _RDA5807M_MASK_R2_NEW    = 0x0004
const word _RDA5807M_MASK_R2_RESET  = 0x0002
const word _RDA5807M_MASK_R2_ENABLE = 0x0001

-- Register R3. Write only control register.
const byte _RDA5807M_REG_R3                = 0x03
const word _RDA5807M_MASK_R3_SPACE         = 0x0003
const word _RDA5807M_MASK_R3_SPACE_25      = 0x0003
const word _RDA5807M_MASK_R3_SPACE_50      = 0x0002
const word _RDA5807M_MASK_R3_SPACE_100     = 0x0000
const word _RDA5807M_MASK_R3_SPACE_200     = 0x0001
const word _RDA5807M_MASK_R3_BAND          = 0x000C
const word _RDA5807M_MASK_R3_BAND_US_EUR   = 0x0000
const word _RDA5807M_MASK_R3_BAND_JAPAN    = 0x0004
const word _RDA5807M_MASK_R3_BAND_WORLD    = 0x0008
const word _RDA5807M_MASK_R3_BAND_EAST_EUR = 0x000C
const word _RDA5807M_MASK_R3_TUNE          = 0x0010
const word _RDA5807M_MASK_R3_TEST          = 0x0020
const word _RDA5807M_MASK_R3_CHANNEL       = 0xFFC0

-- Regiser R4. Write only control register.
const byte _RDA5807M_REG_R4           = 0x04
const word _RDA5807M_MASK_R4_DE50     = 0x0800
const word _RDA5807M_MASK_R4_FIFO_CLR = 0x0400
const word _RDA5807M_MASK_R4_SOFTMUTE = 0x0200
const word _RDA5807M_MASK_R4_AFC      = 0x0100

-- Register R5. Write only control register.
const byte _RDA5807M_REG_R5      = 0x05
const word _RDA5807M_MASK_R5_VOL = 0x000F

-- Register RA. Read only status register.
const byte _RDA5807M_REG_RA          = 0x0A 
const word _RDA5807M_REG_RA_RDS      = 0x8000
const word _RDA5807M_REG_RA_SEEK     = 0x4000
const word _RDA5807M_REG_RA_RDSBLOCK = 0x0800
const word _RDA5807M_REG_RA_STEREO   = 0x0400
const word _RDA5807M_REG_RA_CHANNEL  = 0x03FF

-- Register RB. Read only status register.
const byte _RDA5807M_REG_RB         = 0x0B
const word _RDA5807M_REG_RB_RSSI    = 0xFE00
const word _RDA5807M_REG_RB_FMTRUE  = 0x0100
const word _RDA5807M_REG_RB_FMREADY = 0x0080

-- RDS registers. Read only data register.
const byte _RDA5807M_REG_RDSA = 0x0C
const byte _RDA5807M_REG_RDSB = 0x0D
const byte _RDA5807M_REG_RDSC = 0x0E
const byte _RDA5807M_REG_RDSD = 0x0F

-- Local variables.
var byte  _rda5807m_spacing  -- Selected channel spacing in kHz.

-- We need to keep a mirror of all write only registers. 
var word  _rda5807m_mirror_r2
var word  _rda5807m_mirror_r3
var word  _rda5807m_mirror_r4
var word  _rda5807m_mirror_r5

-- ----------------------------------------------------------------------------
-- Intialize the RDA5807M. The device is initialized for Europe as follows:
-- -) Set the band to RDA5807M_BAND_US_EUROPE
-- -) Set the spacing to RDA5807M_SPACING_100_KHZ
-- -) Set the de-emphasis to RDA5807M_DEEMPHASIS_50_US
-- The device is reset and powered up.
-- ----------------------------------------------------------------------------
procedure rda5807m_init() is
   
   -- Set the mirror registers to the default as defined in the data sheet.
   _rda5807m_mirror_r5 = 0x888B -- INT_MODE, SEEKTH, LNA_PORT_SEL, VOLUME

   -- Reset module and enable the output.
   _rda5807m_mirror_r2 = _RDA5807M_MASK_R2_RESET | _RDA5807M_MASK_R2_ENABLE
   rda5807m_write_register(_RDA5807M_REG_R2,_rda5807m_mirror_r2)
   _rda5807m_mirror_r3 = word(0x013F << 6) -- Default value.
   _rda5807m_mirror_r4 = _RDA5807M_MASK_R4_DE50
   rda5807m_write_register(_RDA5807M_REG_R4, _rda5807m_mirror_r4) 
   _rda5807m_mirror_r5 = 0x888B -- INT_MODE, SEEKTH, LNA_PORT_SEL, VOLUME
   rda5807m_write_register(_RDA5807M_REG_R5,_rda5807m_mirror_r5)
   -- Set some tuner values for Europe.
   rda5807m_set_band(RDA5807M_BAND_US_EUROPE)
   rda5807m_set_channel_spacing(RDA5807M_SPACING_100_KHZ)
   rda5807m_set_deemphasis(RDA5807M_DEEMPHASIS_50_US)
   -- Remove reset.
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_RESET
   rda5807m_write_register(_RDA5807M_REG_R2,_rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Enable the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_power() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_ENABLE 
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Disable the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_power() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_ENABLE 
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Enable the output of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_output() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_OUTPUT 
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Disable the output of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_output() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_OUTPUT 
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Set the volme of the RDA5870M. Volume must be in range RDA5807M_VOLUME_MIN
-- to RDA5807M_VOLUME_MAX.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_volume(byte in volume) is
   
   if (volume <= RDA5807M_VOLUME_MAX) then 
      _rda5807m_mirror_r5 = (_rda5807m_mirror_r5 & !_RDA5807M_MASK_R5_VOL) |
                            volume 
      rda5807m_write_register(_RDA5807M_REG_R5, _rda5807m_mirror_r5)
   end if 

end procedure


-- ----------------------------------------------------------------------------
-- Mute the output off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_mute() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_DMUTE
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Unmute the output off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_unmute() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_DMUTE
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure


-- ----------------------------------------------------------------------------
-- Enable soft mute off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_soft_mute() is
   
   _rda5807m_mirror_r4 = _rda5807m_mirror_r4 | _RDA5807M_MASK_R4_SOFTMUTE
   rda5807m_write_register(_RDA5807M_REG_R4, _rda5807m_mirror_r4)
   
end procedure


-- ----------------------------------------------------------------------------
-- Disable soft mute off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_soft_mute() is
   
   _rda5807m_mirror_r4 = _rda5807m_mirror_r4 & !_RDA5807M_MASK_R4_SOFTMUTE
   rda5807m_write_register(_RDA5807M_REG_R4, _rda5807m_mirror_r4)
   
end procedure


-- ----------------------------------------------------------------------------
-- Enable the bass boost off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_bass_boost() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_BASS
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure


-- ----------------------------------------------------------------------------
-- Disable the bass boost off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_bass_boost() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_BASS
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure


-- ----------------------------------------------------------------------------
-- Enable the RDS of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_enable_rds() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_RDS
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure


-- ----------------------------------------------------------------------------
-- Disable the RDS off the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_disable_rds() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_RDS
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure


-- ----------------------------------------------------------------------------
-- Set the output of the RDA5807M to mono.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_output_mono() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_MONO
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Set the output of the RDA5807M to stereo.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_output_stereo() is
   
   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_MONO
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)

end procedure


-- ----------------------------------------------------------------------------
-- Set De-emphasis of the RDA5807M to the given value. Value must be
-- RDA5807M_DEEMPHASIS_50_US or RDA5807M_DEEMPHASIS_75_US.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_deemphasis(byte in deemphasis_value) is

   if (deemphasis_value == RDA5807M_DEEMPHASIS_50_US) then
      _rda5807m_mirror_r4 = _rda5807m_mirror_r4 | _RDA5807M_MASK_R4_DE50
      rda5807m_write_register(_RDA5807M_REG_R4, _rda5807m_mirror_r4)
   elsif (deemphasis_value == RDA5807M_DEEMPHASIS_75_US) then
      _rda5807m_mirror_r4 = _rda5807m_mirror_r4 & !_RDA5807M_MASK_R4_DE50
      rda5807m_write_register(_RDA5807M_REG_R4, _rda5807m_mirror_r4)
   end if
  
end procedure

-- ----------------------------------------------------------------------------
-- Set the band of the RDA5807M. This will also set the global variables that
-- hold the high and low frequeny of the selected band.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_band(byte in band_selection) is

   _rda5807m_mirror_r3 = _rda5807m_mirror_r3 & !_RDA5807M_MASK_R3_BAND 
   case band_selection of
      RDA5807M_BAND_US_EUROPE:
      block 
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_BAND_US_EUR
         rda5807m_band_frequency_low  = 87_000
         rda5807m_band_frequency_high  = 107_000
      end block 

      RDA5807M_BAND_JAPAN:
      block 
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_BAND_JAPAN
         rda5807m_band_frequency_low  = 76_000
         rda5807m_band_frequency_high  = 91_000
      end block 

      RDA5807M_BAND_WORLD_WIDE: 
      block 
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_BAND_WORLD
         rda5807m_band_frequency_low  = 76_000
         rda5807m_band_frequency_high  = 108_000
      end block 
      RDA5807M_BAND_EAST_EUROPE: 
      block 
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_BAND_EAST_EUR
         rda5807m_band_frequency_low  = 65_000
         rda5807m_band_frequency_high  = 76_000
      end block 
   end case 
   
   rda5807m_write_register(_RDA5807M_REG_R3, _rda5807m_mirror_r3)

end procedure


-- ----------------------------------------------------------------------------
-- Set the channel spacing of the RDA5807M.
-- ----------------------------------------------------------------------------
procedure rda5807m_set_channel_spacing(byte in channel_spacing) is

   _rda5807m_mirror_r3 = _rda5807m_mirror_r3 & !_RDA5807M_MASK_R3_SPACE 
   case channel_spacing of

      RDA5807M_SPACING_25_KHZ: 
      block
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_SPACE_25 
         _rda5807m_spacing = 25
      end block

      RDA5807M_SPACING_50_KHZ: 
      block
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_SPACE_50 
         _rda5807m_spacing = 50
      end block

      RDA5807M_SPACING_100_KHZ: 
      block
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_SPACE_100 
         _rda5807m_spacing = 100
      end block

      RDA5807M_SPACING_200_KHZ: 
      block
         _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | _RDA5807M_MASK_R3_SPACE_200
         _rda5807m_spacing = 200
      end block

   end case 

   rda5807m_write_register(_RDA5807M_REG_R3, _rda5807m_mirror_r3)

end procedure


-- ----------------------------------------------------------------------------
-- Set the frequency of the RDA5807M. The given frequency is given in kHz and 
-- must be in the range of the selectded band. 
-- ----------------------------------------------------------------------------
procedure rda5807m_set_frequency(dword in frequency) is

   var dword channel 

   if (frequency >= rda5807m_band_frequency_low ) & 
      (frequency <= rda5807m_band_frequency_high ) then
      channel = (frequency - rda5807m_band_frequency_low ) / dword(_rda5807m_spacing)
      ; Tune to the given channel.
      _rda5807m_mirror_r3 = _rda5807m_mirror_r3 & !_RDA5807M_MASK_R3_CHANNEL
      _rda5807m_mirror_r3 = _rda5807m_mirror_r3 | word(channel << 6) |
                            _RDA5807M_MASK_R3_TUNE
      rda5807m_write_register(_RDA5807M_REG_R3, _rda5807m_mirror_r3)
   end if 

end procedure


-- ----------------------------------------------------------------------------
-- Get the frequency of the RDA5807M. The frequency is returned in kHz.
-- ----------------------------------------------------------------------------
function rda5807m_get_frequency() return dword is

   var dword frequency
   var word channel

   channel = rda5807m_read_register(_RDA5807M_REG_RA) & _RDA5807M_REG_RA_CHANNEL 
   frequency = (dword(channel) * dword(_rda5807m_spacing)) + rda5807m_band_frequency_low 

   return frequency

end function


-- ----------------------------------------------------------------------------
-- Get the RSSI signal strength of the current selected channel.
-- Return value is between RDA5807M_RSSI_MIN and RDA5807M_RSSI_MAX
-- ----------------------------------------------------------------------------
function rda5807m_get_signal_strength() return byte is

   var word signal_strength

   signal_strength = rda5807m_read_register(_RDA5807M_REG_RB) & _RDA5807M_REG_RB_RSSI
   
   return byte(signal_strength >> 9)

end function



-- ----------------------------------------------------------------------------
-- Get the RDS data. The channel must have RDS.
-- ----------------------------------------------------------------------------
procedure rda5807m_get_rds_data(word out rdsa, word out rdsb,
                                word out rdsc, word out rdsd) is

   rdsa = rda5807m_read_register(_RDA5807M_REG_RDSA)
   rdsb = rda5807m_read_register(_RDA5807M_REG_RDSB)
   rdsc = rda5807m_read_register(_RDA5807M_REG_RDSC)
   rdsd = rda5807m_read_register(_RDA5807M_REG_RDSD)

end procedure


-- ----------------------------------------------------------------------------
-- Seek up to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_up() is

   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 | _RDA5807M_MASK_R2_SEEKUP |
                         _RDA5807M_MASK_R2_SEEK
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   -- Clear Seek. 
   rda5807m_seek_stop()
   
end procedure


-- ----------------------------------------------------------------------------
-- Seek down to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_down() is

   _rda5807m_mirror_r2 = (_rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_SEEKUP) |
                         _RDA5807M_MASK_R2_SEEK
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   -- Clear Seek. 
   rda5807m_seek_stop()
   
end procedure


-- ----------------------------------------------------------------------------
-- Stop seeking to the next channel.
-- ----------------------------------------------------------------------------
procedure rda5807m_seek_stop() is

   _rda5807m_mirror_r2 = _rda5807m_mirror_r2 & !_RDA5807M_MASK_R2_SEEK
   rda5807m_write_register(_RDA5807M_REG_R2, _rda5807m_mirror_r2)
   
end procedure

-- ----------------------------------------------------------------------------
-- Returns TRUE when a seek was completed.
-- ----------------------------------------------------------------------------
function rda5807m_seek_completed() return bit is

   var word data

   data = rda5807m_read_register(_RDA5807M_REG_RA) & _RDA5807M_REG_RA_SEEK
   return (data != 0)
   
end function


-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel has RDS. RDS must be enabled.
-- ----------------------------------------------------------------------------
function rda5807m_channel_has_rds() return bit is

   var word data

   data = rda5807m_read_register(_RDA5807M_REG_RA) & _RDA5807M_REG_RA_RDS
   return (data != 0)
   
end function


-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is stereo.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_stereo() return bit is

   var word data

   data = rda5807m_read_register(_RDA5807M_REG_RA) & _RDA5807M_REG_RA_STEREO
   return (data != 0)
   
end function


-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is an FM station.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_fm() return bit is

   var word data

   data = rda5807m_read_register(_RDA5807M_REG_RB) & _RDA5807M_REG_RB_FMTRUE
   return (data != 0)
   
end function


-- ----------------------------------------------------------------------------
-- Returns TRUE when the selected channel is ready.
-- ----------------------------------------------------------------------------
function rda5807m_channel_is_ready() return bit is

   var word data

   data = rda5807m_read_register(_RDA5807M_REG_RB) & _RDA5807M_REG_RB_FMREADY
   return (data != 0)
   
end function


-- ----------------------------- Advanced functions ---------------------------

-- ----------------------------------------------------------------------------
-- Write a byte to the given register of the DS3231.
-- ----------------------------------------------------------------------------
procedure rda5807m_write_register(byte in register, word in data) is

   var byte data_low  at data
   var byte data_high at data+1
   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_RDA5807M_IIC_WR_ADDRESS)
   _trash = i2c_transmit_byte(register)
   _trash = i2c_transmit_byte(data_high)
   _trash = i2c_transmit_byte(data_low)
  i2c_stop()

end procedure

-- ----------------------------------------------------------------------------
-- Read a byte from the given register of the DS3231.
-- ----------------------------------------------------------------------------
function rda5807m_read_register(byte in register) return word is

   var word data
   var byte data_low  at data
   var byte data_high at data+1
   var bit _trash 

   i2c_start()
   _trash = i2c_transmit_byte(_RDA5807M_IIC_WR_ADDRESS)
   _trash = i2c_transmit_byte(register)
   i2c_restart()
   _trash = i2c_transmit_byte(_RDA5807M_IIC_RD_ADDRESS)
   data_high = i2c_receive_byte(TRUE)  -- Ack.
   data_low  = i2c_receive_byte(FALSE) -- Nack.
   i2c_stop()
   return data

end function


-- Debugging routine.
if defined(RDA5807M_DEBUG) then
-- ----------------------------------------------------------------------------
-- Print the contents of various registers of the DS3231.
-- Note: Print routine and serial must be defined by the main program.
-- ----------------------------------------------------------------------------

procedure rda5807m_print_status() is

   var word data

   print_crlf(serial)
   print_string(serial, "RD5807M Register info\r\n")
   print_string(serial, "=====================\r\n")
   print_string(serial, "RD55807 Register RA: ")
   data = rda5807m_read_register(_RDA5807M_REG_RA)
   print_word_hex(serial, data)
   print_crlf(serial)
   print_string(serial, "RD55807 Register RB: ")
   data = rda5807m_read_register(_RDA5807M_REG_RB)
   print_word_hex(serial, data)
   print_crlf(serial)

end procedure

end if

