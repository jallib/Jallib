-- Title: DS1307 / I2C read write & bcd routines.
--
-- Author: Jean-Bernard, Copyright (c) 2001...2011, all rights reserved.
--
-- Adapted-by: Enzo SERAFINI,
--             Rob Hamerling  issue #164
--
-- Compiler: 2.4p
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: DS1307 / I2C read write & bcd routines.
--
-- Some DS1307 registers
-- Second   adress is 0x00 values 0-59
-- Minuts   adress is 0x01 values 0-59
-- Hour     adress is 0x02 values 0-12 or 0-24
-- Week day    adress is 0x03 values 1-7
-- Month day    adress is 0x04 values 01-28,29,30,31
-- Month    adress is 0x05 values 1-12
-- Year     adress is 0x06 values 0-99
-- for more details download the pec.sheet
-- http://pdfserv.maxim-ic.com/arpdf/DS1307.pdf
--

procedure ds1307_read( byte in ad , byte out d ) is
   var bit flag
   i2c_start()
   flag = i2c_transmit_byte( 0xD0 )       -- Chip ID in write mode
   flag = i2c_transmit_byte( ad )         -- put register address
   i2c_stop()
   i2c_start()
   flag = i2c_transmit_byte( 0xD1 )       -- Chip ID in read mode
   d = i2c_receive_byte( false )          -- get data
   i2c_stop()
   var byte loc
   loc = d
   loc = loc & 0xF0
   loc = loc / 16
   d = d & 0x0F
   loc = loc * 10 + d
   d = loc
end procedure

procedure ds1307_write( byte in ad , byte in d ) is
   var bit flag
   var byte loc
   loc = d
   loc = loc / 10
   loc = loc * 16
   d = d % 10
   loc = loc + d
   d = loc
   i2c_start()
   flag = i2c_transmit_byte( 0xD0 )       -- Chip ID in write mode
   flag = i2c_transmit_byte( ad )          -- put register address
   flag = i2c_transmit_byte( d )           -- put data in the register
   i2c_stop()
end procedure


-- rtc initialisation -----------------------------------------------
procedure ds1307_init() is

   var  byte  value                       -- intermediate hour value
   var  bit   clkhlt  at  value : 7       -- CH flag of seconds byte
   var  bit   mode12  at  value : 6       -- 12/24-hour mode flag in hours byte
   var  bit   modepm  at  value : 5       -- AM/PM flag in hours byte

   ds1307_read( 0x00 , value )            -- contents of seconds byte
   clkhlt = 0                             -- clear Clk Halt bit
   ds1307_write( 0x00 , value )           -- rewrite seconds byte

   ds1307_read( 0x02 , value )            -- contents of hours byte
   if (mode12 == 1) then                  -- currently in 12-hour mode
      value = value & 0b0001_1111         -- clear 12-hour and PM flags
      if (value == 0x12) then             -- just past midnight or midday
         value = 0x00                     -- 12 -> 0
      end if
   end if
   ds1307_write( 0x02 , value )           -- rewrite hours byte

   ds1307_write( 0x07 , 0b0000_0000 )     -- no square wave output

end procedure

