-- Title: bmp085 digital pressure sensor I2C routines.
--
-- Author: Urmas Joeleht, Copyright (c) 2014...2015, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4o
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: BMP085 digital pressure sensor I2C routines.
-- Functions and procedures:
-- get_2_bytes() - for internal use. Address as input, returns 2 bytes of data
-- bmp085_init() - reads calibration data from chip
-- get_uncompensated_temperature() - gets raw temp from chip
-- get_uncompensated_pressure() - gets raw pressure from chip
-- calculate_true_temperature() - calculates true temerature, using factory calibration data
-- calculate_true_pressure() - calculates true pressure, using factory calibration data
-- For end user:
-- bmp085_return_temperature_and_pressure(). Input - "mode".  Returns temperature (sword), pressure(dword) and success (bit)
--
-- Notes:
-- 3,3V device
--
-- Sources:
-- http://www.bosch-sensortec.com/content/language1/downloads/BST-BMP085-DS000-05.pdf
--
-- --------------------------------
-- From datasheet:
-- --------------------------------
-- Chip I2C address
const byte BMP085_I2C_WR_ADDR        = 0xEE  --write address
const byte BMP085_I2C_RD_ADDR        = 0xEF  --read address

-- Factory inserted calibration data register MSB aadresses (LSB is +1):
const byte BMP085_AC1_ADDR           = 0xAA
const byte BMP085_AC2_ADDR           = 0xAC
const byte BMP085_AC3_ADDR           = 0xAE
const byte BMP085_AC4_ADDR           = 0xB0
const byte BMP085_AC5_ADDR           = 0xB2
const byte BMP085_AC6_ADDR           = 0xB4
const byte BMP085_B1_ADDR            = 0xB6
const byte BMP085_B2_ADDR            = 0xB8
const byte BMP085_MB_ADDR            = 0xBA
const byte BMP085_MC_ADDR            = 0xBC
const byte BMP085_MD_ADDR            = 0xBE

const byte BMP085_CONTROL_REG        = 0xF4
const byte BMP085_TEMP_PRESS_MSB     = 0xF6
const byte BMP085_READ_TEMP_CMD      = 0x2E
const byte BMP085_READ_PRESSURE_CMD  = 0x34

-- Variables
-- For calculations
var word  bmp085_ac4, bmp085_ac5, bmp085_ac6
var sword bmp085_ac1, bmp085_ac2, bmp085_ac3, bmp085_b1, bmp085_b2, bmp085_mb, bmp085_mc, bmp085_md
var sdword bmp085_b5
-- Variable mode: --0 - Ultra low power; 1 - Standard; 2 - High resolution; 3 - Ultra high resolution
var byte bmp085_mode
var bit bmp085_ack -- for I2C communication control
var sword bmp085_true_temp
var dword bmp085_true_pressure

-- -----------------------------------------------------------------
-- get 16-bit data from chip
-- -----------------------------------------------------------------
function get_2_bytes(byte in address, bit out ack)return word is
   var word result
   var byte msb, lsb
   i2c_start()
   ack = i2c_transmit_byte(BMP085_I2C_WR_ADDR)
   ack = ack & i2c_transmit_byte(address) --registry address
   i2c_stop()
   i2c_start()
   ack = ack & i2c_transmit_byte(BMP085_I2C_RD_ADDR)
   msb = i2c_receive_byte(1)     --master bmp085_ack (will ask next byte also)
   lsb = i2c_receive_byte(0)     --master NACK (last byte)
   i2c_stop()
   result = (word(msb) << 8 ) + lsb   --put msb and lsb together to 16bit result
   return result
end function

-- -----------------------------------------------
-- Get uncompensated temperature data from chip
-- -----------------------------------------------
function get_uncompensated_temp(bit out ack) return word is
   var word result, msb, lsb
   i2c_start()
   ack = i2c_transmit_byte(BMP085_I2C_WR_ADDR)       -- Chip ID in write mode  EE
   ack = ack & i2c_transmit_byte(BMP085_CONTROL_REG)          -- put register address
   ack = ack & i2c_transmit_byte(BMP085_READ_TEMP_CMD)           -- put read temp command in the register
   i2c_stop()
   if defined (pin_eoc) then
      while pin_eoc == 0 loop
      end loop
   else
      delay_1ms(4)
      delay_10us(50)
   end if
   i2c_start()
   ack = ack & i2c_transmit_byte(BMP085_I2C_WR_ADDR)       -- Chip ID in write mode
   ack = ack & i2c_transmit_byte(BMP085_TEMP_PRESS_MSB)          -- put register address
   i2c_stop()
   i2c_start()
   ack = ack & i2c_transmit_byte(BMP085_I2C_RD_ADDR)
   msb = i2c_receive_byte(1)
   lsb = i2c_receive_byte(0)
   i2c_stop()
   result = (msb << 8) + lsb;
   return result
end function

-- -----------------------------------------------
--   Get uncompensated pressure data from chip
-- -----------------------------------------------
function get_uncompensated_pressure(byte in mode, bit out ack) return byte*3 is
   var byte*3 result
   var byte msb, lsb, xlsb                      --three bytes of data
      var byte conversation_time
   case mode of
      0: conversation_time = 4
      1: conversation_time = 7
      2: conversation_time = 13
      3: conversation_time = 25
   end case
   -- Starting I2C communication. Put "Read pressure" command with choosed mode to command register
   i2c_start()
   ack = i2c_transmit_byte(BMP085_I2C_WR_ADDR)
   ack = ack & i2c_transmit_byte(BMP085_CONTROL_REG)
   ack = ack & i2c_transmit_byte(BMP085_READ_PRESSURE_CMD + (mode << 6))
   i2c_stop()
   -- wait for chip pressure conversation
    if defined (pin_eoc) then
      while pin_eoc == 0 loop
      end loop
   else
      delay_1ms(conversation_time)
      delay_10us(50)
   end if
   -- read 3 bytes of data
   i2c_start()
   ack = ack & i2c_transmit_byte(BMP085_I2C_WR_ADDR)
   ack = ack & i2c_transmit_byte(BMP085_TEMP_PRESS_MSB)
   i2c_stop()
   i2c_start()
   ack = ack & i2c_transmit_byte(BMP085_I2C_RD_ADDR)
   msb = i2c_receive_byte(1)
   lsb = i2c_receive_byte(1)
   xlsb = i2c_receive_byte(0)
   i2c_stop()
   result = ((byte*3(msb) << 16) + (byte*3(lsb) << 8) + byte*3(xlsb)) >> (8 - mode)
   return result
end function

-- ----------------------------------------------------
-- Get factory calibration data from chip and put it in variables
-- ----------------------------------------------------
procedure bmp085_init(bit out ack) is
   bmp085_ac1 = sword(get_2_bytes(BMP085_AC1_ADDR, ack))
   bmp085_ac2 = sword(get_2_bytes(BMP085_AC2_ADDR, ack))
   bmp085_ac3 = sword(get_2_bytes(BMP085_AC3_ADDR, ack))
   bmp085_ac4 = get_2_bytes(BMP085_AC4_ADDR, ack)
   bmp085_ac5 = get_2_bytes(BMP085_AC5_ADDR, ack)
   bmp085_ac6 = get_2_bytes(BMP085_AC6_ADDR, ack)
   bmp085_b1 = sword(get_2_bytes(BMP085_B1_ADDR, ack))
   bmp085_b2 = sword(get_2_bytes(BMP085_B2_ADDR, ack))
   bmp085_mb = sword(get_2_bytes(BMP085_MB_ADDR, ack))
   bmp085_mc = sword(get_2_bytes(BMP085_MC_ADDR, ack))
   bmp085_md = sword(get_2_bytes(BMP085_MD_ADDR, ack))
end procedure

-- ----------------------------------------------------
-- Calculate true temperature
-- ----------------------------------------------------
function calculate_true_temperature(word in uncomp_t) return sword is
   var sdword x1, x2, temp
   var sword true_t
   x1 = (sdword(uncomp_t) - sdword(bmp085_ac6)) * bmp085_ac5 / 32768
   x2 = sdword(bmp085_mc) * 2048 / (x1 + sdword(bmp085_md))
   bmp085_b5 = x1 + x2
   true_t = sword((bmp085_b5 + 8) / 16)
   return sword(true_t)
end function

-- ----------------------------------------------------
-- Calculate true pressure
-- ----------------------------------------------------
function calculate_true_pressure(byte*3 in uncomp_p, byte in mode) return dword is
   var sdword x1, x2, x3, b3, b6
   var dword  b4, b7, true_p
   b6 = bmp085_b5 - 4000
   x1 = (bmp085_b2 *(b6 * b6 / 4096)) / 2048
   x2 = bmp085_ac2 * b6 / 2048
   x3 = x1 + x2
   b3 = (((sdword(bmp085_ac1) * 4 + x3) << mode) + 2) / 4
   x1 = bmp085_ac3 * b6 / 8192
   x2 = (bmp085_b1 * (b6 * b6 / 4096)) / 65536
   x3 = ((x1 + x2) + 2 ) / 4
   b4 = bmp085_ac4 * (dword(x3) + 32768)/32768
   b7 = dword((dword(uncomp_p) - b3)) * (50000 >> word(mode))
   if (b7 < 0x80000000) then
      true_p = (b7 * 2) / b4
   else
      true_p = (b7 / b4) * 2
   end if
   x1 = (sdword(true_p) / 256) * (sdword(true_p) / 256)
   x1 = (x1 * 3038) / 65536
   x2 = (-7357 * sdword(true_p)) / 65536
   true_p = true_p + (x1 + x2 + 3791) / 16
   return (true_p)
end function

-- ----------------------------------------------------
-- return temp, pressure and succes bit
-- ----------------------------------------------------
procedure bmp085_return_temperature_and_pressure(byte in mode, sword out temperature, dword out pressure, bit out success) is
   var bit ok
   var word uc_temp
   var byte*3 uc_press
   uc_temp = get_uncompensated_temp(ok)
   success = ok
   uc_press = get_uncompensated_pressure (mode, ok)
   success = success & ok
   temperature = calculate_true_temperature(uc_temp)
   pressure = calculate_true_pressure(uc_press, mode)
end procedure

-------------------------------------------------------------------------
-- Fast pressure measurement. Temperature is measured once in 128 times.
-- If constant cycle, once per second
-------------------------------------------------------------------------
var byte bmp085_temp_counter = 127
procedure bmp085_return_temperature_and_pressure_fast(byte in mode, sword out temperature, dword out pressure, bit out success) is
   var bit ok
   var word uc_temp
   var byte*3 uc_press
   if bmp085_temp_counter >= 127 then
      bmp085_temp_counter = 0
      uc_temp = get_uncompensated_temp(ok)
      temperature = calculate_true_temperature(uc_temp)
      success = ok
   else
      success = 1
      bmp085_temp_counter = bmp085_temp_counter + 1
   end if
   uc_press = get_uncompensated_pressure (mode, ok)
   success = success & ok
   pressure = calculate_true_pressure(uc_press, mode)
end procedure

