-- Title: Ethernet Header BETA
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: creates an ethernet header. contains destination/source
--              and next protocol type.
--
-- Sources:
-- http://www.iana.org/assignments/ethernet-numbers
--
-- Notes:
--

const ETHERNET_PROTOCOL_IP = 0x0800
const ETHERNET_PROTOCOL_ARP = 0x0806

const ETHERNET_PROTOCOL = 12
const ETHERNET_HEADER_SIZE = 14

var byte mac[6]

;types
const MAC_IPV4 = 0x0800
const MAC_ARP = 0x0806

;check if slip connection. should not use this file.
if NETWORK_LINK_LAYER == NETWORK_SLIP then
   _error "Do not include ethernet_mac for SLIP"
end if

;check if a mac address has been defined. if not give an error.
if !defined(network_local_mac) then
   _warn "Does your device have a MAC address?"
   _error "if no mac, you should not include this file"
end if

if !defined(NETWORK_DEVICE_HAS_MAC_FILTER) then
   const NETWORK_DEVICE_HAS_MAC_FILTER = FALSE
end if

----------------------------------------------------------------
-- create an ethernet header
-- option = 0 - use broadcast mac
-- option = 1 - use remote mac
----------------------------------------------------------------
const ETHERNET_BROADCAST_MAC = 0
const ETHERNET_REMOTE_MAC = 1
procedure ethernet_header_create(word in type, byte in option) is
   network_var_offset = 0

   -- set destination mac address (at offset 0)
   if NETWORK_LINK_LAYER == NETWORK_ETHERNET then
      if option == ETHERNET_REMOTE_MAC then
         network_data[0] = network_remote_mac[0]
         network_data[1] = network_remote_mac[1]
         network_data[2] = network_remote_mac[2]
         network_data[3] = network_remote_mac[3]
         network_data[4] = network_remote_mac[4]
         network_data[5] = network_remote_mac[5]
      else ;ETHERNET_BROADCAST_MAC
         network_data[0] = 0xFF
         network_data[1] = 0xFF
         network_data[2] = 0xFF
         network_data[3] = 0xFF
         network_data[4] = 0xFF
         network_data[5] = 0xFF
      end if

      -- set source mac address (at offset 6)
      network_data[6] = network_local_mac[0]
      network_data[7] = network_local_mac[1]
      network_data[8] = network_local_mac[2]
      network_data[9] = network_local_mac[3]
      network_data[10] = network_local_mac[4]
      network_data[11] = network_local_mac[5]

      -- set type field at offset 12-13
      var byte _type[2] at type
      network_data[12] = _type[1]
      network_data[13] = _type[0]

      -- set network array offset (next available byte for packet)
      network_var_offset = 14
   end if
end procedure

----------------------------------------------------------------
-- verify an ethernet header
----------------------------------------------------------------
function ethernet_verify_header() return bit is
   pragma inline -- this proc is only called once
   if NETWORK_DEVICE_HAS_MAC_FILTER == TRUE then
      -- some devices have an internal mac filter
      -- for our mac or broadcast mac
      -- ethernet header mac address

      -- set remote mac for the reply
      network_remote_mac[0] = network_data[6]
      network_remote_mac[1] = network_data[7]
      network_remote_mac[2] = network_data[8]
      network_remote_mac[3] = network_data[9]
      network_remote_mac[4] = network_data[10]
      network_remote_mac[5] = network_data[11]

      -- return true
      return 1
   
   else
      -- verify ethernet header mac address
      -- must be our mac or broadcast mac
      if (network_data[0] == network_local_mac[0] &
         network_data[1] == network_local_mac[1] &
         network_data[2] == network_local_mac[2] &
         network_data[3] == network_local_mac[3] &
         network_data[4] == network_local_mac[4] &
         network_data[5] == network_local_mac[5])
         |
         (network_data[0] == 0xFF &
         network_data[1] == 0xFF &
         network_data[2] == 0xFF &
         network_data[3] == 0xFF &
         network_data[4] == 0xFF &
         network_data[5] == 0xFF) then

         -- set remote mac for the reply
         network_remote_mac[0] = network_data[6]
         network_remote_mac[1] = network_data[7]
         network_remote_mac[2] = network_data[8]
         network_remote_mac[3] = network_data[9]
         network_remote_mac[4] = network_data[10]
         network_remote_mac[5] = network_data[11]
      
         return 1
      else
         return 0
      end if
   end if
end function

----------------------------------------------------------------
-- read an ethernet header and pass to next protocol
----------------------------------------------------------------
procedure ethernet_read_packet() is

   -- check mac address
   -- this check may not be needed tanks to "enc28j60 pattern match filter"
   if ethernet_verify_header() then
   
      -- go to next protocol
      if network_word[ETHERNET_PROTOCOL] == ETHERNET_PROTOCOL_IP then
         -- IP protocol
         network_var_offset = network_var_offset + ETHERNET_HEADER_SIZE
         ip_header_read_packet()
      elsif network_word[ETHERNET_PROTOCOL] == ETHERNET_PROTOCOL_ARP then
         -- ARP protocol
         network_var_offset = network_var_offset + ETHERNET_HEADER_SIZE
         if defined(arp_read_packet) then
            arp_read_packet()
         end if
      else
         -- unknown protocol
         network_var_offset = network_var_offset + ETHERNET_HEADER_SIZE

         -- print a debug message
         var byte sending_ping[] = "---------- unrecognized protocol type ----------"
         debug_string(DEBUG_2,sending_ping)
         debug_crlf(DEBUG_2)

         -- print all data after the 14 byte ehternet data
         var word count4 = ETHERNET_HEADER_SIZE
         for network_packet_size - ETHERNET_HEADER_SIZE using count4 loop
            debug_byte_hex(3, network_data[count4])
            debug_char(3," ")
         end loop
      end if
      
   else
      debug_crlf(DEBUG_2)
      const byte str1[] = "---------- ethernet packet was not for us ----------"
      debug_string(DEBUG_3, str1)
      debug_crlf(DEBUG_3)
   end if

end procedure


----------------------------------------------------------------
-- prints destination mac to serial port
----------------------------------------------------------------
procedure ethernet_print_mac() is
   -- print remote mac
   print_byte_hex(serial_data,network_remote_mac[0])
   serial_data = ":"
   print_byte_hex(serial_data,network_remote_mac[1])
   serial_data = ":"
   print_byte_hex(serial_data,network_remote_mac[2])
   serial_data = ":"
   print_byte_hex(serial_data,network_remote_mac[3])
   serial_data = ":"
   print_byte_hex(serial_data,network_remote_mac[4])
   serial_data = ":"
   print_byte_hex(serial_data,network_remote_mac[5])
end procedure
