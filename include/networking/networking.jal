-- Title: Networking main procedures BETA
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: recieves packets and forwards them to the next next protocol
--
-- Sources:
-- http://www.comptechdoc.org/independent/networking/protocol/protnet.html
--
-- notes:
--
-- Wireshark is awsome! http://www.wireshark.org/
--
-- Requirements for network adapter (ethernet device, wifi device, SLIP, etc.)
-- 1. Add aliases to network_globals.jal
--
-- RECEIVING PACKETS:
-- 1. User polls network_poll() procedure
-- 2. If a packet is recieved, it is passed to network_received_packet,
--    the packet size is checked, then sent to the next level/protocol.
-- 3. If it is Ethernet, it goes to ethernet_read_packet(), then
--    ip_header_read_packet(). If it is SLIP, it goes directly
--    to ip_header_read_packet()
-- 4. The packet is then sent to the next protocol's read_packet procedure.
-- 5. A callback procedure is run in the user program.
--
-- TRANSMITTING PACKETS:
-- 1. User calls a procedure from a protocol
-- 2. That protocol will call other protocols to create an Ethernet
--    header (if Ethernet), ip_header, and whatever is needed by the
--    top level protocol.
-- 3. The packet is sent onto the network.
--
-- TODO:
--

-- defined in constants_jallib.jal
;const NETWORK_SLIP = 0
;const NETWORK_ETHERNET = 1

-- error checking (temporary untill next jallib pack release)
if !NETWORK_ETHERNET == 1 then
   _error "Please download newest constants_jallib.jal"
end if

--------------------------------------------------------------------------------
-- setup the link layer drivers. aliases of network device variables & procedures
--------------------------------------------------------------------------------
if NETWORK_LINK_LAYER == NETWORK_SLIP then
   -- constant settings for slip networking
   const NETWORK_USE_MAC = FALSE -- FALSE for SLIP
   
   -- alias slip for networking
   alias network_rx_packet_available is slip_packet_available   -- return TRUE if a packet is avalable in slip_rx_buffer
   alias network_send_data is slip_send_data                    -- transmit buffer
   alias network_rx_buffer is slip_rx_buffer                    -- receive buffer
   alias network_max_packet_size is SLIP_MTU                    -- max size of one packet (= size of receive buffer)
   alias network_packet_queue_size is QUEUE01_SIZE              -- size of receive buffer
   alias network_end_packet is slip_end_packet                  -- end packet data/send the data
   alias network_get_packet_size is slip_packet_size_buffer     -- get the size of the next packet

   ;-- Setup an array. use large array lib
   ;const LARGE_ARRAY_3_SIZE = SLIP_MTU            -- choose number of array variables
   ;const LARGE_ARRAY_3_VARIABLE_SIZE = 1          -- choose size of variables (byte*1)
   ;include large_array_3                          -- include the array library
   ;alias network_data is large_array_3            -- rename/alias the array
   --
   var byte network_data[SLIP_MTU]
   
   --
   -- queue clear procedure for slip networking     -- clear the recieve buffer
   procedure network_clear_rx_queue() is
      queue01_clear()
      queue02_clear()
   end procedure
   
   -- procedure to send data out onto the network
   procedure network_send_packet(word in size) is
      -- send the network_data[] via SLIP
      var byte count1 = 0
      for size using count1 loop
         network_send_data(network_data[count1])
         debug_byte_hex(DEBUG_4,network_data[count1])
         debug_char(DEBUG_4," ")
      end loop
      --
      network_end_packet() -- end packet data/send the data
   end procedure
   
   -- procedure to get data out from the network
   procedure network_get_packet(word in size) is
      var byte count1 = 0
      for size using count1 loop
         network_data[count1] = network_rx_buffer
      end loop
   end procedure

elsif NETWORK_LINK_LAYER == NETWORK_ETHERNET then
   -- constant settings for ethernet networking
   const NETWORK_USE_MAC = TRUE -- TRUE for ethernet

   if NETWORK_LINK_DEVICE == NETWORK_ENC28J60 then
   
      -- constant settings for ENC28J60
      -- enc28j60 has an internal mac filter for incomming packets.
      const NETWORK_DEVICE_HAS_MAC_FILTER = TRUE
   
      -- prototypes for ENC28J60
      if ENC_USE_INTERRUPT_PIN == TRUE then                        -- return TRUE if a packet is avalable in slip_rx_buffer
         alias network_rx_packet_available is enc_int
      else
         alias network_rx_packet_available is enc_packet_available
      end if

      alias network_max_packet_size is ENC_ARRAY_SIZE               -- max size of one packet (= size of transmit/receive buffer)
      alias network_packet_queue_size is ENC_ARRAY_SIZE             -- size of receive buffer
      alias network_get_packet_size is enc_packet_size              -- get the size of the next packet
      alias network_clear_rx_queue is enc_clear_rx_buffer           -- clear one packet from the recieve buffer
      alias network_local_mac is enc_local_mac                      -- alias device mac address
      alias network_data is enc_array                            -- alias transmit array
      alias network_get_packet is enc_read_buffer                   -- procedure to get data out from the network
      
      -- procedure to send data out onto the network
      procedure network_send_packet(word in size) is
      
         if debug_lvl_4 == TRUE then
            var word step
            debug_crlf(4)
            for size using step loop
               debug_byte_hex(4,network_data[step])
               debug_data = " "
            end loop
            debug_crlf(4)
         end if
      
         enc_write_buffer(size)  -- writes data in network_data[] to tx buffer
         enc_end_packet(size)    -- end packet data/send the data
      end procedure

   else
      _error "Network device not supported!"
   end if
end if

--------------------------------------------------------------------------------
-- prototypes, see network_main.jal
--------------------------------------------------------------------------------
--
-- ethernet prototypes
procedure ethernet_read_packet()
--
if defined(NETWORK_USE_ARP) then
   if NETWORK_USE_ARP == TRUE then
      procedure arp_read_packet()
      if NETWORK_USE_ARP_CALLBACKS == TRUE then
         procedure arp_reply_callback()
         procedure arp_request_callback()
      end if
   end if
end if
--
-- IP header prototypes
procedure ip_header_read_packet()
--
-- ICMP prototypes
if defined(NETWORK_USE_ICMP) then
   if NETWORK_USE_ICMP == TRUE then
      procedure icmp_read_packet()
      if NETWORK_USE_ICMP_CALLBACKS == TRUE then
         procedure icmp_echo_reply_callback()
         procedure icmp_echo_callback()
      end if
   end if
end if
--
-- UDP prototypes
if defined(NETWORK_USE_UDP) then
   if NETWORK_USE_UDP == TRUE then
      procedure udp_read_packet()
      if NETWORK_USE_UDP_CALLBACKS == TRUE then
         procedure udp_receive_callback(byte in socket,word in udp_data_size)
      end if
   end if
end if
--
-- TCP prototypes
if defined(NETWORK_USE_TCP) then
   if NETWORK_USE_TCP == TRUE then
      procedure tcp_read_packet()
      if NETWORK_USE_TCP_CALLBACKS == TRUE then
         procedure tcp_receive_callback(byte in socket,word in tcp_data_size)
      end if
   end if
end if

--------------------------------------------------------------------------------
-- global variables
--------------------------------------------------------------------------------
-- make sure array does not get overwritten when in use
;var bit network_data_in_use = FALSE
--
-- variable offset for variables in the network_data
var word network_var_offset = 0
--
var word network_packet_size = 0
--
-- IP address of other end
var dword _network_remote_ip
var byte network_remote_ip[4] at _network_remote_ip
--
-- MAC address of other end
var byte network_remote_mac[6]
--
-- sets an offset if ethernet mac header is required.
-- ethernet mac is required by ethernet devices.
if NETWORK_USE_MAC == TRUE then
   const NETWORK_GLOBAL_OFFSET = 14 ;same as ethernet mac header size
else
   const NETWORK_GLOBAL_OFFSET = 0
end if

--------------------------------------------------------------------------------
-- NETWORKING PROCEDURES
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- include required libs
--------------------------------------------------------------------------------
if !defined(debug_data) then
   const bit DEBUG_MASTER_ENABLE = FALSE    -- enables debugging
   include debug
   -- IP_HEADER DEBUG LEVELS:
   -- lvl 2 - show text
   -- lvl 4 - show data
end if

include random

--------------------------------------------------------------------------------
-- setup a timer
--------------------------------------------------------------------------------
-- setup network timer aliases for the timer the user selected
if NETWORK_USE_TIMER == 1 then
   -- set special timer1 settings
   t1con_tmr1on = 1               -- enables timer 1
   -- set timer registers to timer1
   alias NETWORK_TMR      is TMR1             -- timer interval
   alias NETWORK_CS       is T1CON_TMR1CS     -- timer clock source bit
   alias NETWORK_IE       is PIE1_TMR1IE      -- interrupt enable
   alias NETWORK_IF       is PIR1_TMR1IF      -- interrupt overflow bit
   alias NETWORK_PS       is T1CON_T1CKPS     -- timer prescaler select bits
elsif NETWORK_USE_TIMER == 3 then
   t3con_tmr3on = 1               -- enables timer 3
   -- set timer registers to timer3
   alias NETWORK_TMR      is TMR3             -- timer interval
   alias NETWORK_CS       is T3CON_TMR3CS     -- timer clock source bit
   alias NETWORK_IE       is PIE2_TMR3IE      -- interrupt enable
   alias NETWORK_IF       is PIR2_TMR3IF      -- interrupt overflow bit
   alias NETWORK_PS       is T3CON_T3CKPS     -- timer prescaler select bits
end if
NETWORK_CS = 0       -- use internal clock
;NETWORK_IE = 1      -- enable interrupt
NETWORK_IF  = off    -- clear overflow to start timer

----------------------------------------------------------------
-- set remote ip address
----------------------------------------------------------------
procedure network_set_remote_ip(byte in ip_0,byte in ip_1,byte in ip_2,byte in ip_3) is
   network_remote_ip[0] = ip_0
   network_remote_ip[1] = ip_1
   network_remote_ip[2] = ip_2
   network_remote_ip[3] = ip_3
end procedure

;----------------------------------------------------------------
;-- switch byte order in a word
;----------------------------------------------------------------
;procedure network_switch_word_bytes(word in out data) is
;   var byte _data[2] at data
;   var byte temp
;   temp = _data[0]
;   _data[0] = _data[1]
;   _data[1] = temp
;end procedure
;
----------------------------------------------------------------
-- switch byte order in a dword
----------------------------------------------------------------
procedure network_switch_dword_bytes(dword in out data) is
   var byte _data[4] at data
   var byte temp
   temp = _data[0]
   _data[0] = _data[3]
   _data[3] = temp

   temp = _data[1]
   _data[1] = _data[2]
   _data[2] = temp
end procedure

;   procedure network_byte_x_6'put(byte*6 in variable, dword in value) is
;      var byte _value[4] at value
;      network_data[network_var_offset + variable] = _value[5]
;      network_data[network_var_offset + variable + 1] = _value[4]
;      network_data[network_var_offset + variable + 2] = _value[3]
;      network_data[network_var_offset + variable + 3] = _value[2]
;      network_data[network_var_offset + variable + 4] = _value[1]
;      network_data[network_var_offset + variable + 5] = _value[0]
;   end procedure
;   function network_byte_x_6'get(byte*6 in variable) return dword is
;      var dword value
;      var byte _value[4] at value
;      _value[5] = network_data[network_var_offset + variable]
;      _value[4] = network_data[network_var_offset + variable + 1]
;      _value[3] = network_data[network_var_offset + variable + 2]
;      _value[2] = network_data[network_var_offset + variable + 3]
;      _value[1] = network_data[network_var_offset + variable + 4]
;      _value[0] = network_data[network_var_offset + variable + 5]
;      return value
;   end function

--------------------------------------------------------------------------------
-- Computes a 16bit checksum from a byte array using every 2 bytes in the array.
-- Mostly used for IP header checksums.
--------------------------------------------------------------------------------
function network_checksum_16_byte_calc(word in start, word in size) return word is
   var word checksum
   alias count1 is size
   ;var word i = 0
   alias i is start
   var word word16
   var dword sum = 0
   var byte _sum[2] at sum

   -- make 16 bit words out of every two adjacent 8 bit words in the packet
   -- and add them up
   while (count1 > 1) loop
      sum = sum + word((word(network_data[i + 0]) << 8) + network_data[i + 1])
      i = i + 2
      count1 = count1 - 2

      if sum > 0xFFFF then
         sum = word(sum) + 1
      end if
   end loop

   -- also check odd numbered buffer
   if count1 == 1 then
      sum = sum + (word(network_data[i + 0]) << 8)
      if sum > 0xFFFF then
         sum = word(sum) + 1
      end if
   end if

   -- ones complement the result
   sum = word(!sum)

   -- set the out bytes
   checksum = word(sum)

   return checksum
end function

--------------------------------------------------------------------------------
-- Verify 16bit checksum from a byte array using every 2 bytes in the array.
-- Mostly used for IP header checksums.
--------------------------------------------------------------------------------
function network_checksum_16_byte_verify(word in start, word in size) return bit is
   var word data
   data = network_checksum_16_byte_calc(start,size)

   if (data == 0) | data == 0xFFFF then
      return 1
   else
      return 0
   end if
end function

----------------------------------------------------------------
-- functions to get/put variables into the network array
----------------------------------------------------------------
function network_byte'get(word in variable) return byte is
   ;pragma inline
   return network_data[network_var_offset + variable]
end function
procedure network_byte'put(word in variable,byte in value) is
   ;pragma inline
   network_data[network_var_offset + variable] = value
end procedure

procedure network_word'put(word in variable, word in value) is
   ;pragma inline
   var byte _value[2] at value
   network_data[network_var_offset + variable] = _value[1]
   network_data[network_var_offset + variable + 1] = _value[0]
end procedure
function network_word'get(word in variable) return word is
   ;pragma inline
   var word value
   var byte _value[2] at value
   _value[1] = network_data[network_var_offset + variable]
   _value[0] = network_data[network_var_offset + variable + 1]
   return value
end function

procedure network_dword'put(word in variable, dword in value) is
   var byte _value[4] at value
   network_data[network_var_offset + variable] = _value[3]
   network_data[network_var_offset + variable + 1] = _value[2]
   network_data[network_var_offset + variable + 2] = _value[1]
   network_data[network_var_offset + variable + 3] = _value[0]
end procedure
function network_dword'get(word in variable) return dword is
   var dword value
   var byte _value[4] at value
   _value[3] = network_data[network_var_offset + variable]
   _value[2] = network_data[network_var_offset + variable + 1]
   _value[1] = network_data[network_var_offset + variable + 2]
   _value[0] = network_data[network_var_offset + variable + 3]
   return value
end function

-- MOVED TO top of file with link layer aliases.
;   ----------------------------------------------------------------
;   -- set remote mac address
;   ----------------------------------------------------------------
;   procedure network_set_remote_mac(byte in mac_0,byte in mac_1,byte in mac_2,byte in mac_3,byte in mac_4,byte in mac_5) is
;      network_remote_mac[0] = mac_0
;      network_remote_mac[1] = mac_1
;      network_remote_mac[2] = mac_2
;      network_remote_mac[3] = mac_3
;      network_remote_mac[4] = mac_4
;      network_remote_mac[5] = mac_5
;   end procedure
;   ----------------------------------------------------------------
;   -- get the network array from the input buffer
;   ----------------------------------------------------------------
;   procedure network_get_packet(word in size) is
;      if NETWORK_LINK_LAYER_ETHERNET == FALSE then
;         var byte count1 = 0
;         for size using count1 loop
;            network_data[count1] = network_rx_buffer
;            ;debug_byte_hex(DEBUG_4,network_data[count1])
;            ;debug_char(DEBUG_4," ")
;         end loop
;      elsif NETWORK_LINK_LAYER_ETHERNET == TRUE then
;         enc_read_buffer(size)
;      else
;         pragma error -- Layer Not Supported
;      end if
;   end procedure

--------------------------------------------------------------------------------
-- Reads a recieve packet. Verifies IP Header data such as IP
-- address and checksum (with ip_header.jal), then sends the
-- rest of the data to the correct procedure depending on packet type.
--------------------------------------------------------------------------------
procedure network_received_packet() is

   -- get the size of the current packet
   network_packet_size = network_get_packet_size

   network_var_offset = 0

   -- print "-- PACKET RECEIVED: x bytes --"
   debug_crlf(DEBUG_2)
   const byte str1[] = "---------- PACKET RECEIVED: "
   debug_string(DEBUG_3, str1)
   debug_word_dec(DEBUG_3,network_packet_size)
   const byte str_size[] = " bytes ----------"
   debug_string(DEBUG_3, str_size)
   debug_crlf(DEBUG_2)

;   print_word_dec(serial_data,network_packet_size)
;   serial_data = " "
;   print_word_dec(serial_data,enc_packets_available())
;   serial_data = " "
;   print_byte_dec(serial_data,	enc_spi_read_command(ENC28J60_READ_CTRL_REG, EIR) )
;   print_crlf(serial_data)

   -- packet should not be 0 size in length, there could be an issue.
   -- note: enc28j60 gives packet size of 0 if rx buffer overflows, so
   -- this is needed at the moment. Maybe I need a check buffer status proc.
   if network_packet_size == 0 then
      if defined(network_clear_rx_queue) then
         network_clear_rx_queue() -- clear bad data in the queues
      end if
      return
   end if

   if network_packet_size > network_max_packet_size then
      -- your packet may have a problem, it is too large
      const byte str[] = "---------- ERROR: packet too large for buffer ----------"
      debug_string(debug_lvl_1, str)
      debug_crlf(debug_lvl_1)

      if defined(network_clear_rx_queue) then
         network_clear_rx_queue() -- clear bad data in the queues
      end if

      return -- ignore the packet
   end if

   network_get_packet(network_packet_size)

   if NETWORK_LINK_LAYER == NETWORK_ETHERNET then
      ethernet_read_packet()
   else
      ip_header_read_packet()
   end if

   --
   debug_crlf(DEBUG_3)

   ;network_data_in_use = FALSE
end procedure

----------------------------------------------------------------
-- poll to see if there are any packets waiting for us
----------------------------------------------------------------
procedure network_poll() is
   pragma inline
;   if network_rx_packet_available & !network_data_in_use then
   if network_rx_packet_available then
      network_received_packet() -- get the packet
   end if
end procedure





