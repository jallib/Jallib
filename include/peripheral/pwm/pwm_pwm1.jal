-- -------------------------------------------------------------------------------------
-- Title: Hardware PWM control, supports 10-bit PWM and 16-bit PWM for module PWM1.
-- Author: Stef Mientki, Copyright (C) 2002..2024, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling, Rob Jansen
-- Compiler: 2.5r8
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Performs PWM operations on the PWM1 module. This file is automatically 
--              included by pwm_hardware.jal when the target PIC and supports
--              10-bit and 16-bit PWM.
--
-- Notes: Modelled after the libraries for CCP modules. Deprecated functions removed.
--
-- -------------------------------------------------------------------------------------

if defined(PWM1TMR) then

   -- ======================== This code is for the 16-bit variant =======================
   var word  _pwm1dc_shadow = 0 -- 16 bit duty cycle


  -- -------------------------------------------------------------------------------------
   -- Purpose:   Set PWM on
   -- Arguments: none
   -- Notes:     - duty cycle is restored from shadow registers
   --            - pin_PWM1_direction should be set to output
   -- -------------------------------------------------------------------------------------
   procedure pwm1_on() is

      PWM1DC = _pwm1dc_shadow  
      PWM1PH = 0
      PWMLD_MPWM1LD = TRUE
      PWM1CON_PWM1EN  = TRUE    

   end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   PWM mode off
   -- Arguments: none
   -- -------------------------------------------------------------------------------------
   procedure pwm1_off() is

      PWM1CON_PWM1EN = FALSE   

   end procedure


   -- ---------------------------------------------------------------------------
   -- Set the prescaler value for Timer 1 for the 16-bit PWM1.
   -- The timer will be running. 
   -- ---------------------------------------------------------------------------
   procedure pwm1_max_resolution(byte in prescaler) is

      -- For PIC with 16-bit PWM. They have a separate timer register.
      PWM1CLKCON_CS = 0b00                            -- Clock source Fosc
      _pr1_shadow = 65535                             -- select lowest frequency
      PWM1PR = _pr1_shadow  
      _pwm_get_prescaler_value(prescaler, PWM1CLKCON_PS)   
 
    end procedure


   -- ---------------------------------------------------------------------------
   -- Purpose:   Set the frequency for the 16-bit module PWM1.
   -- Arguments: Input:  dword - PWM frequency 
   --            Output: none
   -- The minimum and maximum allowed PWM frequencies depend on the clock speed.
   -- Use procedures pwm1_set_dutycycle_percent() or pwm1_set_dutycycle_ratio()
   -- to set the desired duty cycle.
   -- ---------------------------------------------------------------------------
   procedure pwm1_set_frequency(dword in freq) is

      PWM1CLKCON_CS = 0b00                            -- Clock source Fosc 
      _pwm_determine_timer_and_prescale(freq, _pr1_shadow, PWM1CLKCON_PS)
      PWM1PR = _pr1_shadow     

   end procedure

   -- -------------------------------------------------------------------------------------
   -- Purpose:   Set duty cycle as a percentage, allowing max 100 PWM steps.
   --            The duty cycle will be set to the specified percentage of the maximum
   --            for the current PWM frequency and Fosc.
   -- Arguments: byte - dutycycle as a percentage (allowed range: 0..100)
   -- Calling this procedure will also activate PWM.
   -- Notes:     - The number of available PWM steps can be lower than 100 with
   --              (very) high PWM frequencies and low Fosc.
   --            - The steps may not all be equal. The lower the actual resolution
   --              the bigger the differences between steps may be.
   --            - pin_PWM1_direction should be set to output.
   -- -------------------------------------------------------------------------------------
   procedure pwm1_set_dutycycle_percent(byte in percent) is

      var dword calculation
      var word steps                                

      if (percent == 0) then      -- effectively PWM off (output low)
         steps = 0
      elsif (percent >= 100) then -- effectively PWM off (output high)
         steps = _pr1_shadow
      else      
         calculation = (dword(percent) * (dword(_pr1_shadow) + 1)) / 100
         steps = word(calculation) 
      end if
      _pwm1dc_shadow = steps
      pwm1_on()    

   end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   Set duty cycle in the range 0..65535 PWM steps.
   -- Arguments: word - dutycycle ration in range 0..65535
   -- Notes:     - The duty cycle will be set to the specified ratio of the maximum
   --              value for the current PWM frequency and Fosc.
   --            - The resolution is about 1 pro mille.
   --            - pin_PWM1_direction should be set to output.
   -- -------------------------------------------------------------------------------------
   procedure pwm1_set_dutycycle_ratio(word in ratio) is

      var dword calculation
      var word steps                            

      if (ratio == 0) then        -- effectively PWM off (output low)
         steps = 0
      elsif (ratio == 65535) then -- effectively PWM off (output high)
         steps = ratio
      else                 
         calculation = (dword(ratio) * (dword(_pr1_shadow) + 1)) / 65536
         steps = word(calculation)
      end if
      _pwm1dc_shadow = steps
      pwm1_on()    

   end procedure


   -- ----------------------------------------------------------------------------
   -- Purpose:   Obtain actual number of 16-bit PWM1 steps.
   -- Arguments: (none)
   -- Returns:   word = actual number of 16-bit PWM1 steps.
   -- ---------------------------------------------------------------------------
   function pwm1_get_resolution() return word  is

      return _pr1_shadow

   end function

else

   -- ======================== This code is for the 10-bit variant =======================

   var byte  _pwm1dch_shadow = 0                      -- 8 MSbits of duty cycle
   var byte  _pwm1dcl_shadow = 0                      -- 2 LSbits (left aligned)


   -- -------------------------------------------------------------------------------------
   -- Purpose:   Set PWM on
   -- Arguments: none
   -- Notes:     - duty cycle is restored from shadow registers
   --            - pin_PWM1_direction should be set to output
   -- -------------------------------------------------------------------------------------
   procedure pwm1_on() is

      PWM1DCH         = _pwm1dch_shadow               -- restore duty cycle
      PWM1DCL         = _pwm1dcl_shadow               -- restore duty cycle
      PWM1CON_PWM1OE  = TRUE                          -- activate PWM1 pin
      PWM1CON_PWM1EN  = TRUE                          -- activate PWM module

   end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   PWM mode off
   -- Arguments: none
   -- -------------------------------------------------------------------------------------
      procedure pwm1_off() is

      PWM1CON_PWM1EN = FALSE                          -- disable PWM module

      end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   Specify the duty cycle by number of PWM steps.
   --            The duty cycle is setting is determined by a 10-bits parameter,
   --            allowing a resolution of 1023 steps.
   --            The 'steps' argument is a (max) 10-bits absolute value for the duty cycle:
   --            * steps<1:0> are the 2 LSbits
   --            * steps<9:2> are the 8 MSbits
   -- Arguments: word - steps cycle (allowed range 0..1023)
   -- Notes:     - This is a private procedure, not intended for general use.
   --              The caller is responsible to specify an acceptable value
   --              w.r.t. to the chosen PWM frequency.
   -- -------------------------------------------------------------------------------------
   procedure _pwm1_set_dutycycle(word in steps) is

      if (steps > 1023) then                          -- exceeding upper limit
         steps = 1023                                 -- set to maximum
      end if
      _pwm1dch_shadow = byte(steps >> 2)              -- 8 MSbits
      _pwm1dcl_shadow = byte(steps) << 6              -- 2 LSbits left aligned
      pwm1_on()                                       -- activate PWM

   end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   Set duty cycle as a percentage, allowing max 100 PWM steps.
   --            The duty cycle will be set to the specified percentage of the maximum
   --            for the current PWM frequency and Fosc.
   -- Arguments: byte - dutycycle as a percentage (allowed range: 0..100)
   -- Notes:     - The number of available PWM steps can be lower than 100 with
   --              (very) high PWM frequencies and low Fosc.
   --            - The steps may not all be equal. The lower the actual resolution
   --              the bigger the differences between steps may be.
   --            - pin_PWM1_direction should be set to output!
   -- -------------------------------------------------------------------------------------
   procedure pwm1_set_dutycycle_percent(byte in percent) is

      var word steps     
                                    --
      if (percent == 0) then                          -- effectively PWM off (output low)
         steps = 0
      elsif (percent >= 100) then                     -- effectively PWM off (output high)
         steps = _pr2_shadow_plus1 - 1
      else 
         steps = word(percent) * (_pr2_shadow_plus1 / 4) / 25 -- (factor PR2/100)
      end if
      _pwm1_set_dutycycle(steps << 2)

   end procedure


   -- -------------------------------------------------------------------------------------
   -- Purpose:   Set duty cycle in the range 0..1023 PWM steps.
   -- Arguments: word - dutycycle ration in range 0..1023
   -- Notes:     - The duty cycle will be set to the specified ratio of the maximum
   --              value for the current PWM frequency and Fosc.
   --            - The resolution is about 1 pro mille
   --            - The number of available PWM steps can be lower than 1023 with
   --              high PWM frequencies or low Fosc values.
   --            - pin_PWM1_direction should be set to output!
   -- -------------------------------------------------------------------------------------
   procedure pwm1_set_dutycycle_ratio(word in ratio) is

      var  word  steps                                -- intermediate value of PR2+1

      if (ratio == 0) then                            -- effectively PWM off (output low)
         steps = 0
      elsif (ratio > 1023) then                       -- effectively PWM off (output high)
         steps = _pr2_shadow_plus1 - 1
      else                                            -- between min and max
         steps = word(dword(ratio) * _pr2_shadow_plus1 / 256) -- (factor PR2/1024)
      end if
      _pwm1_set_dutycycle(steps)

   end procedure
   
end if


