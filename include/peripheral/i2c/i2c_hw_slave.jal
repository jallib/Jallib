-- Title: i2c_hardware slave procedures
-- Author: Sebastien Lelong, Copyright (c) 2008..2019, all rights reserved.
-- Adapted-by: Joep Suijs, Albert Faber, Rob Hamerling, Rob Jansen
-- Compiler: >=2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Common and useful functions and procedure to implement an I2C slave
--
-- Notes: Modifications by Rob Hamerling (may 2017)
--       - Clock stretching - when control-bit present - enabled for all types of core.
--
-- Aliases to support other PICs.
if (defined(PIE3_SSP1IE) == TRUE) then             -- PIE3/PIR3
   alias PIR1_SSPIF is PIR3_SSP1IF
   alias PIE1_SSPIE is PIE3_SSP1IE
end if

var byte tmpstat  ; this contains the last sspstat value, on which the user functions are
                  ; called. i2c_hw_slave_on_error() could use this to know what happend

-- setup an i2c slave, with low address (not high addresses coded with 10-bits)
-- The passed address must be 8-bits long: it's a 7-bits address + the 8th R/W bit
--
-- A global "i2c_enable_start_stop_interrupts" constant can be defined to so
-- interrupts are generated on Start/Stop signals.
--
-- /!\ careful: calling this procedure will enable interrupts (global, peripherals and i2c)
procedure i2c_hw_slave_init(byte in height_bits_icaddress) is
   -- set to slave with 7bit addressing.
   SSPCON1 = 0b_0011_0110

   -- if this constant is defined and true,  enable start/stop interrupts.
   if defined(i2c_enable_start_stop_interrupts) == true then
       if i2c_enable_start_stop_interrupts == true then
           SSPCON1 = SSPCON1 | 0b_0000_1000   -- enable start/stop interrupts
       end if
   end if


    -- I2C slave hardware
    -- last (8th) bit indicates whether its a read or write.
    -- I think it can be either 0 or 1, PIC does the job
    SSPADD = height_bits_icaddress


    -- init SSPSTAT
    SSPSTAT_BF = false
    SSPCON1_WCOL = false
    SSPCON1_SSPOV = false
    PIR1_SSPIF = false
    -- enable interrupts
    PIE1_SSPIE = true
    INTCON_GIE = true
    INTCON_PEIE = true

   -- Required to enable clock stretching, currently works OK for
   -- PIC18f devices, however, likely required for 16f PICs as
   -- well, but requires an update of the statemachine, which I
   -- can not test at the moment
--   if ( target_cpu == PIC_16 ) then        -- enable regardless core
      if defined( SSPCON2_SEN ) == true then
         SSPCON2_SEN = 1
--      end if
    end if

end procedure


-- read a byte from i2c buffer and returns it
function i2c_hw_slave_read_i2c() return byte is
    var byte tmpbuf
    tmpbuf = SSPBUF
    return tmpbuf
end function


-- write a byte to i2c bus
procedure i2c_hw_slave_write_i2c(byte in what) is
    -- wait 'til buffer is empty
    while SSPSTAT_BF loop end loop
    var bit dosend = true
    while dosend
    loop
        SSPCON1_WCOL = false
        -- try to write into buffer, checking collision
        SSPBUF = what
        if ! SSPCON1_WCOL
        then
            -- ok, done
            dosend = false
        end if
        -- else continue trying
    end loop
    SSPCON1_CKP = 1
end procedure


