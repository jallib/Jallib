-- -----------------------------------------------------------------------------
-- Title: USB driver library
-- Author: Albert Faber, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Matthew Schinkel, Rob Jansen
-- Compiler: 2.5r5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: Routines for controlling the USB serial interface engine sending
--              which will ensure the highest possible accuracy.
-- --
--
-- Sources: http://www.usb.org for USB specifications
--
-- Notes:
--

include memory_pointer1
-- --------------------------------------------------------------------------------------
-- Internal memory copy procedure
-- This function copies the content from a source array towards the specified
-- destination memory location. The function copies num_bytes bytes
-- --------------------------------------------------------------------------------------
procedure _usb_copy_array_to_ram(word in dst, byte in data[], byte in num_bytes ) is
   pragma inline
   var byte index
   mem_pointer1_address = dst
   
   for num_bytes using index loop
      mem_pointer1 = data[index]
   end loop
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure sends the content of the USB delivery buffer in the USB SIE
-- If the MCU does not own the buffer then nothing will be sent. 
-- Note that this is all data for endpoint0.
-- --------------------------------------------------------------------------------------
procedure usb_send_data_chunk() is
   
   var volatile bit uown_bit at usb_bd0in_stat : USB_BDSTATUS_UOWN
   var volatile bit dts_bit  at usb_bd0in_stat : USB_BDSTATUS_DTS
   
   if ( uown_bit ) then
      -- SIE owns the buffer.
      if USB_DEBUG > 0  then
         print_string(serial_hw_data," !do not own it! ")
      end if
   else
      -- MCU owns the buffer.
      var byte byte_cnt
      
      if ( usb_delivery_bytes_to_send > usb_delivery_bytes_max_send ) then
         if USB_DEBUG > 0  then
            
            serial_hw_write( "*" )
            print_byte_hex(serial_hw_data,  usb_delivery_bytes_max_send )
         end if
         -- We cannot send more than allowed in one package (given by Host).
         usb_delivery_bytes_to_send = usb_delivery_bytes_max_send
      end if
      
      -- Calculate remaining bytes to send.
      byte_cnt = usb_delivery_bytes_to_send - usb_delivery_bytes_sent
      
          -- We cannot send more than the size of the delivery buffer.
   if ( byte_cnt > usb_delivery_buffer_size ) then
         byte_cnt = usb_delivery_buffer_size
      end if
           
      if USB_DEBUG > 0  then
         var byte idx 
         -- Write the total number of bytes that we want to send.       
         print_crlf(serial_hw_data)
         print_byte_hex(serial_hw_data,usb_delivery_bytes_max_send)
         serial_hw_write("~")
         -- Write the total number of bytes allowed in one transmission.
         print_byte_hex(serial_hw_data,byte_cnt)
         serial_hw_write(">")
         -- Write the data for one transmission.
         for byte_cnt using idx loop
            var byte w_val = usb_delivery_buffer[idx + usb_delivery_bytes_sent]
            print_byte_hex(serial_hw_data,w_val)
         end loop
      end if
      
      -- Store the address of the - remaining - data and the number of bytes to be sent.
      -- RJ: Before calling this procedure the variable 'usb_delivery_buffer_size'
      --     is set in '_handle_standard_request()' to USB_EP0_IN_SIZE which is 8 bytes
      --     wide while for the actual transmission the buffer 'usb_delivery_buffer' 
      --     is used which is much bigger so more data could be transmitted in one go. 
      --     In full speed 64 bytes can be transmitted in one go which is now not used.  
      usb_bd0in_addr = USB_IN_DELIVERY_BUFFER_LOC + usb_delivery_bytes_sent
      usb_bd0in_cnt = byte_cnt
      
         -- Toggle DTS, set UOWN and DTSEN bit.
      if dts_bit then
         if USB_DEBUG > 0  then
            print_byte_hex(serial_hw_data,  0b_1000_1000 )
         end if	
         usb_bd0in_stat = 0b_0000_1000 -- Clear DTS, set DTSEN,
      else
         if USB_DEBUG > 0  then
            print_byte_hex(serial_hw_data,0b_1100_1000)
         end if
         usb_bd0in_stat = 0b_0100_1000 -- Set DTS and DTSEN
      end if
      -- RJ: According to the datasheet the UOWN bit must not be set at the same time
      --     the other bits in the bd status register are set.	SIE now owns the buffer.
      uown_bit = TRUE 
      
      usb_delivery_bytes_sent = usb_delivery_bytes_sent + byte_cnt
      
      if (usb_delivery_bytes_sent == usb_delivery_bytes_to_send)  then
         -- usb_control_mode = USB_CM_CTRL_READ_AWAITING_STATUS -- we're done with data stage
   
         -- RJ: The above statment was removed by the initial author. The trick here is that
         -- this procedure is continuously called and when all data has been sent it will
         -- continue sending zero data packets which equals sending an acknowledge.
         -- This seems to work OK and this means that the above mentioned state is
         -- never reached (also see usb_drv.jal).         
         if USB_DEBUG > 0  then
            serial_hw_write( "@" )
         end if
      end if
   end if
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure sends an empty USB packet via endpoint0, normally not called by the end user
-- --------------------------------------------------------------------------------------
procedure usb_send_empty_data_pkt() is
   
   var bit volatile dts_bit at usb_bd0in_stat:USB_BDSTATUS_DTS

   usb_delivery_buffer_size = USB_EP0_IN_SIZE
   usb_delivery_bytes_sent = 0
   usb_delivery_bytes_to_send = 0
   usb_delivery_bytes_max_send = 0   
   -- clear DTS in order to toggle it
   dts_bit = low  
   usb_send_data_chunk()
   
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure sends an USB acknowledge packet, normally not called by the end user
-- --------------------------------------------------------------------------------------
procedure usb_send_status_ack() is
   usb_send_empty_data_pkt()
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure will send one byted via endpoint0, with the contend specified by the 
-- data input parameter, normally not called by the end user
-- --------------------------------------------------------------------------------------
procedure usb_send_one_byte(byte in data) is

   var bit volatile dts_bit at usb_bd0in_stat:USB_BDSTATUS_DTS

   usb_delivery_buffer[0] = data
   usb_delivery_buffer_size = USB_EP0_IN_SIZE
   usb_delivery_bytes_sent = 0
   usb_delivery_bytes_to_send = 1
   usb_delivery_bytes_max_send = 1 
   -- clear DTS in order to toggle it
   dts_bit = low
   usb_send_data_chunk()
   
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure will send the content of an array to the USB end point. The endpoint
-- input parameter contains the the enpoint number, data[] is the content to be send,
-- byte_cnt the number of bytes to be send, and is_new_sequence determines if the data
-- tranmission is starting with USB packet o (if set to true), otherwise the USB packet
-- is toggled before transmission.
-- Note: This function is not yet used by the USB driver.
-- --------------------------------------------------------------------------------------
procedure usb_send_data(byte in endpoint, byte in data[], byte in byte_cnt, bit in is_new_sequence ) is
   
   var byte idx, index
   
   if USB_DEBUG > 0 then
      print_crlf(serial_hw_data)
      serial_hw_write("~")
      print_byte_hex(serial_hw_data,  endpoint )
      serial_hw_write(">")
   end if
   
   if USB_DEBUG > 0 then
      serial_hw_write("~")
   end if
   
   case endpoint of
      0:
      block
         _usb_copy_array_to_ram( USB_EP0_IN_ADDR, data, byte_cnt )
         usb_bd0in_addr = USB_EP0_IN_ADDR
         var volatile bit dts_bit at usb_bd0in_stat : USB_BDSTATUS_DTS
         
         if is_new_sequence then
            dts_bit = low
         end if
         
         if USB_DEBUG > 0  then
            print_crlf(serial_hw_data)
            serial_hw_write("i")
            print_byte_hex(serial_hw_data,  usb_bd0in_stat )
         end if
         
         if dts_bit then
            if USB_DEBUG > 0  then
               print_byte_hex(serial_hw_data,  0b_1000_1000)	
            end if	
            usb_bd0in_stat = 0b_1000_1000
         else
            if USB_DEBUG > 0  then
               print_byte_hex(serial_hw_data,  0b_1100_1000)	
            end if	
            usb_bd0in_stat = 0b_1100_1000
         end if		
      end block
      
      1:
      block
         if USB_EP1 then
            _usb_copy_array_to_ram( USB_EP1_IN_ADDR, data, byte_cnt )
            usb_bd1in_addr = USB_EP1_IN_ADDR
            usb_bd1in_cnt = byte_cnt
            
            var volatile bit dts_bit at usb_bd1in_stat : USB_BDSTATUS_DTS
            
            if is_new_sequence then
               dts_bit = low
            end if
            if ( dts_bit  ) then
               usb_bd1in_stat = 0b_1000_1000
            else
               usb_bd1in_stat = 0b_1100_1000
            end if		
         end if
      end block
      
      2:
      block
         if USB_EP2 then
            _usb_copy_array_to_ram( USB_EP2_IN_ADDR, data, byte_cnt )
            usb_bd2in_addr = USB_EP2_IN_ADDR           
            var volatile bit dts_bit at usb_bd2in_stat : USB_BDSTATUS_DTS
            
            if is_new_sequence then
               dts_bit = low
            end if
            if dts_bit then
               usb_bd2in_stat = 0b_1000_1000
            else
               usb_bd2in_stat = 0b_1100_1000
            end if		
         end if
      end block		
      
      3:
      block
         if USB_EP3 then
            _usb_copy_array_to_ram( USB_EP3_IN_ADDR, data, byte_cnt )
            usb_bd3in_addr = USB_EP3_IN_ADDR
            
            var volatile bit dts_bit at usb_bd3in_stat : USB_BDSTATUS_DTS
            
            if is_new_sequence then
               dts_bit = low
            end if
            if ( dts_bit  ) then
               usb_bd3in_stat = 0b_1000_1000
            else
               usb_bd3in_stat = 0b_1100_1000
            end if		
         end if
      end block

      otherwise
      block		
         if USB_DEBUG > 0  then
            print_crlf(serial_hw_data)
            const byte str[] = " ENDPOINT NOT SUPPORTED YET! "
            print_string( serial_hw_data,str);
         end if	
      end block

   end case
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure will setup and initalize the USB endpoints,
-- normally not called by the end user
-- Endpoint0 is mandatory and was already configured by USB reset. We only configure 
-- endpoint 1-3 here.
-- --------------------------------------------------------------------------------------
procedure usb_configure_endpoints() is
   if USB_DEBUG > 0  then
      print_string( serial_hw_data," Config eps ")
   end if	
   
   if USB_EP1 then
      EP1HSHK = high -- EP handshaking on
      
      if USB_EP1_OUT_SIZE > 0 then
         EP1OUTEN = high -- EP OUT enabled
      else
         EP1OUTEN = low -- EP OUT disabled
      end if
      
      if USB_EP1_IN_SIZE > 0 then
         EP1INEN = high -- EP IN enabled
      else
         EP1INEN = low -- EP IN disabled
      end if
      
      EP1CONDIS = high -- control transfers off
      
      -- for IN
      if USB_EP1_IN_SIZE > 0 then
         -- set DTS bit, turn on data togle sync TOGGLE
         usb_bd1in_stat  = 0b01000000
      end if
      
      -- for OUT
      if USB_EP1_OUT_SIZE > 0 then
         usb_bd1out_cnt  = USB_EP1_OUT_SIZE;
         usb_bd1out_addr = USB_EP1_OUT_ADDR;
         -- set UOWN bit, SIE owns the buffer
         usb_bd1out_stat = 0b10000000
      end if
   end if
   
   if USB_EP2 then
      EP2HSHK = high -- EP handshaking on
      
      if USB_EP2_OUT_SIZE > 0 then
         EP2OUTEN = high -- EP OUT enabled
      else
         EP2OUTEN = low -- EP OUT disabled
      end if
      
      if USB_EP2_IN_SIZE > 0 then
         EP2INEN = high -- EP IN enabled
      else
         EP2INEN = low -- EP IN disabled
      end if
      
      EP2CONDIS = high -- control transfers off
      
      -- for IN
      if USB_EP2_IN_SIZE > 0 then
         -- set DTS bit, turn on data togle sync TOGGLE
         usb_bd2in_stat  = 0b01000000
      end if
      
      -- for OUT
      if USB_EP2_OUT_SIZE > 0 then
         usb_bd2out_cnt  = USB_EP2_OUT_SIZE;
         usb_bd2out_addr = USB_EP2_OUT_ADDR;
         -- set UOWN bit, SIE owns the buffer
         usb_bd2out_stat = 0b10000000
      end if
   end if

   if USB_EP3 then
      EP3HSHK = high -- EP handshaking on
      
      if USB_EP3_OUT_SIZE > 0 then
         EP3OUTEN = high -- EP OUT enabled
      else
         EP3OUTEN = low -- EP OUT disabled
      end if
      
      if USB_EP3_IN_SIZE > 0 then
         EP3INEN = high -- EP IN enabled
      else
         EP3INEN = low -- EP IN disabled
      end if
      
      EP3CONDIS = high -- control transfers off
      
      -- for IN
      if USB_EP3_IN_SIZE > 0 then
         -- set DTS bit, turn on data togle sync TOGGLE
         usb_bd3in_stat  = 0b01000000
      end if
      
      -- for OUT
      if USB_EP3_OUT_SIZE > 0 then
         usb_bd3out_cnt  = USB_EP3_OUT_SIZE;
         usb_bd3out_addr = USB_EP3_OUT_ADDR;
         -- set UOWN bit, SIE owns the buffer
         usb_bd3out_stat = 0b10000000
      end if
   end if
end procedure


-- Set BSTALL bit and UOWN bit (SIE will own the buffer). 
procedure usb_stall_ep0() is

   var volatile bit uown_bit at usb_bd0out_stat : USB_BDSTATUS_UOWN
   
   if USB_DEBUG > 0  then
      print_crlf(serial_hw_data)
      serial_hw_write("o")
      print_byte_hex(serial_hw_data,  usb_bd0out_stat )
      print_byte_hex(serial_hw_data,  usb_bd0out_stat | 0b_1000_0100)	
   end if
   -- RJ: According to the datasheet the UOWN bit must not be set at the same time
   --     the other bits in the bd status register.
   usb_bd0out_stat = usb_bd0out_stat | 0b_0000_0100 -- Set BSTALL
   uown_bit = TRUE -- SIE owns the buffer.
end procedure

-- Handle an endpoint0 out request (data from Host to MCU).
procedure usb_prime_ep0_out() is

   var volatile bit uown_bit at usb_bd0out_stat : USB_BDSTATUS_UOWN
   var byte new_value

   usb_bd0out_cnt = USB_EP0_OUT_SIZE
   usb_bd0out_addr = USB_EP0_OUT_ADDR
   
   -- AF CHECK THIS STUFF TODO
   if ( usb_control_mode == USB_CM_CTRL_READ_DATA_STAGE ) then
      if USB_DEBUG > 0  then
         print_crlf(serial_hw_data)
         serial_hw_write("i")
         print_byte_hex(serial_hw_data,  usb_bd0in_stat )
         print_string(serial_hw_data,"-->")
        print_byte_hex(serial_hw_data, 0)	
      end if
      -- RJ: Set DTS to data packet 0 and enable data toggle
      --     synchronisation. Why enable STALL?
      new_value = 0b_0000_1100 
      usb_bd0in_stat = 0x00 -- RJ: Why clear the bd0_in_stat?
  else
      -- RJ: Set DTS to data packet 1 and enable data toggle
      --     synchronisation. Why not enable STALL?
      new_value = 0b_0100_1000	
   end if
   
   if USB_DEBUG > 0  then
      print_crlf(serial_hw_data)
      serial_hw_write("o")
      print_byte_hex(serial_hw_data,  usb_bd0out_stat )
      print_string(serial_hw_data,"-->")
      print_byte_hex(serial_hw_data,new_value | 0b1000_0000) -- Out will be set with UOWN set.	           
   end if  
   -- RJ: According to the datasheet the UOWN bit must not be set at the same time
   --     the other bits in the bd status register. So usb_bd0out_stat set in two steps.
  usb_bd0out_stat = new_value
  uown_bit = TRUE -- SIE owns the buffer.

end procedure

-- Initialize the given OUT endpoints with the given size.
procedure usb_prime_epx_out( byte in end_point, byte in size ) is

   var byte idx = end_point * 8 -- Go to OUT endpoint 

   -- reset size
   usb_bd_array[ idx + 1 ] = size -- Buffer descriptor count
   -- set to UOWN (in two steps, first without UOWN set)
   usb_bd_array[ idx  ] = 0x00 				
   usb_bd_array[ idx  ] = 0x80 				
   
end procedure

