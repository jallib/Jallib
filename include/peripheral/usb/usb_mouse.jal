-- Title: USB HID mouse device demo
-- Author: Matthew Schinkel
-- Compiler: >=2.5r4
-- Revision: $Revision$
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This application emulates a mouse USB human interface device
-- (HID), once the USB device has been configured and the USB HID device is recognized by
-- the host operating systems, it will move the computer mouse.
--
-- Sources:
-- Albert Faber& Joep Suijs jallib usb_keyboard library
-- https://www.silabs.com/documents/public/application-notes/AN249.pdf
--

const byte USB_HID_ENDPOINT = 0x01

if defined( USB_DEBUG_MOUSE_LIB ) == TRUE then
   const HAS_SERIAL_DEBUG_PORT = 1
   const bit USB_DEBUG = true
   const bit USB_DEBUG_HIGH = false
   const bit USB_HID_DEBUG = false
   const bit USB_HID_DEBUG_HIGH = false
else
   const bit USB_DEBUG = false
   const bit USB_DEBUG_HIGH = false
   const bit USB_HID_DEBUG = false
   const bit USB_HID_DEBUG_HIGH = false
end if

if defined( HAS_SERIAL_DEBUG_PORT ) == true then

   if defined( serial_hw_baudrate ) == false then
      const serial_hw_baudrate = 115_200
   end if
   
   include serial_hardware
   include format
   include print
   
   -- intialze serial device
   serial_hw_init()

   procedure serial_print_spc() is 
      serial_hw_write( " " )
   end procedure

   procedure serial_newline() is
      serial_hw_write( 10 )
      -- serial_hw_write( 13 )
   end procedure
end if

include usb_defs

const bit USB_EP0 = 1
const byte USB_EP0_OUT_SIZE = 8
const word USB_EP0_OUT_ADDR = ( USB_BASE_ADDRESS + 0x0010 )
const byte USB_EP0_IN_SIZE  = 8
const word USB_EP0_IN_ADDR  = ( USB_EP0_OUT_ADDR + USB_EP0_OUT_SIZE )

var volatile byte usb_ep0out_buf[ USB_EP0_OUT_SIZE ] at USB_EP0_OUT_ADDR
var volatile byte usb_ep0in_buf[ USB_EP0_IN_SIZE ] at USB_EP0_IN_ADDR

const bit USB_EP1 = 1
const byte USB_EP1_OUT_SIZE = 4
const word USB_EP1_OUT_ADDR = ( USB_EP0_IN_ADDR + USB_EP0_IN_SIZE )
const byte USB_EP1_IN_SIZE  = 4
const word USB_EP1_IN_ADDR  = ( USB_EP1_OUT_ADDR + USB_EP1_OUT_SIZE )

var volatile byte usb_ep1out_buf[ USB_EP1_OUT_SIZE ] at USB_EP1_OUT_ADDR
var volatile byte usb_ep1in_buf[ USB_EP1_IN_SIZE ] at USB_EP1_IN_ADDR

const bit USB_EP2 = 0
const byte USB_EP2_OUT_SIZE = 8
const word USB_EP2_OUT_ADDR = 0x0000
const byte USB_EP2_IN_SIZE  = 8
const word USB_EP2_IN_ADDR  = 0x0000

const bit USB_EP3 = 0
const byte USB_EP3_OUT_SIZE = 8
const word USB_EP3_OUT_ADDR = 0x0000
const byte USB_EP3_IN_SIZE = 8
const word USB_EP3_IN_ADDR  = 0x0000

-- -----------------------------------------------------------------------
-- List with modifier keyboard code definitions
-- -----------------------------------------------------------------------
const USB_MOUSE_BUTTONS_UP    = 0x00
const USB_MOUSE_LEFT_BUTTON    = 0x01
const USB_MOUSE_RIGHT_BUTTON   = 0x02
const USB_MOUSE_WHEEL_BUTTON   = 0x04


const byte USB_DEVICE_DESCRIPTOR[USB_DEVICE_DESCRIPTOR_SIZE] = {
   USB_DEVICE_DESCRIPTOR_SIZE,    -- 18 bytes long
   USB_DT_DEVICE, -- DEVICE 01h
   0x10,0x01, -- bcdUSB
   0x00, -- bDeviceClass
   0x00, -- bDeviceSubClass
   0x00, -- bDeviceProtocol
   USB_EP0_OUT_SIZE, -- max packet size for end point 0
   0xC4,0x10, -- idVendor
   0x00,0x00, -- idProduct
   0x00,0x00, -- bcdDevice
   0x01, -- iManufacturer
   0x02, -- iProduct
   0x00, -- iSerialNumber
   0x01 -- bNumConfigurations
}

const byte USB_HID_REPORT1[]=
{
   0x05, 0x01, -- Usage Page (Generic Desktop)
   0x09, 0x02, -- Usage (Mouse)
   0xA1, 0x01, -- Collection (Application)
   0x09, 0x01, -- Usage (Pointer)
   0xA1, 0x00, -- Collection (Physical)
   0x05, 0x09, -- Usage Page (Buttons)
   0x19, 0x01, -- Usage Minimum (01)
   0x29, 0x03, -- Usage Maximum (03)
   0x15, 0x00, -- Logical Minimum (0)
   0x25, 0x01, -- Logical Maximum (1)
   0x95, 0x08, -- Report Count (1)
   0x75, 0x01, -- Report Size (1)
   0x81, 0x02, -- Input (Data, Variable, Absolute)
   0x05, 0x01, -- Usage Page (Generic Desktop)
   0x09, 0x30, -- Usage (X)
   0x09, 0x31, -- Usage (Y)
   0x09, 0x38, -- reserved
   0x15, 0x81, -- Logical Minimum (-127)
   0x25, 0x7F, -- Logical Maximum (127)
   0x75, 0x08, -- Report Size (8)
   0x95, 0x03, -- Report Count (3)
   0x81, 0x06, -- Input (Data, Variable, Relative)
   0xC0,       -- End Collection (Physical)
   0xC0        -- End Collection (Application)
}

const USB_CONFIGURATION_DESCRIPTOR_SIZE = 0x09 + 0x09 + 0x09 + 0x07

const byte USB_CONFIGURATION_DESCRIPTOR[ USB_CONFIGURATION_DESCRIPTOR_SIZE ]=
{   
   -- configuration descriptor
   0x09,   -- length,
   USB_DT_CONFIGURATION,   -- descriptor_type 0x02

   USB_CONFIGURATION_DESCRIPTOR_SIZE,0x00, -- 0x09 + 0x09 + 0x09 + 0x07 = 0x22

   0x01,   -- num_interfaces,
   0x01,   -- configuration_value,
   0x00,   -- configuration_string_id,
   0x80, -- attributes (bus powered, no remote wake up)
   100,   -- max_power; (200ma)

   -- interface descriptor
   0x09,                  -- length,
   USB_DT_INTERFACE,      -- descriptor_type 0x04
   0x00,                  -- interface_number, (starts at zero)
   0x00,                  -- alternate_setting, (no alternatives)
   0x01,                  -- num_endpoints,
   USB_HID_INTF,          -- interface_class, (HID)  0x03
   USB_BOOT_INTF_SUBCLASS, -- interface_subclass, (boot) 0x01
   USB_HID_PROTOCOL_MOUSE, -- interface_protocol, (mouse) 0x02
   0x00,                   -- interface_string_id;

   -- hid descriptor
   0x09,            -- length,
   USB_DT_HID,      -- descriptor_type; 0x21
   0x11,0x01,       -- hid_spec in BCD (1.01)
   0x00,            -- country_code, (0=not country specific)
   0x01,            -- num_class_descriptors, (1)
   USB_DT_HID_REPORT,   -- class_descriptor_type; (0x22 = report)
   (count( USB_HID_REPORT1 ) & 0xFF ),      ; 0x50
   (count( USB_HID_REPORT1 ) >> 8 ),

   0x07,            -- length,
   USB_DT_ENDPOINT, -- descriptor_type,  0x05
   0b10000001,      -- endpoint_address, (Endpoint 1, IN)
   USB_EPT_INT,     -- attributes; (Interrupt)  0x03
   USB_EP1_IN_SIZE, -- 0x08
   0x00,            -- max_packet_size
   0x0A             -- interval (10ms)
}

const byte USB_STRING0[] = 
{
   0x04,            -- bLength
   USB_DT_STRING,   -- bDescriptorType
   0x09,            -- wLANGID[0] (low byte)
   0x04             -- wLANGID[0] (high byte)
}

if ( defined(USB_STRING1) == false ) then
   const byte USB_STRING1[0x36] = 
   {
      0x36,            -- bLength
      USB_DT_STRING,   -- bDescriptorType
      "M", 0x00, 
      "i", 0x00, 
      "c", 0x00, 
      "r", 0x00, 
      "o", 0x00, 
      "c", 0x00, 
      "h", 0x00, 
      "i", 0x00, 
      "p", 0x00, 
      " ", 0x00,
      "T", 0x00, 
      "e", 0x00, 
      "c", 0x00, 
      "h", 0x00, 
      "n", 0x00, 
      "o", 0x00, 
      "l", 0x00, 
      "o", 0x00, 
      "g", 0x00, 
      "y", 0x00, 
      ",", 0x00, 
      " ", 0x00,
      "I", 0x00, 
      "n", 0x00, 
      "c", 0x00, 
      ".", 0x00
   }
end if

if ( defined(USB_STRING2) == false ) then
   const byte USB_STRING2[42] =
   {
      42,   -- bLength
      USB_DT_STRING,   -- bDescriptorType
      "J", 0x00, 
      "A", 0x00, 
      "L", 0x00, 
      " ", 0x00, 
      "H", 0x00, 
      "I", 0x00, 
      "D", 0x00, 
      " ", 0x00, 
      "M", 0x00,
      "O", 0x00,
      "U", 0x00,
      "S", 0x00,
      "E", 0x00,
      " ", 0x00,
      "D", 0x00,
      "E", 0x00,
      "M", 0x00,
      "O", 0x00,
      " ", 0x00,
      " ", 0x00
   }
end if

include usb_drv_core

var volatile bit _usb_hid_can_tx = true

const byte USB_HID_REQ_HID        = 0x21
const byte USB_HID_REQ_REPORT     = 0x22
const byte USB_HID_REQ_PHYSDISCR  = 0x23

const byte USB_HCR_GET_REPORT     = 0x01
const byte USB_HCR_GET_IDLE       = 0x02
const byte USB_HCR_GET_PROTOCOL   = 0x03
const byte USB_HCR_SET_REPORT     = 0x09
const byte USB_HCR_SET_IDLE       = 0x0A
const byte USB_HCR_SET_PROTOCOL   = 0x0B

procedure usb_handle_class_request_callback() is
    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request
    var word len = usb_sdp_length
    var word val = usb_sdp_value
    var byte valbt[2] at usb_sdp_value

    if USB_HID_DEBUG_HIGH then
        const byte str[] = " HID CL CALLBACK REQ: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data, byte( len ) )
        print_string(serial_hw_data,str1)
        print_byte_hex(serial_hw_data, byte( val >> 8 ) )
        print_byte_hex(serial_hw_data, byte( val ) )
        serial_hw_write( " " )
        print_byte_hex(serial_hw_data,req01 )
    end if
        
   case (req01) of

      USB_HCR_GET_REPORT:
      block
         if USB_HID_DEBUG then
            const byte str[] = "GET_REPORT "
            print_string(serial_hw_data,str)
         end if
      end block
      
      USB_HCR_GET_IDLE:
      block
         if USB_HID_DEBUG then
            const byte str[] = "GET_IDLE "
            print_string(serial_hw_data,str)
         end if
      end block

      USB_HCR_GET_PROTOCOL:
      block
         if USB_HID_DEBUG then
            const byte str[] = "GET_PROTOCOL "
            print_string(serial_hw_data,str)
         end if
      end block
      
      USB_HCR_SET_REPORT:
      block
         if USB_HID_DEBUG then
            const byte str[] = "SET_REPORT "
            print_string(serial_hw_data,str)
            
         end if
         if ( len > 0 ) then
            usb_control_mode = USB_CM_CTRL_WRITE_DATA_STAGE_CLASS
         end if
      end block
      
      USB_HCR_SET_IDLE:
      block
         if USB_HID_DEBUG then
            const byte str[] = "SET_IDLE "
            print_string(serial_hw_data,str)
         end if
      end block

      USB_HCR_SET_PROTOCOL:
      block
         if USB_HID_DEBUG then
            const byte str[] = "SET_PROTOCOL "
            print_string(serial_hw_data,str)
         end if
      end block
      
      otherwise
      block
         if USB_HID_DEBUG then
            const byte str[] = "UNKNOWN CL REQUEST "
            print_string(serial_hw_data,str)
         end if
      end block
   end case
   
end procedure

var byte usb_mouse_report[8]

procedure usb_handle_class_ctrl_write_callback() is
    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request
    var word len = usb_sdp_length
    var word val = usb_sdp_value
    var byte valbt[2] at usb_sdp_value

    if USB_HID_DEBUG_HIGH then
        const byte str[] = " HID CL CALLBACK WR: "
        print_byte_hex(serial_hw_data,req01 )
    end if
    
   case (req01) of
      USB_HCR_SET_REPORT:
      block
         if USB_HID_DEBUG then
            const byte str[] = "SET_REPORT "
            print_string(serial_hw_data,str)
         end if
      end block

      otherwise
      block
         if USB_HID_DEBUG then
            const byte str[] = "UNKNOWN CL REQUEST "
            print_string(serial_hw_data,str)
         end if
      end block

   end case
    
end procedure

procedure usb_handle_class_ctrl_read_callback() is
    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request
    var word len = usb_sdp_length
    var word val = usb_sdp_value
    var byte valbt[2] at usb_sdp_value

    if USB_HID_DEBUG_HIGH then
        const byte str[] = " HID CL CALLBACK RD: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data,byte( len ))
        print_string(serial_hw_data,str1)
        print_byte_hex(serial_hw_data, byte( val >> 8 ) )
        print_byte_hex(serial_hw_data, byte( val ) )
        serial_hw_write( " " )
        print_byte_hex(serial_hw_data,req01 )
    end if
end procedure

procedure usb_ep_data_in_callback(byte in end_point, word in buffer_addr, byte in byte_count) is
   pragma inline
    
    if USB_HID_DEBUG_HIGH then
        const byte str[] = " EP data in: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data,byte_count & 0xFF)
        print_string(serial_hw_data,str1)
    end if
    
    -- data has been sent, so do we need to send more?
    if (end_point == USB_HID_ENDPOINT) then
        -- it's the data end point
        _usb_hid_can_tx = true
    end if
end procedure


include usb_drv


-- -----------------------------------------------------------------------
-- usb_mouse_flush shall be called on a regular base (millisecond range)
-- in order to keep the USB communcation alive. Therfore it is adviced to
-- call the usb_mouse _flush procedure in the main loop of your
-- application.
-- Note: Only needed when USB interrupt is not used otherwise this call
--       can be omitted (it does nothing in interrupt mode).
-- -----------------------------------------------------------------------
procedure usb_mouse_flush() is
   if !defined(USB_INTERRUPT_DRIVEN) then
      usb_handle_isr()
   end if
end procedure


-- -----------------------------------------------------------------------
-- _usb_hid_tx_report, internal function to send a HID report
-- -----------------------------------------------------------------------
procedure _usb_hid_tx_report( byte in hid_report_in[], byte in cnt ) is
   
   while ( _usb_hid_can_tx == false ) loop
      usb_mouse_flush()
   end loop
   _usb_hid_can_tx = false
   usb_send_data(USB_HID_ENDPOINT, hid_report_in, cnt , low )
end procedure


-- -----------------------------------------------------------------------
-- usb_mouse_init will setup the HID USB communication with the HOST,
-- however, this can be a time consuming process, therefore this call 
-- is non blocking. In order to check if communication with the HOST 
-- has been established, one can call the usb_is_configured() function, see
-- usb_is_configured() documentation for additional details.
-- -----------------------------------------------------------------------
procedure usb_mouse_init() is
   -- setup the USB device
   usb_setup()

   -- enable USB device
   usb_enable_module()
end procedure

-- -----------------------------------------------------------------------
-- send a mouse button command
-- -----------------------------------------------------------------------   
procedure usb_mouse_send_button(byte in button) is
   var byte hid_report_in[4]

   -- setup HID report
   hid_report_in[0] = button
   hid_report_in[1] = 0
   hid_report_in[2] = 0
   hid_report_in[3] = 0

   -- send HID report
   _usb_hid_tx_report( hid_report_in, count( hid_report_in ) )
end procedure

-- -----------------------------------------------------------------------
-- mouse left click
-- -----------------------------------------------------------------------
procedure usb_mouse_left_click() is
   usb_mouse_send_button(USB_MOUSE_LEFT_BUTTON)
   usb_mouse_send_button(USB_MOUSE_BUTTONS_UP)
end procedure

-- -----------------------------------------------------------------------
-- mouse right click
-- -----------------------------------------------------------------------
procedure usb_mouse_right_click() is
   usb_mouse_send_button(USB_MOUSE_RIGHT_BUTTON)
   usb_mouse_send_button(USB_MOUSE_BUTTONS_UP)
end procedure

-- -----------------------------------------------------------------------
-- mouse wheel click
-- -----------------------------------------------------------------------
procedure usb_mouse_wheel_click() is
   usb_mouse_send_button(USB_MOUSE_WHEEL_BUTTON)
   usb_mouse_send_button(USB_MOUSE_BUTTONS_UP)
end procedure

-- -----------------------------------------------------------------------
-- Move the mouse
-- -----------------------------------------------------------------------
procedure usb_mouse_move(sbyte in move_left_right, sbyte in move_up_down) is
   var byte hid_report_in[4]

   -- setup HID report
   hid_report_in[0] = 0
   hid_report_in[1] = byte(move_left_right)
   hid_report_in[2] = byte(move_up_down)
   hid_report_in[3] = 0

   -- send HID report
   _usb_hid_tx_report( hid_report_in, count( hid_report_in ) )
end procedure

-- -----------------------------------------------------------------------
-- Move the mouse
-- -----------------------------------------------------------------------
procedure usb_mouse_move_wheel(sbyte in data) is
   var byte hid_report_in[4]

   -- setup HID report
   hid_report_in[0] = 0
   hid_report_in[1] = 0
   hid_report_in[2] = 0
   hid_report_in[3] = byte(data)

   -- send HID report
   _usb_hid_tx_report( hid_report_in, count( hid_report_in ) )
end procedure



