-- ------------------------------------------------------------------------
-- Title: reading/writing of PIC's data EEPROM
-- Author: Stef Mientki, Copyright (c) 2002..2022, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling, Joep Suijs (on behalf of Tijs van Roon),
--             Rob Jansen
-- Compiler: 2.5r6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- Read from or write to EEPROM/data a byte, word or double word.
-- Available procedures:
--   * data_eeprom_read(<offset>,<byte>)
--   * data_eeprom_write(<offset>,<byte>)
--   * data_eeprom_read_word(<offset>,<word>)
--   * data_eeprom_write_word(<ofset>,<word>)
--   * data_eeprom_read_dword(<offset>,<dword>)
--   * data_eeprom_write_dword(<offset>,<dword>)
-- Available functions:
--   * <byte>  = data_eeprom(<offset>)
--   * <word>  = data_eeprom_word(<offset>)
--   * <dword> = data_eeprom_dword(<offset>)
-- In all cases <offset> is a word containing the position relative to
-- the beginning of EEPROM/data memory.
-- Examples of use:
--   * Read a byte of EEPROM at offset 7 into x:
--         var byte x
--         data_eeprom_read(7, x)
--   * Read a word from EEPROM at offset 4 into y:
--         var word y
--         y = data_eeprom_word(4)
--   * Write a byte to EEPROM at offset 18:
--         data_eeprom_write(18, 0b1111_0000)
--
-- Notes:
-- * Write-protect bits in configuration memory may prohibit writing.
-- * Writing to locations outside the available memory range may have
--   unexpected effects!
-- * For most PICs the first EEPROM address starts at 0. For some PICs, 
--   this is not the case and and an offset must be added to the EEPROM address
--   If an offset is needed the main program can define a constant called
--   EEPROM_ADDRESS_OFFSET with the correct value so that the first
--   address of the EEPROM remains 0 for the user. Some examples:
--   For PIC16F18346: const  word EEPROM_ADDRESS_OFFSET = 0x7000 
--   For PIC18F46Q10: const dword EEPROM_ADDRESS_OFFSET = 0x31_0000   
--   See the datasheet of the PICs for more information. 
--

-- Alias to support differences in PICs. Read bit.
if defined(EECON1_RD) then
   alias _EEPROM_READ is EECON1_RD
elsif defined(NVMCON1_RD) then
   alias _EEPROM_READ is NVMCON1_RD
end if 

-- Write bit.
if defined(EECON1_WR) then
   alias _EEPROM_WRITE is EECON1_WR
elsif defined(NVMCON1_WR) then
   alias _EEPROM_WRITE is NVMCON1_WR
end if 

-- EEPROM write enable.
if defined(EECON1_WREN) then
   alias _EEPROM_WRITE_ENABLE is EECON1_WREN
elsif defined(NVMCON1_WREN) then
   alias _EEPROM_WRITE_ENABLE is NVMCON1_WREN
elsif defined(NVMCON0_NVMEN) then
   alias _EEPROM_WRITE_ENABLE is NVMCON0_NVMEN
end if 

-- EEPROM low data byte.
if defined(EEDATL) then
   alias _EEPROM_DATA is EEDATL
elsif defined(EEDAT) then
   alias _EEPROM_DATA is EEDAT
elsif defined(EEDATA) then
   alias _EEPROM_DATA is EEDATA
elsif defined(NVMDAT) then
   alias _EEPROM_DATA is NVMDAT
elsif defined(NVMDATL) then
   alias _EEPROM_DATA is NVMDATL
end if 

-- EEPROM control register.
if defined(EECON2) then
   alias _EEPROM_CONTROL is EECON2
elsif defined(NVMCON2) then
   alias _EEPROM_CONTROL is NVMCON2
end if 

-- EEPROM low address byte.
if defined(EEADRL) then
   alias _EEPROM_ADDRESS_LOW is EEADRL
elsif defined(EEADR) then
   alias _EEPROM_ADDRESS_LOW is EEADR
elsif defined(NVMADRL) then
   alias _EEPROM_ADDRESS_LOW is NVMADRL
end if 

-- EEPROM high address byte. 
if defined(EEADRH) then
   alias _EEPROM_ADDRESS_HIGH is EEADRH
elsif defined(NVMADRH) then
   alias _EEPROM_ADDRESS_HIGH is NVMADRH
end if 

-- EEPROM upper address byte.
if defined(NVMADRU) then
   alias _EEPROM_ADDRESS_UPPER is NVMADRU
end if 

-- EEPROM configuration space bit.
if defined(EECON1_CFGS) then
   alias _EEPROM_CONFIG_SPACE is EECON1_CFGS
   const bit _EEPROM_SPACE_ENABLE = FALSE
elsif defined(NVMCON1_NVMREGS) then
   alias _EEPROM_CONFIG_SPACE is NVMCON1_NVMREGS 
   const bit _EEPROM_SPACE_ENABLE = TRUE
elsif defined(NVMCON1_NVMREG) then
   alias _EEPROM_CONFIG_SPACE is NVMCON1_NVMREG 
   const bit _EEPROM_SPACE_ENABLE = 0   -- 2 bits will be cleared
end if 

-- EEPROM code space bit.
if defined(EECON1_EEPGD) then
   alias _EEPROM_CODE_SPACE is EECON1_EEPGD
end if 

-- Some PICs use other declartions for the GIE bit.
if defined(INTCON0_GIE)then  
   alias _EEPROM_GIE is INTCON0_GIE
elsif defined(INTCON_GIE) then
   alias _EEPROM_GIE is INTCON_GIE
end if

-- ------------------------------------------------------------------------
-- Title:     Set memory region bits in EECON1 and load offset register(s)
-- Arguments: offset of byte to be read/written
-- Returns:   (nothing)
-- Notes:     Wait (spin) until any previous write completed before proceeding
-- ------------------------------------------------------------------------
procedure _prepare_eeprom_access(word in eeprom_address) is

   pragma inline
   var dword offset
   var byte tempoffset[4] at offset             -- type cast

   -- Some PICs use an offset, if defined we will use it.
   offset = eeprom_address
   if defined(EEPROM_ADDRESS_OFFSET) then
      offset = offset + dword(EEPROM_ADDRESS_OFFSET)
   end if
   
   while _EEPROM_WRITE loop                    -- allow any previous
     -- spin as long as any previous write is not completed
   end loop                                    -- before this write
   
   _EEPROM_ADDRESS_LOW = tempoffset[0]         -- low order byte of offset

   if defined(_EEPROM_ADDRESS_HIGH) then       -- PIC with large EEPROM
      _EEPROM_ADDRESS_HIGH = tempoffset[1]     -- high order byte of offset
   end if

   if defined(_EEPROM_ADDRESS_UPPER) then      -- PIC with upper EEPROM
      _EEPROM_ADDRESS_UPPER = tempoffset[2]    -- upper order byte of offset
   end if

   if defined(_EEPROM_CONFIG_SPACE) then           -- config memory supported
      _EEPROM_CONFIG_SPACE = _EEPROM_SPACE_ENABLE  -- select EEPROM
   end if

   if defined(_EEPROM_CODE_SPACE) then        -- code memory supported
      _EEPROM_CODE_SPACE  = FALSE             -- deselect code region
   end if

end procedure


-- ------------------------------------------------------------------------
-- Title:     Read byte from data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of byte to be read
--            - Data (byte) to store data EEPROM contents
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure  data_eeprom_read(word in offset, byte out data) is

   _prepare_eeprom_access(offset)               -- make ready for read
   _EEPROM_READ = TRUE                          -- initiate read operation
   data = byte(_EEPROM_DATA)                    -- data byte
   
end procedure


-- ------------------------------------------------------------------------
-- Title:     Write byte to data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of byte to be written
--            - Data (byte) to be stored in data EEPROM
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure data_eeprom_write(word in offset, byte in data) is

   var bit gie_old                              -- GIE state

   _prepare_eeprom_access(offset)               -- make ready for write
   _EEPROM_DATA = data                          -- data byte
   _EEPROM_WRITE_ENABLE = TRUE                  -- enable writes
   
   gie_old = _EEPROM_GIE                        -- save GIE state
   _EEPROM_GIE = FALSE                           -- disable interrupts

   _EEPROM_CONTROL = 0x55                       -- \ required sequence
   _EEPROM_CONTROL = 0xAA                       -- /
   _EEPROM_WRITE = TRUE                         -- initiate write operation
   
   assembler                                    -- required for some PICs
      nop
      nop
   end assembler

   _EEPROM_GIE = gie_old                        -- restore interrupt status
   _EEPROM_WRITE_ENABLE = FALSE                 -- disable further writes

end procedure


-- ------------------------------------------------------------------------
-- Title:     Read byte of data EEPROM at given offset
-- Arguments: Offset in data EEPROM of byte to be read
-- Returns:   Byte of data EEPROM
-- ------------------------------------------------------------------------
function  data_eeprom(word in offset) return byte is

   pragma inline
   var byte data                                -- result
   data_eeprom_read(offset, data)
   return data

end function


-- ------------------------------------------------------------------------
-- Title:     Read word from data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of word to be read
--            - Data (word) to store EEPROM contents
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure data_eeprom_read_word(word in offset, word out data) is

   var byte tempbyte[2] at data                 -- overlay
   data_eeprom_read(offset+0, tempbyte[0])
   data_eeprom_read(offset+1, tempbyte[1])

end procedure


-- ------------------------------------------------------------------------
-- Title:     Read word from data EEPROM at given offset
-- Arguments: Offset in data EEPROM of word to be read
-- Returns:   Word of data EEPROM
-- ------------------------------------------------------------------------
function data_eeprom_word(word in offset) return word is

   pragma inline
   var word data                                -- result
   data_eeprom_read_word(offset, data)
   return data

end function


-- ------------------------------------------------------------------------
-- Title:     Write word to data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of word to be written
--            - Data (word) to store in EEPROM
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure data_eeprom_write_word(word in offset, word in data) is

   var byte tempbyte[2] at data                 -- overlay
   data_eeprom_write(offset+0, tempbyte[0])
   data_eeprom_write(offset+1, tempbyte[1])

end procedure


-- ------------------------------------------------------------------------
-- Title:     Read doubleword from data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of doubleword to be read
--            - Data (dword) to store EEPROM contents
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure data_eeprom_read_dword(word in offset, dword out data) is

   pragma inline
   var word tempword[2] at data                 -- overlay
   data_eeprom_read_word(offset+0, tempword[0])
   data_eeprom_read_word(offset+2, tempword[1])

end procedure


-- ------------------------------------------------------------------------
-- Title:     Read doubleword from data EEPROM at given offset
-- Arguments: Offset in data EEPROM of doubleword to be read
-- Returns:   Doubleword of data EEPROM
-- ------------------------------------------------------------------------
function data_eeprom_dword(word in offset) return dword is

   pragma inline                                -- result
   var dword data
   data_eeprom_read_dword(offset, data)
   return data

end function


-- ------------------------------------------------------------------------
-- Title:     Write doubleword to data EEPROM at given offset
-- Arguments: - Offset in data EEPROM of doubleword to be written
--            - Data (dword) to be stored
-- Returns:   (nothing)
-- ------------------------------------------------------------------------
procedure data_eeprom_write_dword(word in offset, dword in data) is

   pragma inline
   var word tempword[2] at data                 -- overlay
   data_eeprom_write_word(offset+0, tempword[0])
   data_eeprom_write_word(offset+2, tempword[1])

end procedure

