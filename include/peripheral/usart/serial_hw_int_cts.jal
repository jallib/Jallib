-- ----------------------------------------------------------------------
-- Title: serial_hw_int_cts.jal. Interrupt driven buffered serial interface with flow control.
-- Author: Rob Hamerling, Copyright (c) 2008..2020, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r4
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Serial communications for first or only USART:
--   - receive and transmit data transfer is interrupt driven
--   - receive and transmit data transfer is buffered (circular buffers)
--   - provides automatic CTS flow control with spare free space for FiFo buffer
-- .
-- This library supports:
--   - Data format: 8 bits data, 1 start-bit, 1 stop bit
--   - Acceptable baud rate depends on the oscillator frequency
--     (see BAUD RATES tables in the datasheet).
--   - Interrupt bits used: TXIE, RCIE, PEIE and GIE.
-- .
-- Available procedures/functions for application programs:
-- .
--   - serial_hw_init()                          -- initialize communications
-- .
--   - serial_send_byte(byte out <byte>)         -- send byte
--                                               -- returns the transmitted byte
--   - serial_hw_read(byte out <byte>) return bit  -- receive byte
--                                               -- returns TRUE with data,
--                                               -- FALSE when no data available
--   - serial_hw_write(byte in <byte>)           -- send byte (wait if queue full)
-- .
--   - serial_hw_data = <byte>                   -- send byte, wait if queue full
-- .
--   - serial_hw_tx_buffer_free()                -- get free bytes in transmit buffer
--                                               -- returns number of free bytes
-- .
--   - <byte> = serial_hw_data                   -- receive byte, wait if queue empty
-- .
-- Directions for use of this library in application programs (in this sequence):
-- .
-- 1. Declare the following constants:
-- .
--      const  serial_hw_baudrate = 115200      -- line speed must be declared (no default)
-- .
--      const bit serial_overflow_discard = FALSE  -- Transmit buffer overflow:
--                                              --   FALSE: wait for free space (blocking)
--                                              --   TRUE: discard data (non-blocking)
--                                              -- This flag may be dynamically changed
--                                              -- but must then be declared as 'var bit'
-- .
--                                              -- Receive buffer overflow data is
--                                              -- prevented by CTS flow control, provided
--                                              -- the sender has flow control enabled.
--                                              -- Otherwise data discarded without notification!
-- .
--    and an alias
-- .
--      alias serial_ctsinv  is  pin_B4         -- Incoming data flow control signal
--                                              -- Optional, if no CTS flow control needed
--                                              -- no dummy needs to be declared.
-- .
--    and optionally you could define one or more of the constants below.
--    You should do so if you want different values than shown (= default).
--    If not defined, the following values are used:
-- .
--      const   SERIAL_XMTBUFSIZE  = 32         -- size of transmit buffer
--      const   SERIAL_RCVBUFSIZE  = 64         -- size of receive buffer
--      const   SERIAL_DELTA       = 17         -- spare space receive buffer
--                                              -- if possible keep SERIAL_DELTA = 17!
-- .
--    When the physical locations of pin_TX and pin_RX are configurable for a specific
--    PIC, the device file will probably contain names like pin_TX_RB2 and pin_RX_RB1
--    and another pair with other pin suffixes.
--    Depending for which pair of pins the USART is configured aliases
--    without suffixes have to be specified, like:
--         alias  pin_TX            is  pin_TX_RB2
--         alias  pin_RX            is  pin_RX_RB1
--         alias  pin_TX_direction  is  pin_TX_RB2_direction
--         alias  pin_RX_direction  is  pin_RX_RB1_direction
-- .
-- 2. Include this library.
-- .
-- and somewhere before actually using serial communications:
-- .
-- 3. Prepare pins:
--       pin_B4_direction = OUTPUT              -- incoming data flow control
--    Notes: - pin_TX and pin_RX are selected automatically
--           - direction settings of these pins are taken care of by the library
-- .
-- 4. Call serial_hw_init() to initialize serial communications.
--
-- Notes: Background information:
-- .
-- The PIC ports use positive logic: '1' is positive voltage, '0' is ground.
-- .
-- In the RS232 standard:
-- - Negative voltage ('mark') means OFF for control signals, and
--   indicates 1 (one) for data signals (start-, data-, stop-bits).
-- - Positive voltage ('space') means ON for control signals and
--   0 (zero) for start-, data- and stop-bits.
-- - Signal levels: 'mark' = -3V to -15V,  'space' = +3V to +15V
-- .
-- Between PIC and RS232 normally an interface chip is used, such as a
-- Maxim/Dallas MAX232 or MAX202. These are not only voltage level CONverters
-- but also signal INverters. You should be aware of the following:
-- - The inversion of PIC data-in and data-out by the MAX2x2 is required
--   to convert data-, start- and stop-bits to/from the corresponding
--   RS232 polarity. So nothing special has to be done in the program
--   because the USART of the PIC uses 'inverted' signal levels!
-- - For CTS the inversion by the MAX2x2 is NOT desired.
--   Therefore the program has to use inverted signalling for CTS:
--   'FALSE' is used for CTS ON and 'TRUE' for CTS OFF!
--   As a reminder for this 'inverted' logic the signal is called
--   serial_ctsinv (serial_ctsinv = TRUE means CTS is FALSE!).
-- .
-- Remember also: RxD of RS232-plug connects to TX of PIC via MAX2x2
--                TxD of RS232-plug connects to RX of PIC via MAX2x2
-- .
-- Additional remarks:
--  - The selection of the CTS pin above is an example, any other pin
--    which is configurable for output can be used.
--  - Do not touch the following interrupt bits: TXIE, RCIE, PEIE and GIE
--
-- Sources:
--
-- ----------------------------------------------------------------------
--
-- Setup defaults when no value is specified before:
--
if (defined(SERIAL_XMTBUFSIZE) == FALSE) then
   const   SERIAL_XMTBUFSIZE  = 32  -- default size of transmit buffer
end if

if (defined(SERIAL_RCVBUFSIZE) == FALSE) then
   const   SERIAL_RCVBUFSIZE  = 64  -- default size of receive buffer
end if

if (defined(SERIAL_DELTA) == FALSE) then
   const   SERIAL_DELTA   = 17     -- default spare space receive buffer
end if

if (defined(serial_hw_baudrate) == FALSE) then
   if (defined(SERIAL_BPSRATE) == TRUE) then
      _warn "SERIAL_BPSRATE is deprecated - please use serial_hw_baudrate"
      const serial_hw_baudrate = SERIAL_BPSRATE
   else
      _error "no baudrate defined"
   end if
end if

if (defined(serial_overflow_discard) == FALSE) then
   const bit serial_overflow_discard = FALSE       -- no transmit overflow
end if

-- Aliases to get things working for PIC with different type of usarts.
if (defined(U1CON0) == TRUE) then
   alias SPBRGL       is U1BRGL          -- Baud rate generator low byte.
   alias SPBRGH       is U1BRGH          -- Baud rate generator high byte.
   alias TXSTA_BRGH   is U1CON0_BRGS     -- Baud rate speed select.
   if (defined(PIR6U1TXIF) == TRUE) then
      alias SERIAL_TXIF  is PIR6_U1TXIF  -- Tranmit interrupt flag.
      alias SERIAL_TXIE  is PIE6_U1TXIE  -- Transmit interrrupt enable.
      alias SERIAL_RCIF  is PIR6_U1RXIF  -- Receive interrupt flag.
      alias SERIAL_RCIE  is PIE6_U1RXIE  -- Receive interrupt enable.
   elsif (defined(PIR4_U1TXIF) == TRUE) then
      alias SERIAL_TXIF  is PIR4_U1TXIF  -- Tranmit interrupt flag.
      alias SERIAL_TXIE  is PIE4_U1TXIE  -- Transmit interrrupt enable.
      alias SERIAL_RCIF  is PIR4_U1RXIF  -- Receive interrupt flag.
      alias SERIAL_RCIE  is PIE4_U1RXIE  -- Receive interrupt enable.
   elsif (defined(PIR3_U1TXIF) == TRUE) then
      alias SERIAL_TXIF  is PIR3_U1TXIF  -- Tranmit interrupt flag.
      alias SERIAL_TXIE  is PIE3_U1TXIE  -- Transmit interrrupt enable.
      alias SERIAL_RCIF  is PIR3_U1RXIF  -- Receive interrupt flag.
      alias SERIAL_RCIE  is PIE3_U1RXIE  -- Receive interrupt enable.  
   end if
   alias TXREG is U1TXB                  -- Transmit buffer.
   alias RCREG is U1RXB                  -- Receive buffer.
   -- Force usart_common to use 16 bit baudrate generator.
   if (defined(BAUDCON_BRG16) == FALSE) then
      var bit BAUDCON_BRG16 = TRUE
   end if
elsif (defined(PIE1_RCIE) == TRUE) then
   -- Aliases to make driver more generic, PIE1/PIR1
   alias SERIAL_TXIE is PIE1_TXIE
   alias SERIAL_TXIF is PIR1_TXIF
   alias SERIAL_RCIE is PIE1_RCIE
   alias SERIAL_RCIF is PIR1_RCIF
elsif (defined(PIE4_RCIE) == TRUE) then
   -- Aliases to make driver more generic, PIE4/PIR4
   alias SERIAL_TXIE is PIE4_TXIE
   alias SERIAL_TXIF is PIR4_TXIF
   alias SERIAL_RCIE is PIE4_RCIE
   alias SERIAL_RCIF is PIR4_RCIF
elsif (defined(PIE3_RCIE) == TRUE) then
   -- Aliases to make driver more generic, PIE3/PIR3
   alias SERIAL_TXIE is PIE3_TXIE
   alias SERIAL_TXIF is PIR3_TXIF
   alias SERIAL_RCIE is PIE3_RCIE
   alias SERIAL_RCIF is PIR3_RCIF
else
   _error "This library does not support this PIC, please report"
end if

include usart_common                        -- common serial functions/procedures

-- Local circular transmit buffer
var byte  _serial_xmtbuf[SERIAL_XMTBUFSIZE] -- circular output buffer

-- Local circular receive buffer
var byte  _serial_rcvbuf[SERIAL_RCVBUFSIZE] -- circular input buffer

-- Declaration of local offsets in circular buffers:

-- variable keeping track of next free position in transmit buffer
var volatile byte  _serial_offsetxmthead    -- offset next byte from appl

-- variable keeping track of next byte to be transmitted by interrupt handler
var volatile byte  _serial_offsetxmttail    -- offset next byte to port

-- variable keeping track of next free byte in receive buffer
var volatile byte  _serial_offsetrcvhead    -- offset next byte from port

-- variable keeping track of next byte available to application program
var volatile byte  _serial_offsetrcvtail    -- offset next byte to appl


-- ----------------------------------------------------------------------
-- Title:     USART serial transmit interrupt handler
-- Arguments: (none)
-- Returns:   (nothing)
-- ----------------------------------------------------------------------
procedure  _serial_transmit_interrupt_handler() is

   pragma interrupt

   var  byte  x
   if ((SERIAL_TXIF == TRUE) & (SERIAL_TXIE == ENABLED)) then   -- UART xmit interrupt

      if (_serial_offsetxmttail != _serial_offsetxmthead) then  -- data in xmit buffer
         x = _serial_xmtbuf[_serial_offsetxmttail]              -- next byte to xmit
         _serial_offsetxmttail = _serial_offsetxmttail + 1      -- next position
         if (_serial_offsetxmttail >= SERIAL_XMTBUFSIZE) then   -- end of buffer reached
            _serial_offsetxmttail = 0                           -- wrap
         end if
         TXREG = x                                              -- actually xmit byte
      else                                                      -- xmit buffer empty
         SERIAL_TXIE = DISABLED                                 -- disable xmit interrupts
      end if
   end if
end procedure


-- ----------------------------------------------------------------------
-- Title:     USART serial receive interrupt handler
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Sets CTS low when receive buffer has less than
--            <SERIAL_DELTA> bytes free space.
-- ----------------------------------------------------------------------
procedure  _serial_receive_interrupt_handler() is

   pragma interrupt

   var  byte  x
   var  bit   usart_error

   if (SERIAL_RCIF == TRUE)  then        -- UART receive interrupt
      usart_error = FALSE

      if (defined(U1CON0)== TRUE) then
         -- Newer USART type
         if U1ERRIR_FERIF | U1ERRIR_RXFOIF | U1ERRIR_RXBKIF | U1ERRIR_PERIF then
            -- reset framing and/or overflow errors
            U1ERRIR_FERIF  = FALSE
            U1ERRIR_RXFOIF = FALSE
            U1ERRIR_RXBKIF = FALSE
            U1ERRIR_PERIF  = FALSE
            U1FIFO_RXBE    = TRUE       -- clear receive bufer
            usart_error    = TRUE
         end if
      else
         -- Classic USART type
         if ((RCSTA_OERR == TRUE) | (RCSTA_FERR == TRUE)) then  -- frame/overr error
            x = RCREG                              -- flush hardware buffer
            while RCSTA_OERR == TRUE loop          -- overrun state
               RCSTA_CREN = DISABLED               -- disable UART
               RCSTA_CREN = ENABLED                -- re-enable UART
               x = RCREG                           -- \  flush hardware buffers
               x = RCREG                           -- /
            end loop                               -- until no more overrun
            usart_error = TRUE
         end if
      end if

      if usart_error then
         _serial_offsetrcvtail = 0              -- \  flush circular buffer
         _serial_offsetrcvhead = 0              -- /
         if defined(serial_ctsinv) then
            serial_ctsinv = FALSE               -- ensure CTS true
         end if
      else                                      -- data without errors
         _serial_rcvbuf[_serial_offsetrcvhead] = RCREG      -- move byte to rcv buffer

         if (defined(serial_receive_wedge) == TRUE) then
            -- receive wedge - a user program can define this procedure.
            --
            --    procedure serial_receive_wedge(byte in char)
            --
            -- If this procedure exisits, it will be called from the
            -- isr, each time a char is received and put into the rx queue.
            --
            -- serial_receive_wedge is used in test_queue_isr.jal
            -- In general it can be usefull to detect ctrl-c or alike when they
            -- arive at the pic (and not when you are ready to process them).
            --
            -- CAUTION: the wedge is part of the ISR and should be designed
            -- to behave accordingly (fast, minimal stack use and nonblocking).
            -- If you are not sure you need this, you probably don't!
            serial_receive_wedge(_serial_rcvbuf[_serial_offsetrcvhead])
         end if

         x = _serial_offsetrcvhead + 1          -- update offset
         if x >= SERIAL_RCVBUFSIZE then         -- end of buffer reached
            x = 0                               -- wrap
         end if
         if (x != _serial_offsetrcvtail) then   -- buffer not yet full
            _serial_offsetrcvhead = x           -- update offset
         end if                                 -- (else discard byte,
         --  CTS flow control has failed)
         if defined(serial_ctsinv) then
            if (serial_ctsinv == FALSE) then    -- CTS is TRUE
               if _serial_offsetrcvhead > _serial_offsetrcvtail then  -- offset difference
                  x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
               else
                  x = _serial_offsetrcvtail - _serial_offsetrcvhead
               end if
               if (x < SERIAL_DELTA) then       -- circular buffer almost full
                  serial_ctsinv = TRUE          -- set CTS FALSE
               end if
            end if
         end if
      end if
   end if

end procedure


-- ----------------------------------------------------------------------
-- Title:     Return byte (if any) from circular receive buffer of USART
-- Arguments: received byte (if any)
-- Returns:   - TRUE  when byte returned
--            - FALSE if no byte available
-- Notes:     Sets CTS high when receive buffer has more than <SERIAL_DELTA>
--            bytes free space after delivering byte to caller.
-- ----------------------------------------------------------------------
function serial_hw_read(byte out data) return bit is

   var  byte  x                                 -- for buffer management

   if (_serial_offsetrcvtail == _serial_offsetrcvhead) then  -- receive buffer empty
      return FALSE                              -- no data available
   end if

   data = _serial_rcvbuf[_serial_offsetrcvtail] -- first available byte
   _serial_offsetrcvtail = _serial_offsetrcvtail + 1
   if (_serial_offsetrcvtail >= SERIAL_RCVBUFSIZE) then  -- end of buffer reached
      _serial_offsetrcvtail = 0                 -- wrap
   end if
   if defined(serial_ctsinv) then
      if (serial_ctsinv == TRUE) then           -- CTS is FALSE
         if (_serial_offsetrcvhead > _serial_offsetrcvtail) then
            x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
         else
            x = _serial_offsetrcvtail - _serial_offsetrcvhead  -- offset difference
         end if
         if (x >= SERIAL_DELTA) then            -- enough free space now
            serial_ctsinv = FALSE               -- make CTS TRUE
         end if
      end if
   end if

   return TRUE                                  -- byte available

end function

-- Deprecated function -------------------
function  serial_receive_byte(byte out data) return bit is
   pragma inline
   _warn "serial_receive_byte() is deprecated - please use  serial_hw_read()"
   return serial_hw_read(data)
end function


-- ----------------------------------------------------------------------
-- Title:     Put a single byte in transmit buffer
-- Arguments: Data (byte) to transmit
-- Returns:   transmitted byte (or 0x00 when data discarded)
-- Notes:     - Activates transmit interrupt handler when data buffered
--            - When buffer full act as indicated in 'serial_overflow_discard'
--              * TRUE:  discard data (and return 0x00 as data byte)
--              * FALSE: wait for free buffer space
--                       (returns only after data has been stored in buffer)
-- ----------------------------------------------------------------------
function  serial_send_byte(byte in data) return byte is

   var  byte  newxmthead                        -- offset in circular buffer

   if ((_serial_offsetxmthead == _serial_offsetxmttail) & -- nothing buffered
   (SERIAL_TXIF == TRUE)) then                            -- and UART not busy
      SERIAL_TXIE = DISABLED                    -- disable xmt interrupt
      TXREG = data                              -- transmit byte immediately
   else                                         -- use circular buffer
      _serial_xmtbuf[_serial_offsetxmthead] = data  -- put byte in buffer
      newxmthead = _serial_offsetxmthead + 1    -- offset next char
      if (newxmthead >= SERIAL_XMTBUFSIZE) then  -- end of buffer reached
         newxmthead = 0                         -- wrap
      end if
      if (newxmthead != _serial_offsetxmttail) then  -- buffer not full
         _serial_offsetxmthead = newxmthead     -- update offset
      else                                      -- buffer full!
         if (serial_overflow_discard == FALSE) then  -- do not discard data!
            while (newxmthead == _serial_offsetxmttail) loop   -- buffer full
               -- nothing                       -- spin until something xmit'd
            end loop
            _serial_offsetxmthead = newxmthead  -- update offset
         else
            data = 0x00                         -- indicate byte discarded
         end if
      end if
      SERIAL_TXIE = ENABLED                     -- (re-)enable xmit interrupts
   end if

   return data                                  -- transmitted byte!

end function


-- ----------------------------------------------------------------------
-- Title:     Get free space in transmit buffer
-- Arguments: (none)
-- Returns:   Number of free bytes in transmit buffer
-- Notes:     - Useful to check in advance if a string will fit in the buffer
--              or if transmitting the string will block.
--            - Never returns zero. If "1" is returned, regard buffer as full.
-- ----------------------------------------------------------------------
function  serial_hw_tx_buffer_free() return byte is

   var  byte  buffer_free

   buffer_free = _serial_offsetxmttail - _serial_offsetxmthead  -- difference
   -- between head and tail pointers
   if (_serial_offsetxmttail <= _serial_offsetxmthead) then     -- adjust when
      -- free space crosses end-of-buffer boundary
      buffer_free = buffer_free + SERIAL_XMTBUFSIZE             -- or buffer is empty
   end if

   return buffer_free

end function


-- ----------------------------------------------------------------------
-- Title:     Put a single byte in transmit buffer
-- Arguments: Data (byte) to transmit
-- Returns    (nothing)
-- Notes:     - This is a variant of serial_send_byte() compatible with
--              the procedure in the serial_hardware library.
--            - Spins when byte cannot be put in transmit buffer
--              (buffer full condition).
-- ----------------------------------------------------------------------
procedure serial_hw_write(byte in data) is
   var byte dummy
   dummy = serial_send_byte(data)
end procedure


-- ----------------------------------------------------------------------
-- Title:     Initialize first or only serial port
-- Arguments: (none)
-- Returns:   (nothing)
-- ----------------------------------------------------------------------
procedure serial_hw_init() is

   _serial_offsetxmthead  = 0        -- offset next byte from appl
   _serial_offsetxmttail  = 0        -- offset next byte to port
   _serial_offsetrcvhead  = 0        -- offset next byte from port
   _serial_offsetrcvtail  = 0        -- offset next byte to appl

   if (defined(U1CON0)== TRUE) then
      -- Newer USART type
      U1CON0 = 0b0000_0000           -- reset, 8 databits, async
      U1CON1 = 0b0000_0000           -- disable, normal operation
      U1CON2 = 0b0000_0000           -- one stop bit, flow control is off

      U1ERRIE = 0b0000_0000          -- disable all USART error interrupts
      U1UIR   = 0b0000_0000

     _calculate_and_set_baudrate()   -- transmit and receive speed

      pin_RX_direction = INPUT       -- make receive pin input
      pin_TX_direction = OUTPUT      -- make transmit pin output

      U1CON0_TXEN = ENABLED          -- Enable transmitter
      U1CON0_RXEN = ENABLED          -- Enable receive

      INTCON0_GIE = ENABLED          -- general interrupts

      U1CON1_ON   = TRUE             -- Enable serial port
   else
      -- Classic USART type

      TXSTA = 0b0000_0000            -- reset (8 databits, asyn)
      RCSTA = 0b0000_0000            -- reset (8 databits, asyn)

     _calculate_and_set_baudrate()     -- transmit and receive speed

      pin_RX_direction = INPUT       -- make receive pin input
      pin_TX_direction = INPUT       -- make transmit pin input!
      -- (required by some older PICs like 16f628)

      TXSTA_TXEN = ENABLED           -- enable transmit (makes TX pin output)

      RCSTA_SPEN = ENABLED           -- activate serial port
      RCSTA_CREN = ENABLED           -- continuous receive enable

      INTCON_PEIE = ENABLED          -- peripheral interrupts
      INTCON_GIE  = ENABLED          -- general interrupts
   end if

   SERIAL_RCIE = ENABLED             -- USART receive int. enable
   -- (SERIAL_TXIE handled dynamically)

   if defined(serial_ctsinv) then
      serial_ctsinv = FALSE          -- CTS true: accept PC data
   end if

end procedure


-- Deprecated
procedure serial_init() is
   _warn "serial_init() is deprecated - please use  serial_hw_init()"
   serial_hw_init()
end procedure


-- ----------------------------------------------------------------------
-- serial_hardware compatible interface
-- ----------------------------------------------------------------------

-- Put byte in transmit buffer as pseudo variable
procedure serial_hw_data'put(byte in data) is
   var byte dummy
   dummy = serial_send_byte(data)           -- send data
end procedure


-- Return next byte from receive buffer as pseudo variable
-- Spin as long as no data available (buffer empty)
function serial_hw_data'get() return byte is
   var byte data
   while !serial_hw_read(data) loop
      -- nothing
   end loop
   return data                              -- return received data
end function

-- generic function to check if a byte is received
function serial_hw_data_available() return bit is
   return _serial_offsetrcvtail != _serial_offsetrcvhead
end function

-- generic function to check if transmit buffer is empty
function serial_hw_data_ready() return bit is
   return _serial_offsetxmthead == _serial_offsetxmttail
end function
