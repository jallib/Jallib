-- Title: USART2 hardware control
-- Author: Stef Mientki, Copyright (c) 2002..2020, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling, Rob Jansen
-- Compiler: 2.5r4
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: USART2 hardware control.
-- Routines for sending and receiving through the second [E]USART2
--
-- Notes: - See also the notes in serial_hardware library.
--        - When the physical locations of pin_TX and pin_RX are configurable for
--          a specific PIC, the device file will probably contain names like
--          pin_TX2_RC2 and pin_RX2_RC1 and another pair with other pin suffixes.
--          Depending for which pair of pins the USART is configured aliases
--          without suffixes have to be specified, like:
--              alias  pin_TX2            is  pin_TX2_RC2
--              alias  pin_RX2            is  pin_RX2_RC1
--              alias  pin_TX2_direction  is  pin_TX2_RC2_direction
--              alias  pin_RX2_direction  is  pin_RX2_RC1_direction
--

-- Aliases to get things working for PIC with different type of usarts.
if (defined(U2CON0) == TRUE) then
   alias SPBRGL2       is U2BRGL         -- Baud rate generator low byte.
   alias SPBRGH2       is U2BRGH         -- Baud rate generator high byte.
   alias TXSTA2_BRGH   is U2CON0_BRGS    -- Baud rate speed select.
   if (defined(PIE8_U2TXIE) == TRUE) then
      alias SERIAL2_TXIE2 is PIE8_U2TXIE -- Transmit interrrupt enable.
      alias SERIAL2_RCIE2 is PIE8_U2RXIE -- Receive interrupt flag.
   elsif (defined(PIE6_U2TXIE) == TRUE) then
     alias SERIAL2_TXIE2  is PIE6_U2TXIE -- Transmit interrrupt enable.
     alias SERIAL2_RCIE2  is PIE6_U2RXIE -- Receive interrupt flag.
   end if   
   alias SERIAL2_TXIF2 is U2FIFO_TXBE    -- Transmit buffer empty  
   alias SERIAL2_RCIF2 is U2FIFO_RXBE    -- Receive buffer empty.
   alias RCSTA2_SPEN   is U2CON1_ON      -- Serial port enable.
   alias TXREG2        is U2TXB          -- Transmit buffer.
   alias RCREG2        is U2RXB          -- Receive buffer.
   if (defined(BAUDCON2_BRG16) == FALSE) then
      -- Force usart_common to use 16 bit baudrate generator.
      var bit BAUDCON2_BRG16 = TRUE
   end if
elsif (defined(PIE3_RCIE2) == TRUE) then
   -- Aliases to support other PICs with classic USART, PIE3/PIR3
   alias SERIAL2_TXIE2 is PIE3_TXIE2      -- Transmit interrrupt enable
   alias SERIAL2_TXIF2 is TXSTA2_TRMT     -- Transmit buffer empty flag. 
   alias SERIAL2_RCIE2 is PIE3_RCIE2      -- Receive interrupt enable.  
   alias SERIAL2_RCIF2 is PIR3_RCIF2      -- Receive buffer empty flag.  
elsif (defined(PIE4_RCIE2) == TRUE) then
   -- Aliases to support other PICs with classic USART, PIE4/PIR4
   alias SERIAL2_TXIE2 is PIE4_TXIE2     -- Transmit interrrupt enable.   
   alias SERIAL2_TXIF2 is PIR4_TXIF2     -- Transmit buffer empty flag. 
   alias SERIAL2_RCIE2 is PIE4_RCIE2     -- Receive interrupt enable.  
   alias SERIAL2_RCIF2 is PIR4_RCIF2     -- Receive buffer empty flag.  
else
   _error "This library does not support this PIC, please report)"
end if

include usart2_common

-- -----------------------------------------------------------------------
-- Title:     Initialize second serial port
-- Arguments: (none)
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw2_init() is

   if (defined(U2CON0)== TRUE) then
      -- New USART type
      U2CON0 = 0b0000_0000                  -- reset, 8 databits, async
      U2CON1 = 0b0000_0000                  -- disable, normal operation
      U2CON2 = 0b0000_0000                  -- one stop bit, flow control is off

      _calculate_and_set_baudrate2()         -- transmit and receive speed

      SERIAL2_TXIE2 = DISABLED                -- Disable all USART interrupts,
      SERIAL2_RCIE2 = DISABLED                -- including error interrupts.
      U2ERRIE = 0b0000_0000
      U2UIR   = 0b0000_0000

      pin_RX2_direction = INPUT             -- make receive pin input
      pin_TX2_direction = OUTPUT            -- make transmit pin output

      U2CON0_TXEN = TRUE                    -- Enable transmitter
      U2CON0_RXEN = TRUE                    -- Enable receive
      U2CON1_ON   = TRUE                    -- Enable serial port
   else
      -- Classic USART type
      TXSTA2 = 0b0000_0000                  -- reset (8 bit, async)
      RCSTA2 = 0b0000_0000                  -- reset (8 bit, async)

      _calculate_and_set_baudrate2()        -- transmit and receive speed

      SERIAL2_RCIE2 = DISABLED              -- disable receive interrupts
      SERIAL2_TXIE2 = DISABLED              -- disable transmit interrupts

      pin_RX2_direction = INPUT             -- make receive pin input
      pin_TX2_direction = INPUT             -- make transmit pin input!
      -- (required by some older ..
      --  .. PICs like 16f628)

      TXSTA2_TXEN = TRUE                    -- Enable transmitter
      -- (makes transmit pin output)

      RCSTA2_SPEN = enabled                 -- activate serial port
      RCSTA2_CREN = enabled                 -- continuous receive
   end if
end procedure



-- -----------------------------------------------------------------------
-- Title:     Disable USART2
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Allows pins to be used (temporary) for other purposes.
--            USART can be enabled again by calling serial_hw2_enable()
-- -----------------------------------------------------------------------
procedure serial_hw2_disable() is
   while !SERIAL2_TXIF2 loop end loop     -- wait while transmission pending
   RCSTA2_SPEN = FALSE                    -- disable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Enable USART2
-- Arguments: (none)
-- Returns:   (nothing)
-- Title:     Re-enable USART after use of serial_hw2_disable()
-- -----------------------------------------------------------------------
procedure serial_hw2_enable() is
   RCSTA2_SPEN = TRUE                   -- enable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit character
-- Arguments: Data (byte) to transmit
-- Returns:   (nothing)
-- Notes:     Hardware transmit buffer must be empty, wait if necessary
-- -----------------------------------------------------------------------
procedure serial_hw2_write(byte in data) is
   while !SERIAL2_TXIF2 loop  end loop   -- wait while transmission pending
   TXREG2 = data                        -- transfer data
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit word
-- Arguments: Data (word) to transmit
-- Returns:   (nothing)
-- Notes:     Send word as 2 bytes, Most Significant Byte first.
--            See also serial_hw_write()
-- -----------------------------------------------------------------------
procedure serial_hw2_write_word(word in data) is
   var byte dx[2] at data                -- overlay
   serial_hw2_write(dx[1])
   -- necessary for good optimized compiler, loading of TXREG2 doesn't
   -- immediately set TX2IF
   asm nop
   serial_hw2_write(dx[0])
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- Notes:     Using this inline function for serial_hw_data'get saves a stack level
--            With overrun error the USART is reset (error(?)byte is returned!)
-- -----------------------------------------------------------------------
function _serial_hw2_read(byte out data) return bit is
   pragma inline
   if (defined(U2CON0) == TRUE) then
      -- New USART type

      if !SERIAL2_RCIF2 then           -- check if data available
         data = RCREG2                 -- pass received byte to caller
      else
         return FALSE                  -- no data available
      end if

      if U2ERRIR_FERIF | U2ERRIR_RXFOIF | U2ERRIR_RXBKIF | U2ERRIR_PERIF then
         -- reset framing and/or overflow errors
         U2ERRIR_FERIF  = FALSE
         U2ERRIR_RXFOIF = FALSE
         U2ERRIR_RXBKIF = FALSE
         U2ERRIR_PERIF  = FALSE
         U2FIFO_RXBE = TRUE            -- clear receive bufer
         return FALSE
      end if

      return TRUE
   else
      -- Classic USART type

      if SERIAL2_RCIF2 then             -- check if data available
         data = RCREG2                  -- pass received byte to caller
         SERIAL2_RCIF2 = FALSE          -- eur@fiwhex.nl 12-sept-08
      else
         return FALSE                  -- no data available
      end if

      if RCSTA2_OERR then              -- reset USART after overrun
         RCSTA2_CREN = FALSE
         RCSTA2_CREN = TRUE
      end if

      return TRUE
   end if
end function


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- -----------------------------------------------------------------------
function serial_hw2_read(byte out data) return bit is
   return _serial_hw2_read(data)
end function


-- -----------------------------------------------------------------------
-- Title:     Transmit byte
-- Arguments: Data (byte) to be transmitted
-- Returns:   (nothing)
-- Notes:     This pseudo variable allows a language construct like
--              serial_hw2_data = <byte>
--            to transmit a byte to the seial port
-- -----------------------------------------------------------------------
procedure serial_hw2_data'put(byte in data) is
   serial_hw2_write(data)
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   Data (byte) received
-- Notes:     This pseudo variable allows a language construct like
--              databyte = serial_hw2_data
--            to receive a byte from the serial port into variable 'databyte'
-- -----------------------------------------------------------------------
function serial_hw2_data'get() return byte is
   var byte data
   while !_serial_hw2_read(data) loop  end loop
   return data
end function


-- -----------------------------------------------------------------------
-- raw interface
-- -----------------------------------------------------------------------

-- generic (pic-independent) variable to check if a byte is received
function serial_hw2_data_available() return bit is
   if (defined(U2CON0) == TRUE) then
      -- New USART type
     return !SERIAL2_RCIF2
   else
      -- Classic USART type
      return SERIAL2_RCIF2
    end if
end function


-- generic (pic-independent) variable to check if transmit buffer is empty
function serial_hw2_data_ready() return bit is
   return SERIAL2_TXIF2
end function

-- These are real raw procedures, declared as pseudo variables
-- the user is totally responsible for testing the transmit/receive
-- flag before using these functions
procedure serial_hw2_data_raw'put(byte in data) is
   TXREG2 = data
end procedure

function serial_hw2_data_raw'get() return byte is
   return RCREG2
end function

