-- ---------------------------------------------------------------------------
-- Title: Support for builtin RealTimeClockCalendar (RTCC) module of 18FxxJxx.
--
-- Author: Rob Hamerling, Copyright (c) 2010..2015, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q3
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- RealTimeClock support:
--   - Routines for control of the buitin Realtime Clock Calendar module of 
--     18fxxj11, 18fxxj50 and other smilar PICs.
-- .
-- his library provides the device specific interface for the services 
-- defined in the rtc_common library, ic functions and procedures for
-- the realtime clock time and date services.
-- in addition it contains procedures and functions for the alarm and 
-- some other facilities of the RTCC module, like:
-- .
--   - rtc_set_alarm()              -- enable/disable alarm
--   - rtc_get_alarm_date_bcd()     -- alarm month,day (bcd), no year!
--   - rtc_set_alarm_date_bcd()
--   - rtc_get_alarm_time_bcd()     -- alarm hour,minute,second (bcd)
--   - rtc_set_alarm_time_bcd()
--   - rtc_set_alarm_interval()     -- alarm interval (binary)
--   - rtc_set_alarm_repeat()       -- alarm repeat (binary)
--   - rtc_set_clock()              -- enable/disable RTCC module
--   - rtc_calibrate()              -- compensate crystal frequency aberration
--   - rtc_pin_signal()             -- RTCC output pin signal control
-- .
--
-- NOTES: - This library assumes that a 32768 Hz crystal is connected to
--          the T1OSI/T1OSO pins. Therefore the application program should
--          specify the RTCC oscillator source configuration bits as:
--              pragma target RTCOSC T1OSC
--
-- ===  include the common realtime clock library ===
--
const RTC_HW = 0                                -- identification: RTCC module of PIC
include rtc_common                              -- device independent services
--
-- ======================================================================
--  RTCC library internal functions and procedures (not for user programs)
-- ======================================================================
--
-- ----------------------------------------------------------------------
-- Enable or disable RTCC register writes.
-- input: bit (enable / disable)
-- output: none
-- returns: nothing
-- notes:  (Re)setting the RTCWREN bit in RTCCFG requires a strict
--         sequence, see datasheets for details.
-- ----------------------------------------------------------------------
procedure rtc_write_control_(bit in control) is
   if (control == enabled) then
      asm bank RTCCFG                           -- set bank of RTCCFG
      EECON2 = 0x55                             -- ) write ..
      EECON2 = 0xAA                             -- ) .. enable
      RTCCFG_RTCWREN = enabled                  -- allow writes
   else
      asm bank RTCCFG                           -- set bank of RTCCFG
      EECON2 = 0x55                             -- ) write ..
      EECON2 = 0xAA                             -- ) .. enable
      RTCCFG_RTCWREN = disabled                 -- deny writes
   end if
end procedure

-- ----------------------------------------------------------------------
-- Wait for the proper moment to read the clock 
-- ----------------------------------------------------------------------
procedure rtc_read_sync_() is
   if (RTCCFG_RTCEN == enabled) then            -- rtcc running
      while (RTCCFG_RTCSYNC == true) loop       -- wait for safe read
      end loop
   end if
end procedure   

-- ----------------------------------------------------------------------
-- Title: Write a byte to the RTCC module.
-- input: - bit*2 mask determining the entity
--        - bit determining high or low byte of RTCVAL (LOW = 0, HIGH = 1)
--        - byte with vale to be written (bcd notation)  
-- Notes: - Writes are nrmally disabled, but here enabled when needed
--          and disabled again before returning to caller.
-- ----------------------------------------------------------------------
procedure rtc_write_sync_(bit*2 in mask, bit in hl, byte in value) is
   var bit mask0 at mask : 0
   var bit mask1 at mask : 1 
   var bit old_rtcc_state = RTCCFG_RTCEN        -- remember current state
   if (RTCCFG_RTCEN == enabled) then            -- rtcc running
      while (RTCCFG_RTCSYNC == true) loop       -- wait for safe write
      end loop
   end if
   rtc_write_control_(ENABLED)                  -- enable writes
   RTCCFG_RTCEN = false                         -- disable rtc
   RTCCFG_RTCPTR0 = mask0                       -- ) init RTCVAL pointer
   RTCCFG_RTCPTR1 = mask1                       -- )            
   if (hl == HIGH) then
      RTCVALH = value
   else
      RTCVALL = value
   end if   
   rtc_write_control_(DISABLED)                 -- set write protected
   RTCCFG_RTCEN = old_rtcc_state                -- restore rtcc start
end procedure
 
   
-- ======================================================================
--  Services for the rtc_common library
-- ======================================================================
--   
-- ----------------------------------------------------------------------
-- Read second
-- ---------------------------------------------------------------------
function rtc_read_second() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 0                           -- ) RTCVAL pointer min/sec
   RTCCFG_RTCPTR0 = 0                           -- )
   return RTCVALL                               -- second
end function

-- ----------------------------------------------------------------------
-- Read minute
-- ---------------------------------------------------------------------
function rtc_read_minute() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 0                           -- ) RTCVAL pointer min/sec
   RTCCFG_RTCPTR0 = 0                           -- )
   return RTCVALH                               -- minute
end function

-- ----------------------------------------------------------------------
-- Read hour
-- ---------------------------------------------------------------------
function rtc_read_hour() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 0                           -- ) RTCVAL pointer hour/weekday
   RTCCFG_RTCPTR0 = 1                           -- )
   return RTCVALL                               -- hour
end function

-- ----------------------------------------------------------------------
-- Read day of month
---------------------------------------------------------------------
function rtc_read_dayofmonth() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 1                           -- ) RTCVAL pointer day/month
   RTCCFG_RTCPTR0 = 0                           -- )
   return RTCVALL                               -- day
end function

-- ----------------------------------------------------------------------
-- Read month
---------------------------------------------------------------------
function rtc_read_month() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 1                           -- ) RTCVAL pointer day/month
   RTCCFG_RTCPTR0 = 0                           -- )
   return RTCVALH                               -- month
end function

-- ----------------------------------------------------------------------
-- Read year
---------------------------------------------------------------------
function rtc_read_year() return byte is
   rtc_read_sync_()
   RTCCFG_RTCPTR1 = 1                           -- ) RTCVAL pointer year/reserved
   RTCCFG_RTCPTR0 = 1                           -- )
   return RTCVALL                               -- year
end function

-- ----------------------------------------------------------------------
-- Write second
---------------------------------------------------------------------
procedure rtc_write_second(byte in second) is
   rtc_write_sync_(0b00, LOW, second) 
end procedure

-- ----------------------------------------------------------------------
-- Write minute
---------------------------------------------------------------------
procedure rtc_write_minute(byte in minute) is
   rtc_write_sync_(0b00, HIGH, minute) 
end procedure

-- ----------------------------------------------------------------------
-- Write hour
---------------------------------------------------------------------
procedure rtc_write_hour(byte in hour) is
   rtc_write_sync_(0b01, LOW, hour) 
end procedure

-- ------------------------------------------------------------------
-- Write dayofmonth
---------------------------------------------------------------------
procedure rtc_write_dayofmonth(byte in dayofmonth) is
   rtc_write_sync_(0b10, LOW, dayofmonth) 
end procedure

-- ----------------------------------------------------------------------
-- Write month
---------------------------------------------------------------------
procedure rtc_write_month(byte in month) is
   rtc_write_sync_(0b10, HIGH, month) 
end procedure

-- ----------------------------------------------------------------------
-- Write year
---------------------------------------------------------------------
procedure rtc_write_year(byte in year) is
   rtc_write_sync_(0b11, LOW, year) 
end procedure


-- ======================================================================
-- Alarm services 
-- ======================================================================

-- ----------------------------------------------------------------------
-- Enable or disable alarm
-- input:   alarm_state (bit): true  - enable alarm
--                           false - disable alarm
-- output:  none
-- returns: (nothing)
-- ----------------------------------------------------------------------
procedure rtc_set_alarm(bit in state) is
   rtc_read_sync_()                             -- wait for a proper moment
   ALRMCFG_ALRMEN = state                       -- enable/disable alarm
end procedure

-- ----------------------------------------------------------------------
-- Read alarm time
-- input:   none
-- output:  alarm hour, minute, second (bcd format)
-- returns: (nothing)
-- notes:   read alarm registers into user variables
-- ----------------------------------------------------------------------
procedure rtc_get_alarm_time_bcd(byte out hh, byte out mm, byte out ss) is
   ALRMCFG_ALRMPTR1 = 0                         -- ) init ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 1                         -- )
   hh = ALRMVALL                                -- read hour
   ALRMCFG_ALRMPTR0 = 0                         -- decrement pointer
   ss = ALRMVALL                                -- read second
   mm = ALRMVALH                                -- read minute
end procedure

-- ----------------------------------------------------------------------
-- Read alarm date
-- input:   none
-- output:  alarm month, dayofmonth, dayofweek (bcd format)
-- returns: (nothing)
-- notes: read alarm registers into local variables
-- ----------------------------------------------------------------------
procedure rtc_get_alarm_date_bcd(byte out mm, byte out dom, byte out dow) is
   ALRMCFG_ALRMPTR1 = 1                         -- ) init ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 0                         -- )
   dom = ALRMVALL                               -- read day of month
   mm  = ALRMVALH                               -- read month (and decr. pointer)
   dow = ALRMVALH                               -- read day of week 
end procedure

-- ----------------------------------------------------------------------
-- Write alarm time 
-- input:   alarm hour, minute, second (bcd format)
-- output:  none
-- returns: (nothing)
-- notes:   - disable alarm, modify alarm registers, restore alarm
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_time_bcd(byte in hh, byte in mm, byte in ss) is
   var  bit  old_alarm_state = ALRMCFG_ALRMEN   -- remember current state
   ALRMCFG_ALRMEN  = disabled                   -- disable alarm
   ALRMCFG_ALRMPTR1 = 0                         -- ) init ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 1                         -- )
   ALRMVALL = hh                                -- write hour
   ALRMCFG_ALRMPTR0 = 0                         -- decrement pointer
   ALRMVALL = ss                                -- write minute
   ALRMVALH = mm                                -- write second
   ALRMCFG_ALRMEN = old_alarm_state             -- restore alarm state
end procedure

-- ----------------------------------------------------------------------
-- Write alarm date 
-- input:   alarm month, dayofmonth, dayofweek
-- output:  none
-- returns: (nothing)
-- notes:   - disable alarm, write alarm registers,  restore alarm state
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_date_bcd(byte in mm, byte in dom, byte in dow) is
   var  bit  old_alarm_state = ALRMCFG_ALRMEN   -- remember current state
   ALRMCFG_ALRMEN  = disabled                   -- disable alarm
   ALRMCFG_ALRMPTR1 = 1                         -- ) init ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 0                         -- )
   ALRMVALL = dom                               -- write day of month
   ALRMVALH = mm                                -- write month (and decr. ptr)
   ALRMVALH = dow                               -- write day of week 
   ALRMCFG_ALRMEN = old_alarm_state             -- restore alarm state
end procedure

-- ----------------------------------------------------------------------
-- Set alarm interval.
-- input:   alarm_interval with a RTC_ALARM_INTERVAL_xxxx mask
--          (see the defined RTC_ALARM_INTERVAL_xxxx masks above)
-- output:  none
-- returns: (nothing)
-- ---------------------------------------------------------------------
-- RTCC alarm repetition interval masks
const  byte  RTC_ALARM_INTERVAL_HALFSECOND  = 0b0000
const  byte  RTC_ALARM_INTERVAL_SECOND      = 0b0001
const  byte  RTC_ALARM_INTERVAL_TENSECONDS  = 0b0010
const  byte  RTC_ALARM_INTERVAL_MINUTE      = 0b0011
const  byte  RTC_ALARM_INTERVAL_TENMINUTES  = 0b0100
const  byte  RTC_ALARM_INTERVAL_HOUR        = 0b0101
const  byte  RTC_ALARM_INTERVAL_DAY         = 0b0110
const  byte  RTC_ALARM_INTERVAL_WEEK        = 0b0111
const  byte  RTC_ALARM_INTERVAL_MONTH       = 0b1000
const  byte  RTC_ALARM_INTERVAL_YEAR        = 0b1001
   
procedure rtc_set_alarm_interval(byte in interval) is
   if (interval <= RTC_ALARM_INTERVAL_YEAR) then  -- valid interval mask
      rtc_read_sync_()                           -- wait for a proper moment
      ALRMCFG_AMASK = interval                  -- set alarm interval
   end if
end procedure

-- ----------------------------------------------------------------------
-- Set alarm repetition.
-- input:   repeats: number of times to repeat alarm signal (binary)
-- output:  none
-- returns: (nothing)
-- notes:   The following will happen after an alarm condition:
--          - with repeat value 0 there will be 1 alarm event
--          - with repeat values 1..254 there will be as many more alarm
--            events as specified with <repeats>
--            (at intervals specified with rtc_set_alarm_interval() )
--          - with repeat value 255 there will be indefinite alarm events
--          The ALRMCFG_ALRMEN bit will be cleared after the last alarm event
--          (thus never with repeat value 255).
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_repeat(byte in repeats) is
   rtc_read_sync_()
   ALRMRPT = repeats                            -- number of alarm repeats
   if (repeats == 255) then
      ALRMCFG_CHIME = TRUE                      -- repeat alarm event indefinitely
   else
      ALRMCFG_CHIME = FALSE                     -- limited repeats (0..254)
   end if
end procedure



-- ======================================================================
-- Additional services of RTCC module
-- ======================================================================

-- ----------------------------------------------------------------------
-- Select the RTCC output pin signal functionality.
-- input: 2-bits mask: one of the RTC_PIN_xxxx constants (see above)
-- output: none
-- returns: nothing
-- notes: - With 'NONE' pin_RTCC is released and available for I/O
--        - See the datasheet for the meaning of the different masks.
-- ----------------------------------------------------------------------
-- RTCC pin function masks
const  bit*2  RTC_PIN_ALARM        =  0b00
const  bit*2  RTC_PIN_SECONDS      =  0b01
const  bit*2  RTC_PIN_SOURCE_CLOCK =  0b10
const  bit*2  RTC_PIN_NONE         =  0b11     -- (disable RTCC pin)

procedure rtc_pin_signal(bit*2 in pin_signal_selection_mask) is
   rtc_write_control_(enabled)                  -- allow writing RTC registers
   if (pin_signal_selection_mask == RTC_PIN_NONE) then
      RTCCFG_RTCOE = false                      -- free the RTCC pin
   else
      RTCCFG_RTCOE = true                       -- enable RTCC output
      PADCFG1_RTSECSEL = pin_signal_selection_mask  -- select pin signal
   end if
   rtc_write_control_(disabled)                 -- ignore writes to RTC registers
end procedure

-- ----------------------------------------------------------------------
-- Calibrate the RTCC module.
-- input: calibration value
-- output: none
-- returns: nothing
-- note: Calibration value is a signed byte  (-128..+127).
--       A negative value must be specified when the crystal is too fast.
--       See datasheet for the calculation of the amount.
-- ----------------------------------------------------------------------
procedure rtc_calibrate(sbyte in calibration) is
   var bit old_rtcc_state = RTCCFG_RTCEN        -- save current state
   rtc_write_control_(enabled)                  -- allow writing RTC registers
   RTCCFG_RTCEN = disabled                      -- disable RTCC
   RTCCAL = byte(calibration)                   -- set calibration amount
   RTCCFG_RTCEN = old_rtcc_state                -- restore state of entry
   rtc_write_control_(disabled)                 -- ignore writes to RTC registers
end procedure

-- ----------------------------------------------------------------------
-- Enable or disable the RTCC module.
-- input: none
-- output: none
-- returns: nothing
-- notes: The T1 oscillator is enable/disabled too!
-- ----------------------------------------------------------------------
procedure rtc_set_clock(bit in state) is
   var  bit  old_gie_state = INTCON_GIE         -- GIE bit state of caller
   INTCON_GIE = disabled                        -- temporary disable interrupts
   rtc_write_control_(enabled)                  -- allow writing RTC registers
   T1CON_T1OSCEN = state                        -- enable/disable Timer1 oscillator
   RTCCFG_RTCEN = state                         -- enable/disable RTCC module
   rtc_write_control_(disabled)                 -- ignore writes to RTC registers
   INTCON_GIE = old_gie_state                   -- restore interrupt state
end procedure



