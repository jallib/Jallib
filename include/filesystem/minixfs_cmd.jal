-- Title: Minix v2 filesystem, usefull yet optional commands
-- Author: Sebastien Lelong, Copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4o
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: As a (optional) bonus, this library provides useful commands while
-- dealing with MinixFS, like printing file's content, print super block, etc...
-- Some require prior definition of "minix_print_carrier" pseudo-var definition,
-- used to actually display data (typically serial_hw_data, usb_serial_data, etc...)
-- If not defined, others can still be used.
-- Careful, using these commands can cost a lot of resources...
--

if defined(minix_print_carrier) then

include print

-- Messages
procedure minix_dev_print_super_block() is

   const byte STR_READ_SUPER_BLOCK[] = "Super Block"
   const byte STR_NUMBER_OF_NODES[] = "# nodes: "
   const byte STR_NUMBER_OF_ZONES_V1[] = "# zones (v1): "
   const byte STR_NUMBER_OF_INODE_BITMAP_BLOCKS[] = "# inode bitmap blocks: "
   const byte STR_NUMBER_OF_ZONE_BITMAP_BLOCKS[] = "# zone bitmap blocks: "
   const byte STR_1ST_DATA_ZONE [] = "@ 1st data zone: "
   const byte STR_MAX_FILE_SIZE [] = "Max file size: "
   const byte STR_MAGIC_NUMBER[] = "Magic #: "
   const byte STR_NUMBER_OF_ZONES_V2[] = "# zones (v2): "
   const byte STR_1ST_INODE_BP_BLOCK[] = "@ 1st inode bitmap block: "
   const byte STR_1ST_ZONE_BP_BLOCK[] = "@ 1st zone bitmap block: "
   const byte STR_1ST_INODE_BLOCK[] = "@ 1st inode block: "
   const byte STR_LAST_ZONE_BITMAP_BLOCK[] = "Last zone bitmap block: "
   const byte STR_LAST_ZONE_BITMAP_BYTE[] = "Last zone bitmap byte: "
   const byte STR_LAST_FULL_ZONE[] = "# last full zone: "
   const byte STR_CURRENT_ZONE_BITS[] = "current zone bits: "
   const byte STR_LAST_ALLOC_ZONE_ADDRESS[] = "@ last allocated zone:"

   print_string(minix_print_carrier,STR_READ_SUPER_BLOCK)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUMBER_OF_NODES)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.num_inodes)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUMBER_OF_ZONES_V1)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.num_zones_v1)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUMBER_OF_INODE_BITMAP_BLOCKS)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.num_inode_bitmap_blocks)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUMBER_OF_ZONE_BITMAP_BLOCKS)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.num_zone_bitmap_blocks)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_1ST_DATA_ZONE)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.first_data_zone)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_MAX_FILE_SIZE)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.max_file_size)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_MAGIC_NUMBER)
   minix_print_carrier = "h"
   print_word_hex(minix_print_carrier,minix_sb.magic_number)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUMBER_OF_ZONES_V2)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.num_zones_v2)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_1ST_INODE_BP_BLOCK)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.first_inode_bitmap_block)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_1ST_ZONE_BP_BLOCK)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.first_zone_bitmap_block)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_1ST_INODE_BLOCK)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.first_inode_block)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_LAST_ZONE_BITMAP_BLOCK)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.last_zone_bitmap_block)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_LAST_ZONE_BITMAP_BYTE)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.last_zone_bitmap_byte)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_LAST_FULL_ZONE)
   print_dword_dec(minix_print_carrier,minix_sb.last_full_zone)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_CURRENT_ZONE_BITS)
   print_byte_bin(minix_print_carrier,minix_sb.zone_current_bits)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_LAST_ALLOC_ZONE_ADDRESS)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_sb.last_alloc_zone_address)
   print_crlf(minix_print_carrier)

end procedure

procedure minix_dev_print_error() is
   const byte STR_ERROR[] = "Error # "
   print_string(minix_print_carrier,STR_ERROR)
   print_byte_bin(minix_print_carrier,minix_last_error)
   print_crlf(minix_print_carrier)
end procedure

procedure minix_dev_print_inode() is
   const byte STR_INODE[] = "Inode #"
   const byte STR_MODE_FILETYPES[] = "Filetype: "
   const byte STR_MODE_FILE[] = "file"
   const byte STR_MODE_DIR[] = "dir"
   const byte STR_MODE_SYMLINK[] = "symlink"
   const byte STR_MODE_WHAT[] = "dunno"
   const byte STR_MODE_PERMS[] = "Permissions: "
   const byte STR_MODE_PERM_ALL[] = " - all: "
   const byte STR_MODE_PERM_USER[] = " - user: "
   const byte STR_MODE_PERM_GROUP[] = " - group: "
   const byte STR_MODE_PERM_OTHER[] = " - other: "
   const byte STR_NUM_LINKS[] = "# links: "
   const byte STR_UID[] = "UID: "
   const byte STR_GID[] = "GID: "
   const byte STR_FILESIZE[] = "File size: "
   const byte STR_ATIME[] = "Acess time: "
   const byte STR_MTIME[] = "Modification time: "
   const byte STR_CTIME[] = "Status change time: "
   const byte STR_ZONE0[] = "Zone 0: "
   const byte STR_ZONE1[] = "Zone 1: "
   const byte STR_ZONE2[] = "Zone 2: "
   const byte STR_ZONE3[] = "Zone 3: "
   const byte STR_ZONE4[] = "Zone 4: "
   const byte STR_ZONE5[] = "Zone 5: "
   const byte STR_ZONE6[] = "Zone 6: "
   const byte STR_IND_ZONE[] = "Indirect Zone: "
   const byte STR_DBL_IND_ZONE[] = "Double indirect Zone: "
   ;;const byte STR_TRPL_IND_ZONE[] = "Triple indirect Zone: "

   print_string(minix_print_carrier,STR_INODE)
   print_word_dec(minix_print_carrier,minix_filefd.inode.id)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_MODE_FILETYPES)
   if minix_filefd.inode.mode.isfile then
      print_string(minix_print_carrier,STR_MODE_FILE)
   elsif minix_filefd.inode.mode.isdir then
      print_string(minix_print_carrier,STR_MODE_DIR)
   elsif minix_filefd.inode.mode.issymlink then
      print_string(minix_print_carrier,STR_MODE_SYMLINK)
   else
      print_string(minix_print_carrier,STR_MODE_WHAT)
   end if
   minix_print_carrier = " "
   minix_print_carrier = "("
   print_word_dec(minix_print_carrier,minix_filefd.inode.mode.filetype)
   minix_print_carrier = ")"
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_MODE_PERMS)
   print_crlf(minix_print_carrier)
   print_string(minix_print_carrier,STR_MODE_PERM_ALL)
   print_byte_dec(minix_print_carrier,minix_filefd.inode.mode.all)
   print_crlf(minix_print_carrier)
   print_string(minix_print_carrier,STR_MODE_PERM_USER)
   print_byte_dec(minix_print_carrier,minix_filefd.inode.mode.user)
   print_crlf(minix_print_carrier)
   print_string(minix_print_carrier,STR_MODE_PERM_GROUP)
   print_byte_dec(minix_print_carrier,minix_filefd.inode.mode.group)
   print_crlf(minix_print_carrier)
   print_string(minix_print_carrier,STR_MODE_PERM_OTHER)
   print_byte_dec(minix_print_carrier,minix_filefd.inode.mode.other)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_NUM_LINKS)
   print_word_dec(minix_print_carrier,minix_filefd.inode.num_links)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_UID)
   print_word_dec(minix_print_carrier,minix_filefd.inode.uid)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_GID)
   print_word_dec(minix_print_carrier,minix_filefd.inode.gid)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_FILESIZE)
   print_dword_dec(minix_print_carrier,minix_filefd.inode.filesize)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ATIME)
   print_dword_dec(minix_print_carrier,minix_filefd.inode.atime)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_MTIME)
   print_dword_dec(minix_print_carrier,minix_filefd.inode.mtime)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_CTIME)
   print_dword_dec(minix_print_carrier,minix_filefd.inode.ctime)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE0)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[0])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE1)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[1])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE2)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[2])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE3)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[3])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE4)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[4])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE5)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[5])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_ZONE6)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.zone[6])
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_IND_ZONE)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.indirect_zone)
   print_crlf(minix_print_carrier)

   print_string(minix_print_carrier,STR_DBL_IND_ZONE)
   minix_print_carrier = "h"
   print_dword_hex(minix_print_carrier,minix_filefd.inode.double_indirect_zone)
   print_crlf(minix_print_carrier)

end procedure

procedure minix_print_dir_entry(minix_dir_entry in entry) is
   print_word_dec(minix_print_carrier,entry.inode_num)
   minix_print_carrier = " "

   -- assuming at least one char in filename...
   var byte counter
   var byte char
   for MINIX_MAX_FILENANE_LEN using counter loop
      char = entry.filename[counter]
      if char != 0x00 then
         minix_print_carrier = char
      else
         exit loop
      end if
   end loop

end procedure

procedure minix_cati(word in inode_num) is
   minix_openi(inode_num,MINIX_MODE_READ)
   while minix_filefd.read != minix_filefd.inode.filesize loop
      minix_print_carrier = minix_read()
   end loop
   minix_close()
end procedure

procedure minix_cat(byte in filename[MINIX_MAX_FILENANE_LEN]) is
   var word inode_num = minix_find_in_cwd(filename)
   if inode_num != 0 then
      minix_cati(inode_num)
   end if
end procedure

-- parially print content. When content is changing, display
-- zone_type|zone_idx|zone_dbl_idx|zone_content_idx|address|indirect|dbl_indirect|read/filesize
-- and then one content char
procedure minix_dev_cati(word in inode_num) is
   var byte char = 0
   var byte charprev = 0
   minix_openi(inode_num,MINIX_MODE_READ)
   while minix_filefd.read != minix_filefd.inode.filesize loop
      char = minix_read()
      if char != charprev then
         charprev = char
         print_byte_bin(minix_print_carrier,minix_filefd.inode.zone_type)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_word_hex(minix_print_carrier,minix_filefd.inode.zone_idx)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_word_hex(minix_print_carrier,minix_filefd.inode.zone_dbl_idx)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_word_hex(minix_print_carrier,minix_filefd.inode.zone_content_idx)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_dword_hex(minix_print_carrier,minix_curzone)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_dword_hex(minix_print_carrier,minix_filefd.inode.indirect_zone)
         minix_print_carrier = "|"
         minix_print_carrier = "h"
         print_dword_hex(minix_print_carrier,minix_filefd.inode.double_indirect_zone)
         minix_print_carrier = "|"
         print_dword_dec(minix_print_carrier,minix_filefd.read)
         minix_print_carrier = "/"
         print_dword_dec(minix_print_carrier,minix_filefd.inode.filesize)
         minix_print_carrier = "|"
         print_word_dec(minix_print_carrier,sd_byte_count)
         minix_print_carrier = " "
         minix_print_carrier = char
         minix_print_carrier = "="
         print_byte_dec(minix_print_carrier,char)
         print_crlf(minix_print_carrier)
      end if
   end loop
   minix_close()
end procedure

procedure minix_dev_cat(byte in filename[MINIX_MAX_FILENANE_LEN]) is
   var word inode_num = minix_find_in_cwd(filename)
   if inode_num != 0 then
      minix_dev_cati(inode_num)
   end if
end procedure

procedure minix_lsi(word in inode_num) is
   minix_openi(inode_num,MINIX_MODE_READ)
   if minix_filefd.inode.mode.isdir == true then
      var minix_dir_entry entry
      entry = minix_next_entry
      while entry.inode_num != 0 loop
         minix_print_dir_entry(entry)
         print_crlf(serial_hw_data)
         entry = minix_next_entry
      end loop
   else
      minix_dev_print_inode()
   end if
   minix_close()
end procedure

procedure minix_ls(byte in filename[MINIX_MAX_FILENANE_LEN]) is
   if filename[0] != 0 then
      var word inode_num = minix_find_in_cwd(filename)

      if inode_num != 0 then
         minix_lsi(inode_num)
      end if
   else
      -- listing CWD
      minix_lsi(minix_cwd)
   end if
end procedure

end if

