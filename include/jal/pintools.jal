-- Title: Manipulate pins (level, mode) by variable settings.
-- Author: Sebastien Lelong, Copyright (C) 2009, all rights reserved.
-- Adapted-by: Rob Hamerling
--            (improved memory usage and hardware stack levels; support for more ports).
-- Compiler: 2.4q3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library provides a set of functions and procedures
-- to help users manipulating pins. For instance, you can dynamically access pins
-- using a specific mapping (RA0 is #0, RB1 is #2, etc...) and act on levels and
-- directions.
-- .
-- Using this library requires that an array "pintools_map" is defined before
-- including the library. This byte array is populated by pairs of elements:
--  * the first element of a pair corresponds to the port letter ("A", "B", ...)
--  * the second element of a pair is the pin number in this port (0, 1, 2, ...)
-- Pins can then be accessed with their index in this array.
-- Example: const byte pintools_map[] = { "A",1, "B",1, "D",3 }
-- This 6 elements array (of 3 pairs) specifies that:
--  * pin #0 refers to pin_A1
--  * pin #1 refers to pin_B1
--  * pin #2 refers to pin_D3
-- Example of use:
--  * To obtain the current level of pin_B1:
--      pin_level = pintools_level[1]
--  * To set the direction of pin_D3 to output:
--      pintools_direction[2] = OUTPUT
--
-- Notes:
--

--------------------------------------------------------------------------------
-- Title: Set pin level
-- Usage: pintools_level[pinnum] = level           -- 0 / 1
--------------------------------------------------------------------------------
procedure pintools_level'put(byte in pinnum, bit in level) is

   var byte portletter = pintools_map[pinnum * 2]
   var byte bitnumber = pintools_map[pinnum * 2 + 1]
   var byte portmask = (1 << bitnumber)
   if (level == LOW) then
      portmask = !portmask                         -- flip all bits
   end if

   if defined(portA) then
      if (portletter == "A") then
         if (level == HIGH) then
            portA = portA | portmask
         else
            portA = portA & portmask
         end if
      end if
   end if
   if defined(portB) then
      if (portletter == "B") then
        if (level == HIGH) then
            portB = portB | portmask
         else
            portB = portB & portmask
         end if
      end if
   end if
   if defined(portC) then
      if (portletter == "C") then
        if (level == HIGH) then
            portC = portC | portmask
         else
            portC = portC & portmask
         end if
      end if
   end if
   if defined(portD) then
      if (portletter == "D") then
        if (level == HIGH) then
            portD = portD | portmask
         else
            portD = portD & portmask
         end if
      end if
   end if
   if defined(portE) then
      if (portletter == "E") then
        if (level == HIGH) then
            portE = portE | portmask
         else
            portE = portE & portmask
         end if
      end if
   end if
   if defined(portF) then
      if (portletter == "F") then
        if (level == HIGH) then
            portF = portF | portmask
         else
            portF = portF & portmask
         end if
      end if
   end if
   if defined(portG) then
      if (portletter == "G") then
        if (level == HIGH) then
            portG = portG | portmask
         else
            portG = portG & portmask
         end if
      end if
   end if
   if defined(portH) then
      if (portletter == "H") then
        if (level == HIGH) then
            portH = portH | portmask
         else
            portH = portH & portmask
         end if
      end if
   end if
   if defined(portJ) then
      if (portletter == "J") then
        if (level == HIGH) then
            portJ = portJ | portmask
         else
            portJ = portJ & portmask
         end if
      end if
   end if
   if defined(portK) then
      if (portletter == "K") then
        if (level == HIGH) then
            portK = portK | portmask
         else
            portK = portK & portmask
         end if
      end if
   end if
   if defined(portL) then
      if (portletter == "L") then
        if (level == HIGH) then
            portL = portL | portmask
         else
            portL = portL & portmask
         end if
      end if
   end if

end procedure


--------------------------------------------------------------------------------
-- Title: Get pin level
-- Usage: var bit pin_level = pintools_level[pinnum]
--------------------------------------------------------------------------------
function pintools_level'get(byte in pinnum) return bit is

   var byte portletter = pintools_map[pinnum * 2]
   var byte pinoffset = pintools_map[pinnum * 2 + 1]

   if defined(portA) then
      if (portletter == "A") then
         return (portA >> pinoffset) & 1
      end if
   end if
   if defined(portB) then
      if (portletter == "B") then
         return (portB >> pinoffset) & 1
      end if
   end if
   if defined(portC) then
      if (portletter == "C") then
         return (portC >> pinoffset) & 1
      end if
   end if
   if defined(portD) then
      if (portletter == "D") then
         return (portD >> pinoffset) & 1
      end if
   end if
   if defined(portE) then
      if (portletter == "E") then
         return (portE >> pinoffset) & 1
      end if
   end if
   if defined(portF) then
      if (portletter == "F") then
         return (portF >> pinoffset) & 1
      end if
   end if
   if defined(portG) then
      if (portletter == "G") then
         return (portG >> pinoffset) & 1
      end if
   end if
   if defined(portH) then
      if (portletter == "H") then
         return (portH >> pinoffset) & 1
      end if
   end if
   if defined(portJ) then
      if (portletter == "J") then
         return (portJ >> pinoffset) & 1
      end if
   end if
   if defined(portK) then
      if (portletter == "K") then
         return (portK >> pinoffset) & 1
      end if
   end if
   if defined(portL) then
      if (portletter == "L") then
         return (portL >> pinoffset) & 1
      end if
   end if

end function


--------------------------------------------------------------------------------
-- Title: Set pin direction
-- Usage: pintools_direction[pinnum] = direction   -- INPUT / OUTPUT
--------------------------------------------------------------------------------
procedure pintools_direction'put(byte in pinnum, bit in direction) is

   var byte portletter = pintools_map[pinnum * 2]
   var byte bitnumber = pintools_map[pinnum * 2 + 1]
   var byte portmask = (1 << bitnumber)
   if (direction == OUTPUT) then
      portmask = !portmask                         -- flip all bits
   end if

   if defined(portA) then
      if (portletter == "A") then
         if (direction == INPUT) then
            portA_direction = portA_direction | portmask
         else
            portA_direction = portA_direction & portmask
         end if
      end if
   end if
   if defined(portB) then
      if (portletter == "B") then
         if (direction == INPUT) then
            portB_direction = portB_direction | portmask
         else
            portB_direction = portB_direction & portmask
         end if
      end if
   end if
   if defined(portC) then
      if (portletter == "C") then
         if (direction == INPUT) then
            portC_direction = portC_direction | portmask
         else
            portC_direction = portC_direction & portmask
         end if
      end if
   end if
   if defined(portD) then
      if (portletter == "D") then
         if (direction == INPUT) then
            portD_direction = portD_direction | portmask
         else
            portD_direction = portD_direction & portmask
         end if
      end if
   end if
   if defined(portE) then
      if (portletter == "E") then
         if (direction == INPUT) then
            portE_direction = portE_direction | portmask
         else
            portE_direction = portE_direction & portmask
         end if
      end if
   end if
   if defined(portF) then
      if (portletter == "F") then
         if (direction == INPUT) then
            portF_direction = portF_direction | portmask
         else
            portF_direction = portF_direction & portmask
         end if
      end if
   end if
   if defined(portG) then
      if (portletter == "G") then
         if (direction == INPUT) then
            portG_direction = portG_direction | portmask
         else
            portG_direction = portG_direction & portmask
         end if
      end if
   end if
   if defined(portH) then
      if (portletter == "H") then
         if (direction == INPUT) then
            portH_direction = portH_direction | portmask
         else
            portH_direction = portH_direction & portmask
         end if
      end if
   end if
   if defined(portJ) then
      if (portletter == "J") then
         if (direction == INPUT) then
            portJ_direction = portJ_direction | portmask
         else
            portJ_direction = portJ_direction & portmask
         end if
      end if
   end if
   if defined(portK) then
      if (portletter == "K") then
         if (direction == INPUT) then
            portK_direction = portK_direction | portmask
         else
            portK_direction = portK_direction & portmask
         end if
      end if
   end if
   if defined(portL) then
      if (portletter == "L") then
         if (direction == INPUT) then
            portL_direction = portL_direction | portmask
         else
            portL_direction = portL_direction & portmask
         end if
      end if
   end if

end procedure


--------------------------------------------------------------------------------
-- Title: Get pin direction
-- Usage: var bit pin_direction = pintools_direction[pin_number]
--------------------------------------------------------------------------------
function pintools_direction'get(byte in pinnum) return bit is

   var byte portletter = pintools_map[pinnum * 2]
   var byte pinoffset = pintools_map[pinnum * 2 + 1]

   if defined(portA) then
      if (portletter == "A") then
         return (portA_direction >> pinoffset) & 1
      end if
   end if
   if defined(portB) then
      if (portletter == "B") then
         return (portB_direction >> pinoffset) & 1
      end if
   end if
   if defined(portC) then
      if (portletter == "C") then
         return (portC_direction >> pinoffset) & 1
      end if
   end if
   if defined(portD) then
      if (portletter == "D") then
         return (portD_direction >> pinoffset) & 1
      end if
   end if
   if defined(portE) then
      if (portletter == "E") then
         return (portE_direction >> pinoffset) & 1
      end if
   end if
   if defined(portF) then
      if (portletter == "F") then
         return (portF_direction >> pinoffset) & 1
      end if
   end if
   if defined(portG) then
      if (portletter == "G") then
         return (portG_direction >> pinoffset) & 1
      end if
   end if
   if defined(portH) then
      if (portletter == "H") then
         return (portH_direction >> pinoffset) & 1
      end if
   end if
   if defined(portJ) then
      if (portletter == "J") then
         return (portJ_direction >> pinoffset) & 1
      end if
   end if
   if defined(portK) then
      if (portletter == "K") then
         return (portK_direction >> pinoffset) & 1
      end if
   end if
   if defined(portL) then
      if (portletter == "L") then
         return (portL_direction >> pinoffset) & 1
      end if
   end if

end function


