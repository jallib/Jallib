-- -----------------------------------------------------------------------------
-- Title: Sample program for the Philips Remote Control Decoder using a USART
-- Author: Rob Jansen, Copyright (c) 2023..2023, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r8
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program that shows Philips Remote Control commands via 
--              the serial interface using the external interrupt of the PIC.
--              An example is also included when using a local constant
--              IOC_VERSION to use the IOC instead of the external interrupt.
-- 
-- Notes:       The 36 kHz Infra Red receiver (active low) must be connected
--              to the external interrupt pin or the used IOC pin.
--           
include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0011_1111       -- Weak pull-up on all pins.
WPUC = 0b0011_1111       -- Weak pull-up on all pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()      -- All pins digital IO
_usec_delay(250_000)     -- Give the hardware some time to stabilize.

-- Set up the serial interface.
alias pin_RX_direction is pin_RX_RC5_direction -- Pin 5 of 14 pin DIP
alias pin_TX_direction is pin_TX_RC4_direction -- Pin 6 of 14 pin DIP
const serial_hw_baudrate = 115_200
include serial_hardware                        
serial_hw_init
alias serial is serial_hw_data

include print

-- Settings for the Philips Remote Control Decoder. The decoder uses timer 1
-- which must run at 1 MHz. We use Fosc/4 and a prescaler of 1:8 to 
-- get the 1 MHz timer 1 clock since the target clock is at 32 MHz.
-- Note: When a MHz clock cannot be obtained the user must use PHILIPS_RC_SCALING.
T1CON_TMR1CS = 0b00 -- Clock source Fosc/4, gives 8 MHz.
T1CON_T1CKPS = 0b11 -- Prescaler 1:8, gives 1 MHz.
-- The following local constant is normally not required but is used here to 
-- demonstrate the use of the IOC version. If you comment this constant
-- out the Remote Control decoder will use the external interrupt (default).
-- const IOC_VERSION = TRUE
if defined(IOC_VERSION) then
   -- Set the IOC interrupt on both edges and define the and aliases 
   -- for the decoder routine. We use pin A5 in this example.
   IOCAP_IOCAP5 = TRUE -- Set ioc interrupt on positive edge
   IOCAN_IOCAN5 = TRUE -- Set ioc interrupt on negative edge.
   alias philips_rc_decoder_ioc_flag is IOCAF_IOCAF5
   -- Interupt pin using IOC.
   alias philips_rc_decoder_pin_direction is pin_a5_direction -- Pin 2 for 14 pin DIP
else
   -- Interupt pin using the external interrupt.
   alias philips_rc_decoder_pin_direction is pin_a2_direction -- Pin 11 for 14 pin DIP
end if 
-- Now we can include the library.
include philips_rc_decoder
philips_rc_decoder_init()


var word repeat_counter = 0 
var byte last_address = 255
var byte last_command = 255
var bit  last_toggle = FALSE
var bit  rc5_received = FALSE
var bit  rc6_received = FALSE

-- ------- Procedures ------------------------

-- Print the received remote control data. When data is requested
-- the remote control message received flag is cleared. 
procedure print_remote_control_data() is

   var byte command, address
   var bit toggle 

   philips_rc_get_data(toggle, address, command)
   -- If new data is received, the repeat counter is reset.
   if (last_toggle != toggle) | (last_address != address) | 
      (last_command != command) then
      repeat_counter = 0
      last_toggle = toggle
      last_address = address
      last_command = command
   else  
      repeat_counter = repeat_counter + 1
   end if 

   -- Print the contents of the RC5 or RC6 message.
   if toggle then
      print_string(serial, "Toggle bit: 1, ")
   else
      print_string(serial, "Toggle bit: 0, ")
   end if 

   print_string(serial, "Address: ")
   print_byte_dec(serial, address)

   print_string(serial, ", Command: ")
   print_byte_dec(serial, command)

   print_string(serial, ", Repeat: ")
   print_word_dec(serial, repeat_counter)
   print_crlf(serial)

end procedure

-- -------- Main program starts here -------------

print_crlf(serial)
print_string(serial,"PHILIPS RC5/RC6 MODE 0 REMOTE CONTROL DECODER.\r\n")

forever  loop 

   if philips_rc5_message_received()then
      print_string(serial, "Message: RC5, ")
      rc5_received = TRUE
      if rc6_received then
         rc6_received = FALSE
         repeat_counter = 0
      end if 
      -- Print the data. This will also clear the message received.
      print_remote_control_data() 
   elsif philips_rc6_message_received then
      print_string(serial, "Message: RC6, ")
      rc6_received = TRUE
      if rc5_received then
         rc5_received = FALSE
         repeat_counter = 0
      end if 
      -- Print the data. This will also clear the message received.
      print_remote_control_data() 
   end if 
   
end loop
