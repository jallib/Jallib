-- Title: Sample using hardware (built-in) USART.
-- Author: Sebastien Lelong, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to setup a simple serial communication link.
-- It echoes every received char.
--
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_serial_hw_echo.jal
--


-- select chip;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)


-- set all IO as digital
enable_digital_io()

-- ok, now setup serial
-- setup speed. Standard values are: 57_600, 19_200, 9_600, 2_400, ...;@jallib section serial
const serial_hw_baudrate = 115_200

-- we want to use USART/RS232, not SPI
const usart_hw_serial = true	-- true = RS232, false = SPI
-- now we can use serial_hardware module
include serial_hardware
-- initialize the whole with our parameters
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
forever loop
	if serial_hw_read(char)
	then
		serial_hw_write(char)	-- that's the echo...
	end if
end loop

