-- Title: Master part of i2c slave echo
-- Author: Sebastien Lelong, Copyright (c) 2008-2009, all rights reserved.
-- Adapted-by: Rob Hamerling
-- Compiler: 2.4n
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this test corresponds to the master part
-- of i2c hardware slave echo test (test_i2c_hardware_slave_echo.jal)
-- Both slave and master use i2c_hardware.
-- --
-- Basically, this test collects chars from a PC via a serial link,
-- and sends them to the i2c slave. It then reads the results from the slave.
-- Since the slave is supposed to echo the char + 1, if you type "a", you should
-- get "b". How great :)
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--

-- chip setup
include 18f25k22

pragma target clock         16_000_000

-- fuses
pragma target OSC           HSH           -- freq > 16 MHz
pragma target PLLEN         DISABLED      -- pll off
pragma target PCLKEN        ENABLED       -- primary clock
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED      -- power up timer
pragma target BROWNOUT      DISABLED      -- no brownout detection
pragma target VOLTAGE       V19
pragma target WDT           DISABLED      -- no watchdog
pragma target WDTPS         P32K          -- watch dog scaler setting
pragma target CCP2MUX       pin_B3        -- CCP2 output pin
pragma target PBADEN        DIGITAL       -- portb digital
pragma target CCP3MUX       pin_B5        -- CCP3 output pin
pragma target HFOFST        DISABLED
pragma target T3CKMUX       pin_C0
pragma target P2BMUX        pin_C0
pragma target MCLR          EXTERNAL      -- master reset
pragma target STVR          DISABLED      -- reset on stack over/under flow
pragma target LVP           ENABLED       -- allow low-voltage programming
pragma target XINST         DISABLED      -- no extended instruction set
pragma target DEBUG         DISABLED      -- background debugging
pragma target CP0           DISABLED      -- code block 0 not protected
pragma target CP1           DISABLED      -- code block 1 not protected
pragma target CPB           DISABLED      -- bootblock code not write protected
pragma target CPD           DISABLED      -- EEPROM not write protected
pragma target WRT0          DISABLED      -- table writeblock 0 not protected
pragma target WRT1          DISABLED      -- table write block 1 not protected
pragma target WRTC          DISABLED      -- config not write protected
pragma target WRTB          DISABLED      -- bootblock not write protected
pragma target WRTD          DISABLED      -- EEPROM not write protected
pragma target EBTR0         DISABLED      -- table read block 0 not protected
pragma target EBTR1         DISABLED      -- table read block 1 not protected
pragma target EBTRB         DISABLED      -- boot block not protected

enable_digital_io()                       -- all pins digital

-- i2c setup
const word _i2c_bus_speed = 4             -- 400kHz
const bit _i2c_level = true               -- i2c levels (not SMB)
include i2c_hardware
i2c_initialize()

const single_byte_tx_buffer = 1
var byte i2c_tx_buffer[1]
var byte i2c_rx_buffer[1]
include i2c_level1

const serial_hw_baudrate = 115_200        -- speed of serial port
include serial_hardware                   -- serial library
serial_hw_init()
-- Tell the world we're ready !
serial_hw_write("!")

var byte pc_char
var byte ic_char
-- Slave address, 8-bits long
-- The LSb bit is corresponding to read/write operation
-- It can be either 0 or 1, since it's the i2c library
-- which will handle this, not you !
-- Note: must be exactly the same as in slave's code
var byte icaddress = 0x5C                 -- slave address

forever loop
   if serial_hw_read(pc_char)
   then
      serial_hw_write(pc_char)            -- echo input from serial port
      -- transmit to slave
      -- we want to send 1 byte, and receive 1 from the slave
      i2c_tx_buffer[0] = pc_char
      var bit _trash = i2c_send_receive(icaddress, 1, 1)
      -- receive buffer should contain our result
      ic_char = i2c_rx_buffer[0]
      serial_hw_write(ic_char)            -- send input from slave to serial port
   end if
end loop

