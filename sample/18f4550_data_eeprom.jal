-- -----------------------------------------------------------------------------
-- Title: Sample data EEPROM write and read for the Microchip PIC18F4550.
-- 
-- Author: Rob Hamerling, Copyright (c) 2008..2019, all rights reserved.
-- 
-- Adapted-by: Albert Faber, Joep Suijs, Rob Jansen
-- 
-- Compiler: 2.5r3
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description:
-- Sample data EEPROM write and read for the Microchip PIC18F4550. During
-- EEPROM writing and reading the LED is blinking. After verifying all 256
-- EEPROM addresses successfully the LED should stay on. If the data read is 
-- not the same as the data written the LED will be off.            
--  
-- Sources:
-- 
-- Notes: This file is a modification of the original 18f2620_data_eeprom.jal file 
--        and adapted to better indicate if the EEPROM write and read cyles 
--        were successful using the connected LED.  
--               

-- chip setup
include 18f4550

-- Even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

pragma eedata 129,130,131,132           -- initial contents

enable_digital_io()                     -- disable analog modules

include pic_data_eeprom
-- LED IO definition
alias led             is pin_a0
alias led_direction   is pin_a0_direction
led_direction = output

var byte i,j                          
var bit led_value = ON
var bit all_ok = TRUE

led = OFF
i = 0

forever loop
    _usec_delay(100_000)                  -- wait a little

   -- As long as the led blinks all written data equals the data is read back.
   -- In case of a difference in data the led will be turned off. After a 
   -- succesfull write and read cycle of 256 bytes the LED stays on.
   if all_ok then
      led_value = !led_value      -- toggle the led
      data_eeprom_write(i,i)      -- write value
      j = data_eeprom(i)          -- read back
      if (j != i) then
         all_ok = FALSE
         led_value = OFF
      end if 
   end if
   i = i + 1

   led = led_value

   while (i == 0) loop            -- The end, led should be on if all OK.
      if all_ok then
         led = ON
      else
         led = OFF
      end if
   end loop          
 
end loop
  
