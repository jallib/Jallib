-- ----------------------------------------------------------------------------
-- Title: Test (Demo) program for startersguide (serial interface)
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
--  
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Demo program, for use in the startersguide. 
--    Much of the code in this sample is not meaningful on its own, but very 
--    useful as part of the startersguide. The most recent version of the 
--    startersguide is a featured download at https://github.com/jallib/jallib
-- 
-- Sources:
-- 
-- Notes: as output, this sample produces characters on a serial link.
--  
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4620_js.jal
--    * test : test_startersguide.jal
--

;@jallib section chipdef
-- chip setup
include 18f4620

pragma target  clock 20_000_000
pragma target  OSC        hs
pragma target  LVP enabled                         -- allow LVP
pragma target  WDT CONTROL                         -- watchdog software controlled

WDTCON_SWDTEN = OFF                                -- disable watchdog
;@jallib section led
-- LED IO definition
alias led             is pin_c5
alias led_direction   is pin_c5_direction

include delay

-- set all IO as digital
enable_digital_io()


-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- use alias for output, so it is easy to modify
-- this sample for other devices like lcd
alias sg_output is serial_hw_data

include print

led_direction = output

const byte str_header[] = "\r\n------------------------------\r\n"

-- test header procedure
procedure test_header(byte in testnr) is
   const byte str1[] = "Test nr: "

   print_string(sg_output, str_header)
   print_string(sg_output, str1)
   print_byte_dec(sg_output, testnr)
   print_crlf(sg_output)
  
end procedure

-- pseudo variable part
var byte pv_store

procedure pv'put(byte in invar) is
   pv_store = invar + 1   
end procedure

function pv'get() return byte is
   return pv_store * 2
end function

-- definition of (dummy) procedure and fuctions
procedure sgd_initialize() is
   ;
end procedure

function sgd_receive_function() return byte is      
   var byte data = 0
	;
   return data
end function

procedure sgd_receive_procedure(bit in ACK, byte in out data) is      
   data = 0
	;
end procedure

-- warning: bad programming !!
procedure find_the_bug(byte out alpha) is
   alpha = alpha + 1
end procedure

var byte   alpha  
var byte*4 bravo  
var dword  charlie 
var byte*3 delta  
var byte   echo[4] at charlie
var byte   foxtrot[10]
var byte   hotel[]   = { 1, 2, 4 }
var byte   india[]    = "foxtrot"
var bit    julia at alpha:2

const byte str1[] = "\r\n\nHello Jallib world! \\ \r\n"

var byte x

forever loop
   delay_100ms(10)
   print_string(sg_output, str1)

   sgd_initialize()
   alpha = sgd_receive_function()

   alpha   = 0b_0100_0011  -- binary 
   ;bravo   = 0q203        -- octal 
   charlie = 0x43          -- hex
   delta   = "c"           -- ascii

   -- ----------------------------
   test_header(1) -- print header
   -- ----------------------------
   
   alpha = 1
;  -- lines below are commented to keep the jallib buildbot satisfied.   
;   if (Alpha > 0) then
;      Alpha = Alpha + 1
;   end if
; 
;   If (Alpha > 0) THEN
;      ALPHA = AlPhA + 1
;   END IF

   print_byte_dec(sg_output, alpha)

   -- ----------------------------
   test_header(2) -- print header
   -- ----------------------------

   charlie = 0x12345678
;   alpha = charlie -- this gives a truncation warning...

   alpha = byte(charlie)
   
   print_byte_hex(sg_output, alpha) 
   sg_output= " "
   print_byte_hex(sg_output, echo[0])
   sg_output= " "
   print_byte_hex(sg_output, echo[3])

   -- ----------------------------
   test_header(3) -- print header
   -- ----------------------------

   alpha = 0
   julia = 1
   
   print_byte_hex(sg_output, alpha) 

   -- ----------------------------
   test_header(4) -- print header
   -- ----------------------------

   pv = 7
   print_byte_dec(sg_output, pv)
   sg_output = " "
   sg_output = "("
   print_byte_dec(sg_output, pv_store)
   sg_output = ")"

   -- ----------------------------
   test_header(5) -- print header
   -- ----------------------------

   alpha = 7
   find_the_bug(alpha)   -- waring: bad code!
   print_byte_dec(sg_output, alpha)

   -- ----------------------------
   test_header(6) -- print header      
   -- ----------------------------

   x = 2   
   if (x > 0) then
      x = x - 1
   end if

   if (x > 0) then
      x = x - 1
   else
      x = x + 1
   end if

   x = 7
   if (x == 7) then
      x = x + 1
   elsif (x > 7) then
      x = x + 2
   else
      x = x + 3
   end if
   print_byte_dec(sg_output, x)

   -- ----------------------------
   test_header(7) -- print header   
   -- ----------------------------

   x = 14   
   case (x) of
      1 : block
         x = 1
      end block
      2 : block
         x = 3
      end block
      3 : block
         x = 2
      end block
      otherwise block
         x = x / 2
      end block
   end case
   print_byte_dec(sg_output, x)

   -- ----------------------------
   test_header(8) -- print header    
   -- ----------------------------
   
   x = 0
   forever loop
      sg_output = "!"
      x = x + 1
      if (x > 10) then
         exit loop
      end if
   end loop

   -- ----------------------------
   test_header(9) -- print header    
   -- ----------------------------
   
   for 7 loop
      sg_output = "@"
   end loop 

   -- ----------------------------
   test_header(10) -- print header
   -- ----------------------------
   
   var byte lc
   for 7 using lc loop
      print_byte_dec(sg_output, lc)
      sg_output = " "
   end loop

   -- ----------------------------
   test_header(11) -- print header
   -- ----------------------------
   
   var byte x = 0
   repeat      
      sg_output = "#"
      x = x + 1
   until (x == 0)

   -- ----------------------------
   test_header(12) -- print header
   -- ----------------------------
   
   x = 0
   while (x > 0) loop 
      sg_output = "$"
      x = x - 1
   end loop

   -- ----------------------------
   test_header(13) -- print header
   -- ----------------------------
   
   x = 4
   while (x > 0) loop 
      sg_output = "%"
      x = x - 1                    
      if (x == 14) then
         exit loop
       end if         
   end loop

   -- ----------------------------   
   -- closing test output
   print_string(sg_output, str_header)
   print_crlf(sg_output)   
   -- ----------------------------
end loop

; Output:      
; 
; Hello Jallib world! \
; 
; ------------------------------
; Test nr: 1
; 1
; ------------------------------
; Test nr: 2
; 78 78 12
; ------------------------------
; Test nr: 3
; 04
; ------------------------------
; Test nr: 4
; 16 (8)
; ------------------------------
; Test nr: 5
; 6
; ------------------------------
; Test nr: 6
; 8
; ------------------------------
; Test nr: 7
; 7
; ------------------------------
; Test nr: 8
; !!!!!!!!!!!
; ------------------------------
; Test nr: 9
; @@@@@@@
; ------------------------------
; Test nr: 10
; 0 1 2 3 4 5 6
; ------------------------------
; Test nr: 11
; ################################################################################
; ################################################################################
; ################################################################################
; ################
; ------------------------------
; Test nr: 12
; 
; ------------------------------
; Test nr: 13
; %%%%
; ------------------------------
; 