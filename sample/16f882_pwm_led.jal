-- Title: Test program for 1 PWM channel, using a LED
-- Author: Rob Jansen, Copyright (c) 2019..2019, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample show how to use PWM 1 in low resolution mode.
-- It progressively light up and down a LED. Sweet...
--
-- Notes: Copied from 16f73_pwm_led.jal and adapted for 16f882 controller to
--        test the fixed pwm_ccp1.jal library to prevent an inverted PWM signal.
--
include 16f882                     -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS           -- crystal or resonator
pragma target WDT      CONTROL      -- watchdog
pragma target DEBUG    DISABLED     -- no debugging
pragma target BROWNOUT DISABLED     -- no brownout reset
pragma target FCMEN    DISABLED     -- no clock monitoring
pragma target IESO     DISABLED     -- no int/ext osc switching
pragma target LVP      ENABLED      -- allow low voltage programming
pragma target MCLR     INTERNAL     -- internal reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
--
enable_digital_io()

-- Configure PWM
pin_ccp1_direction = output
include pwm_hardware
pwm_max_resolution(1)
pwm1_on()

forever loop
   var byte i
   i = 0
   -- loop up and down, to produce different duty cycle
   while i < 100 loop
      pwm1_set_dutycycle_percent(i)
      _usec_delay(10000)
      i = i + 1
   end loop
   while i > 0 loop
      pwm1_set_dutycycle_percent(i)
      _usec_delay(10000)
      i = i - 1
   end loop
   -- turning off, the LED lights at max.
   -- Note: pwm1_off will turn the LED on (inverted output).
   _usec_delay(500000)
   pwm1_off()
   _usec_delay(500000)
   pwm1_on()
   
end loop
