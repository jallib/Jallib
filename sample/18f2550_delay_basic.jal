-- ----------------------------------------------------------------------------
-- Title: Test (Demo) program showing how to use delay library
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to use delay library. This very useful library
-- contains delay procedures, and can be used whatever the oscillator speed used.
-- 
-- Notes: as output, this sample produces characters on a serial link. First be sure you're able
-- to run serial tests.
--              
-- This file has been generated by jallib.py from:
--    * board: board_18f2550_js.jal
--    * test : test_delay_basic.jal
--

;@jallib section chipdef
-- chip setup
include 18f2550

pragma target  clock 20_000_000
pragma target  OSC        hs
pragma target  LVP enabled                   -- allow LVP
pragma target  WDT CONTROL                   -- WDT software controlled

WDTCON_SWDTEN = OFF                          -- disable WDT


include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- famous delay lib !
include delay

-- will periodically send those chars
var byte chars_to_send[8] = {"a","B","c","d","e","F","g","H"}
forever loop
	-- here we call several delay statements, just for fun
	-- since it'll be read by humans, can't use too short delays...
	serial_hw_write(chars_to_send[0])
	delay_1ms(10)	-- 1Oms

	serial_hw_write(chars_to_send[1])
	delay_1ms(100)	-- 100ms

	serial_hw_write(chars_to_send[2])
	delay_100ms(5)	-- 500ms

	serial_hw_write(chars_to_send[3])
	delay_100ms(10) -- 1000ms = 1s

	serial_hw_write(chars_to_send[4])
	delay_100ms(10)	-- 1000ms = 1s

	serial_hw_write(chars_to_send[5])
	delay_100ms(15) -- 1500ms = 1s

	serial_hw_write(chars_to_send[6])
	delay_100ms(20)	-- 2000ms = 2s

	serial_hw_write(chars_to_send[7])
	delay_100ms(50)	-- 5000ms = 5s
	
end loop