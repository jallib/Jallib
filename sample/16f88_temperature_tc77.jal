-- Title: Test file for TC77 temperature sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2011, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: 2.4q2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample reads temperature from TC77 through SPI.
--
-- Sources:
-- TC77 temperature sensor sample by Eur van Andel
-- http://www.microchip.com/wwwproducts/Devices.aspx?dDocName=en010750
--
-- Notes:
-- This is a complete re-write of the orignal jallib TC77 library
-- written by Eur van Andel.
--
-- Improvements:
-- Uses pesudo variables
-- tiny bit less code/ram usage.
-- cs line controlled by library (optional)
-- no ASM
-- Compatible with the jallib SPI library (hardware or software)
-- Less code used when using multiple devices since SPI code is shared.
--   
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_temperature_tc77.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

;@jallib section serial
const serial_hw_baudrate = 115_200


enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize

include print

include format

include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange


-- setup uart for communication
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


-- Setup TC77 temp sensor
alias tc77_cs           is pin_ss
alias tc77_cs_direction is pin_ss_direction
tc77_cs = high
tc77_cs_direction = output
--
const TC77_CS_IN_LIB = TRUE  -- chip select line controlled by library
alias tc77_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 0,0
include temperature_tc77

-- main program
forever loop
   print_crlf(serial_hw_data)
   print_sbyte_dec(serial_data, tc77_celsius_sbyte)
   serial_data =" "

   print_crlf(serial_hw_data)
   format_sword_dec(serial_data, tc77_celsius_sword, 6, 2)
   serial_data =" "

   print_crlf(serial_hw_data)
   format_sdword_dec(serial_data, tc77_celsius_sdword, 8, 4)
   serial_data = " "

   _usec_delay(250_000)
end loop