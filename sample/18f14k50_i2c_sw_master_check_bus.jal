-- Title: Master part of i2c slave check bus test
-- Author: Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: this test corresponds to the master part
-- of i2c hardware slave bus check testing program. It blinks a little,
-- then send a i2c command, then infinitely loop. 
-- This is a one-shot test, if you want to run it again, reset your PICs
-- (or switch the power off/on...)
-- 
-- Sources:
-- 
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_i2c_sw_master_check_bus.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off
enable_digital_io()

;@jallib section led
-- LED IO definition
alias led             is pin_c4
alias led_direction   is pin_c4_direction
alias led2            is pin_c6
alias led2_direction  is pin_c6_direction
-- blink a little, then send i2c command
led_direction = output
for 8 loop
   led = on
   _usec_delay(250000)
   led = off
   _usec_delay(250000)
end loop

;@jallib section i2c
-- I2C io definition, using hardware I2C
alias i2c_scl            is pin_b6
alias i2c_scl_direction  is pin_b6_direction
alias i2c_sda            is pin_b4
alias i2c_sda_direction  is pin_b4_direction

-- i2c setup
const word _i2c_bus_speed = 4 ; 400kHz
const bit _i2c_level = true   ; i2c levels (not SMB)
include i2c_software                
i2c_initialize()

var byte i2c_tx_buffer[2]
var byte i2c_rx_buffer[1]
include i2c_level1
var byte icaddress = 0x1F	-- slave address, can be anything

-- go! If slave starts to flash at high speed,
-- it works !
-- dummy command
i2c_tx_buffer[0] = "."
var bit _trash = i2c_send_receive(icaddress, 1, 1)

forever loop
   -- reached the end of test
end loop
