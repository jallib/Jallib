-- ----------------------------------------------------------------------------
-- Title: in & out test
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
--  
-- Adapted-by: 
--  
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Test program for digital in and out. LED blinks, Button selects blink rate
-- 
-- Sources:
-- 
-- Notes: 
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f67j50_ms.jal
--    * test : test_in_and_out.jal
--

;@jallib section chipdef
-- chip setup
include 18f67j50                   -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      INTOSC_NOCLKOUT_PLL      -- internal oscillator
                                                -- and using PLL
pragma target PLLDIV   P2          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96/2): 48 MHz
pragma target FCMEN    DISABLED    -- no fail-safeclock monitoring
pragma target IESO     DISABLED    -- no in/ext oscillator switchover
pragma target WDT      CONTROL     -- watchdog software controlled
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging

WDTCON_SWDTEN = OFF                 -- disable watchdog

-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
OSCTUNE_PLLEN = enabled            -- activate PLL module
--
WDTCON_SWDTEN = OFF                -- disable WDT
--
_usec_delay (1_000)                -- allow PLL to stabilize
;@jallib section led
-- LED IO definition
alias led             is pin_c5
alias led_direction   is pin_c5_direction
;@jallib section button
-- button IO definition
alias button             is pin_c0
alias button_direction   is pin_c0_direction

enable_digital_io()

include delay

led_direction = output

button_direction = input

forever loop
   led = ! led
   
   if (button) then
     delay_1ms(250)
   else
     delay_1ms(100)
   end if               
   
end loop