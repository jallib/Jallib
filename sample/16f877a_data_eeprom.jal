-- -----------------------------------------------------------------------------
-- Title: Sample data EEPROM write and read for the Microchip PIC16F877A.
-- 
-- Author: Rob Hamerling, Copyright (c) 2008..2019, all rights reserved.
-- 
-- Adapted-by: Albert Faber, Joep Suijs, Rob Jansen
-- 
-- Compiler: 2.5r3
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description:
-- Sample data EEPROM write and read for the Microchip PIC16F877A. During
-- EEPROM writing and reading the LED is blinking. After verifying all 256
-- EEPROM addresses successfully the LED should stay on. If the data read is 
-- not the same as the data written the LED will be off.                        
--  
-- Sources:
-- 
-- Notes: This file is a modification of the original 16f877a_data_eeprom.jal file 
--        and adapted to better indicate if the EEPROM write and read cyles 
--        were successful using the connected LED.
--

-- chip setup
include 16f877a

-- This setup assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000         -- xtal frequency
pragma target OSC       HS             -- HS crystal or resonator
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming

pragma eedata 129,130,131,132          -- initial contents

enable_digital_io()                    -- disable analog modules

include pic_data_eeprom
-- LED IO definition
alias led             is pin_a0
alias led_direction   is pin_a0_direction
led_direction = output

var byte i,j                         
var bit led_value = ON
var bit all_ok = TRUE

led = OFF
i = 0

forever loop
   _usec_delay(100_000)          

   -- As long as the led blinks all written data equals the data is read back.
   -- In case of a difference in data the led will be turned off. After a 
   -- succesfull write and read cycle of 256 bytes the LED stays on.
   if all_ok then
      led_value = !led_value      -- toggle the led
      data_eeprom_write(i,i)      -- write value
      j = data_eeprom(i)          -- read back
      if (j != i) then
         all_ok = FALSE
         led_value = OFF
      end if 
   end if
   i = i + 1

   led = led_value

   while (i == 0) loop            -- The end, led should be on if all OK.     
      if all_ok then
         led = ON
      else
         led = OFF
      end if
   end loop          
 
end loop


