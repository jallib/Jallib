-- -----------------------------------------------------------------------------
-- Title: ESP8266 web client sample program.
--
-- Author: Rob Jansen, Copyright (c) 2018..2019, all rights reserved.
--
-- Adapted-by: 
--
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: Inspired by https://github.com/bportaluri/WiFiEsp 
--
-- Description:  
-- ------------
-- This program connects to the example website using an ESP8266 module and 
-- will send a HTTP request to the website every 5 seconds. The website response 
-- will be written to the second USART. Results can be monitors on the PC using
-- a Terminal Emulator program.
-- Note that the website sends a lot of data which cannot all be handled by the
-- programm but the intention of this program is to show that it works.
-- Make sure you have set the right SSID and password in 'MY_SSID' and 
-- 'MY_PASSWORD'.    
--
-- Dependencies: -
--
-- Hardware info:
-- --------------
-- Important!. The ESP8266 uses a supply voltage of 3.3 Volt. Make sure that 
--             your PIC also runs at that supply voltage or make use of a level 
--             shifter for connecting the USART pins from the PIC to the ESP8266.
--             Next to that the connection from the PIC to the PC has to be
--             buffered by an RS232 driver like the MAX232. For the connections
--             of the RS232 connection below a non-twisting cable is assumed 
--             between the MAX232 and the PC.
--
-- PIC connections (40 pin DIP):
-- *) TX pin 1 (25) of the USART1 of the PIC to the RX pin of the ESP8266 module.
-- *) RX pin 1 (26) of the USART1 of the PIC to the TX pin of the ESP8266 module.
-- *) TX pin 2 (22) of the USART2 of the PIC to the pin 11 of the MAX232.
-- *) RX pin 2 (21) of the USART2 of the PIC to the pin 12 of the MAX232. 
--
-- Connect the ESP8266 module as follows:
-- *) RST pin to 3.3 V
-- *) EN pin with a resistor of 1 kOhm to the 3.3 V 
-- *) GPIO15 pin with a resistor of 1 kOhn to ground
--
-- -------------------------------- Pragmas ---------------------------------------
-- Some compiler pragmas for optimizations
pragma warn all no              
pragma opt variable_reduce yes   

include 16f19176                  

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000  -- oscillator frequency
--
pragma target OSC      OFF         -- internal oscillator
pragma target RSTOSC   HFINT32     -- select 32 MHz
pragma target CLKOUTEN DISABLED    -- no clock output
pragma target WDT      DISABLED    -- watchdog
pragma target BROWNOUT DISABLED    -- no brownout reset
pragma target FCMEN    DISABLED    -- no clock monitoring
pragma target CSWEN    ENABLED     -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED     -- allow low voltage programming
pragma target MCLR     EXTERNAL    -- external reset
OSCCON2 = 0x00                     -- 32 MHz and no division
--
-- Enable weak pull up for all ports since some inputs are not connected
WPUA = 0b1111_1111       
WPUB = 0b1111_1111       
WPUC = 0b1101_1111       
WPUD = 0b1111_1111       
WPUE = 0b0000_1011  

enable_digital_io()

-- -------------------------------- Pins ---------------------------------------
-- Declaration of the USART1 pins for the ESP8266 Module.
alias pin_RX_direction  is pin_C7_direction  -- Pin 26 for 40 pin DIP
alias pin_TX_direction  is pin_C6_direction  -- Pin 25 for 40 pin DIP. 

-- Declaration of the remapped USART2 pins for the PC.
alias pin_RX2_direction is pin_D2_direction  -- Pin 21 for 40 pin DIP
alias pin_TX2_direction is pin_D3_direction  -- Pin 22 for 40 pin DIP.

-- ------------------------- Constant declarations -----------------------------
const serial_hw2_baudrate = 115200  -- Terminal connection. 

-- We need a big buffer for the web server.
const ESP8266_MAX_RECEIVE_BUFFER = 1600

-- We also need a bigger serial buffer for the first USART used by the esp8266.
-- 80 is maximum. This is still not sufficient, see remark at the end of this
-- sample program.
const SERIAL_RCVBUFSIZE  = 80         

-- Set the request repeat time to 5 seconds.
const word REQUEST_TIME   = 50_000  

-- WiFi connection constants.
const byte MY_SSID[]     = "Your_ID"
const byte MY_PASSWORD[] = "Your_Password"
const byte MY_HOST[]     = "www.example.com"
const byte MY_PORT[]     = "80" -- Port 80 is used for HTTP TCP requests.

-- -------------------------- Includes go here --- -----------------------------
include serial_hw2_int_cts  -- Debug information via the second RS232 interface
include esp8266
include print
include PPS                            

-- ------------------------- Variable declarations -----------------------------
var byte connection 
var word request_counter 
var bit all_ok

-- ------------------------- Functions and Procedures --------------------------
procedure print_receive_buffer() is 
   var word index_counter
   for esp8266_bytes_received using index_counter loop
      serial_hw2_data = esp8266_receive_buffer[index_counter]
   end loop
end procedure 


procedure print_wifi_status() is
   if esp8266_get_ssid() then
      print_string(serial_hw2_data,"SSID: ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining SSID.\n")
   end if  
   
   if esp8266_get_bssid() then
      print_string(serial_hw2_data,"BSSID: ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining BSSID.\n")
   end if  
   
   if esp8266_get_ip_address() then
      print_string(serial_hw2_data,"Local IP address is: ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining local IP address.\n")
   end if 
   
   if esp8266_get_mac_address() then
      print_string(serial_hw2_data,"Local MAC address is: ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining local MAC address.\n")
   end if 
   
   if esp8266_get_channel() then
      print_string(serial_hw2_data,"Channel: ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining channel.\n")
   end if    
   
   if esp8266_get_rssi() then
      print_string(serial_hw2_data,"Signal Strength (RSSI): ")
      print_receive_buffer()
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Error obtaining signal strength.\n")
   end if    
end procedure

-- ------------------------------- Main Program  ------------------------------- 
_usec_delay(1_000_000) -- Gives ESP module also time to start up.

-- Re-assign the pins. Note: This must always be done to let it work even for 
-- the default assignment.
pps_control_lock(FALSE)                
RC6PPS = PPS_TX1       -- TX1 re-assigned to C6  (default)             
RX1PPS = PPS_RC7       -- C7 re-assigned to RX1  (default)            
RD3PPS = PPS_TX2       -- TX2 re-assigned to D3       
RX2PPS = PPS_RD2       -- D2  re-assigned to RX2              
pps_control_lock(TRUE)                 

serial_hw2_init()

print_crlf(serial_hw2_data)
print_string(serial_hw2_data,"Sample web client program for ESP8266.\n")

-- Initialize the device and connect to the AP until succes.
all_ok = FALSE
while !all_ok loop
   print_string(serial_hw2_data,"Initializing ESP8266 module ...")
   if esp8266_init() then
      print_string(serial_hw2_data," succes.\n")
      -- Succes, connect to the Access Point.
      while (esp8266_get_connection_status() != ESP8266_CONNECTED) loop
         print_string(serial_hw2_data,"Connecting to WiFi network ... ")
         if esp8266_connect_to_ap(MY_SSID, MY_PASSWORD) then
            print_string(serial_hw2_data," succes.\n")
            all_ok = TRUE
         else
            print_string(serial_hw2_data," failed.\n")
         end if       
      end loop
   else 
      print_string(serial_hw2_data," failed.\n")
   end if 
end loop

print_wifi_status()

print_string(serial_hw2_data,"Pinging host ...")
if esp8266_ping(MY_HOST) then
   print_string(serial_hw2_data," succes.\n")
else
   print_string(serial_hw2_data," failed.\n")
end if    

-- We start with a request, so get the initial (default) connection number.
connection = esp8266_get_connection()

print_string(serial_hw2_data,"Starting connection to host ...")
if esp8266_client_start_tcp(MY_HOST, MY_PORT) then
   print_string(serial_hw2_data," connected.\n")
else
   print_string(serial_hw2_data,"failed.\n") 
end if 


request_counter = 0 
forever loop
   _usec_delay(100) -- Loop time.
   
   -- Check if a request must be sent.
   if (request_counter == REQUEST_TIME) then
      request_counter = 0
      print_string(serial_hw2_data,"Requesting some data ...")
      -- Make sure that the request goes to the this connection.
      esp8266_set_connection(connection)
      all_ok = esp8266_send_data("GET / HTTP/1.1\r\n")
      all_ok = all_ok & esp8266_send_data("Host: ")
      all_ok = all_ok & esp8266_send_data(MY_HOST)
      all_ok = all_ok & esp8266_send_data("\r\n")
      all_ok = all_ok & esp8266_send_data("\r\n") -- End of request.
      if all_ok then
         print_string(serial_hw2_data," succes!\n")
      else
         print_string(serial_hw2_data," failed!\n")
      end if
      print_crlf(serial_hw2_data)
   else
      request_counter = request_counter + 1
   end if 
   
   -- Poll the device and print the data that is coming from the server.
   if esp8266_data_available() then
      print_string(serial_hw2_data,"Data present\r\n")
      if esp8266_get_data(connection) then
         print_string(serial_hw2_data,"Received ")
         print_maxvar_dec(serial_hw2_data, esp8266_bytes_received)
         print_string(serial_hw2_data," bytes.\r\n")
         -- One remark here. The ESP8266 does not transmit the whole website in
         -- one packet which means that while printing the receive buffer data
         -- is also received from the ESP module. Although the serial buffer is
         -- increased to 80, it is not sufficient so not all data is displayed.
         -- Because of that it will also mention that incorrect data is received 
         -- which is caused by not processing the incoming data fast enough.
         print_receive_buffer()
         print_crlf(serial_hw2_data)
      else
         print_string(serial_hw2_data,"Incorrect.\n")
      end if 
   end if
end loop



