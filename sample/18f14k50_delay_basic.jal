-- ----------------------------------------------------------------------------
-- Title: Test (Demo) program showing how to use delay library
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to use delay library. This very useful library
-- contains delay procedures, and can be used whatever the oscillator speed used.
-- 
-- Notes: as output, this sample produces characters on a serial link. First be sure you're able
-- to run serial tests.
--              
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_delay_basic.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off

include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- famous delay lib !
include delay

-- will periodically send those chars
var byte chars_to_send[8] = {"a","B","c","d","e","F","g","H"}
forever loop
	-- here we call several delay statements, just for fun
	-- since it'll be read by humans, can't use too short delays...
	serial_hw_write(chars_to_send[0])
	delay_1ms(10)	-- 1Oms

	serial_hw_write(chars_to_send[1])
	delay_1ms(100)	-- 100ms

	serial_hw_write(chars_to_send[2])
	delay_100ms(5)	-- 500ms

	serial_hw_write(chars_to_send[3])
	delay_100ms(10) -- 1000ms = 1s

	serial_hw_write(chars_to_send[4])
	delay_100ms(10)	-- 1000ms = 1s

	serial_hw_write(chars_to_send[5])
	delay_100ms(15) -- 1500ms = 1s

	serial_hw_write(chars_to_send[6])
	delay_100ms(20)	-- 2000ms = 2s

	serial_hw_write(chars_to_send[7])
	delay_100ms(50)	-- 5000ms = 5s
	
end loop
