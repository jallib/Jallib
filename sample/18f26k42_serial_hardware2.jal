-- -----------------------------------------------------------------------------
-- Title: Serial hardware test program for new type of USART 2.
--
-- Author: Rob Jansen, Copyright (c) 2019..2020 all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
--    USART test program for the Microchip PIC18F26k42. This sample program was
--    created to test the newer type of USART 2 using the serial_hardware2 library.
--
-- Sources: Based on the original serial hardware sample program by Joep Suijs.
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--
include 18f26k42                  -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000    -- oscillator frequency
--
pragma target OSC      HS         -- crystal or resonator
pragma target CLKOUTEN DISABLED   -- no clock output
pragma target WDT      DISABLED   -- watchdog
pragma target XINST    DISABLED   -- do not use extended instructionset
pragma target DEBUG    DISABLED   -- no debugging
pragma target BROWNOUT DISABLED   -- no brownout reset
pragma target FCMEN    DISABLED   -- no clock monitoring
pragma target CSWEN    ENABLED    -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED    -- low voltage programming
pragma target MCLR     INTERNAL   -- Internal reset
pragma target MVECEN   DISABLED   -- Do no use multi vectored interrupts

enable_digital_io()               -- make all pins digital I/O

-- Assign the pins. Note: This must always be done to let it work even for
-- the default assignment.
include pps
pps_control_lock(FALSE)
RC4PPS  = PPS_TX2   -- TX1 assigned to C4 (remapped so not on programming pins)
U2RXPPS = PPS_RC5   -- C5 assigned to RX1 (remapped so not on programming pins)
pps_control_lock(TRUE)

-- Include and initialize serial hardware library.
const serial_hw2_baudrate = 115200
alias pin_TX2_direction is pin_C4_direction  -- Transmit pin.
alias pin_RX2_direction is pin_C5_direction  -- Receive pin.
include serial_hardware2
serial_hw2_init()

include print                                -- output library
print_string(serial_hw2_data, "Hello serial hardware 2 world")        

-- inform user PIC is ready !
serial_hw2_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10

forever loop

   -- if there is a char, echo it back.
   if (serial_hw2_read(char))	then
      serial_hw2_write(char)	-- that's the echo...
   end if

   -- code block below prints a dot, every now and then, to signal
   -- the pic is alive, waiting to receiver character from the host
   counter = counter - 1      -- count down
      if (counter == 0) then  -- until zero
         counter = 50000      -- then start over counting from 50000
      serial_hw2_data = "."   -- and output a dot to the serial port
   end if
   
end loop

