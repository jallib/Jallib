-- ----------------------------------------------------------------------------
-- Title: Test program for random.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Test program
-- 
-- Sources:
-- 
-- Notes: as output, this sample produces characters on a serial link. First 
--        run serial tests to make sure serial comms works okay.
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2450_af.jal
--    * test : test_random.jal
--

;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz since pragma target CPUDIV is P1
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 (20 MHz)
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL      -- hs + pll, usb hs
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog scaler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          INTERNAL    -- no master reset
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section led
-- LED IO definition
alias led             is pin_b3
alias led_direction   is pin_b3_direction
alias led2            is pin_b1
alias led2_direction  is pin_b1_direction
led_direction = output

include delay

-- set all IO as digital
enable_digital_io()


-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

include print

-- RANDOM --
-- The random provides a decent random function.
-- If you don't need proper random and need to save on memory
-- or cpu cycles, you could uncomment the line below. It will
-- save you 4 bytes of ram and about 80 bytes of program memory.
-- But: the random output will be of a much less quality!
;const random_downgrade = 1   -- if this constant exists (even with value 0), 
                              -- the random functions are downgraded

-- include random lib
include random

var word tmp_word
 
forever loop
   delay_100ms( 5 )
   LED = high
   delay_100ms( 5 )
   LED = low

   for 100 loop     
      -- print 100 random words
      tmp_word = random_word()  -- get 16-bit random number
      print_word_dec(serial_hw_data, tmp_word)   
   end loop
      
   print_crlf(serial_hw_data)                      -- empty line
   print_byte_dec(serial_hw_data, random_byte())   -- get 8-bit random number and output it.
   print_crlf(serial_hw_data)          
   
end loop

