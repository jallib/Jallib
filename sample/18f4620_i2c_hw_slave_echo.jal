-- Title: Test program for i2c hardware slave, stateful implementation
-- Author: Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: this sample shows how to implements an i2c hardware slave,
-- based in i2c_hw_slave_isr.jal library. Basically, this i2c slave waits for
-- a byte, and when required, it sends byte + 1 (send "a", you'll get a "b")
-- --
-- This sample is aimed to be used with *_i2c_hw_master_echo.jal samples,
-- which is the master part.
-- 
-- This file has been generated by jallib.py from:
--    * board: board_18f4620_js.jal
--    * test : test_i2c_hw_slave_echo.jal
--

;@jallib section chipdef
-- chip setup
include 18f4620

pragma target  clock 20_000_000
pragma target  OSC        hs
pragma target  LVP enabled                         -- allow LVP
pragma target  WDT CONTROL                         -- watchdog software controlled

WDTCON_SWDTEN = OFF                                -- disable watchdog
;@jallib section led
-- LED IO definition
alias led             is pin_c5
alias led_direction   is pin_c5_direction
led_direction = output

include i2c_hw_slave
-- this will be the slave address. It looks like:
--     0b_0101_1100
-- => 0b_0101_110   : 7-bits address
-- =>            0  : 8th bit is to specify read or write operation. 
--                    Value can be anything, it does not matter while init
const byte SLAVE_ADDRESS = 0x5C
i2c_hw_slave_init(SLAVE_ADDRESS)

-- will store what to send back to master
-- so if we get "a", we need to store "a" + 1
var byte data


-- Before including i2c_hw_slave_isr library, several callbacks
-- must be defined (callbacks are procedure which supposed to be defined
-- and be called on appriopriate time)

-- Since all those callbacks are called once per state (no other calls
-- in the program), it is suggested to use "pragma inline", to save
-- stack usage


-- this callback is used when something wrong happened 
-- during communication between master and us
procedure i2c_hw_slave_on_error() is
   pragma inline
   -- Just tell user user something's got wrong
   forever loop
	  led = on
	  _usec_delay(200000)
	  led = off
	  _usec_delay(200000)
   end loop
end procedure


-- this callback is used when master wants to talk to us
-- and our i2c address has been recognized
procedure i2c_hw_slave_on_state_1(byte in _trash) is
   pragma inline
   -- _trash is read from master, but it's a dummy data
   -- usually (always ?) ignored
end procedure


-- This callback is used when master sends a data byte
procedure i2c_hw_slave_on_state_2(byte in rcv) is
   pragma inline
   -- ultimate data processing... :)
   data = rcv + 1
end procedure


-- this callback is used when master wants to read something
-- from us. It should use i2c_hw_slave_write() to send something
procedure i2c_hw_slave_on_state_3() is
   pragma inline
   i2c_hw_slave_write_i2c(data)
end procedure


-- this callback is used when master, after having read something,
-- still wants to read and get data from us.
procedure i2c_hw_slave_on_state_4() is
   pragma inline
   -- This shouldn't occur in our i2c echo example
   i2c_hw_slave_on_error()
end procedure


-- this callback is used when master does not want to talk
-- with us anymore... This is an appropriate place to reset
-- data for instance
procedure i2c_hw_slave_on_state_5() is
   pragma inline
   data = 0
end procedure


-- callbacks are defined, now include ISR
include i2c_hw_slave_isr

-- blink a little to tell the world we're up
for 4 loop
   led = on
   _usec_delay(100000)
   led = off
   _usec_delay(100000)
end loop

-- just loop until interrupt is raised
forever loop
end loop