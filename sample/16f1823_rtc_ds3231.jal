-- -----------------------------------------------------------------------------
-- Title: Sample program for the DS3231 Real Time Clock
-- Author: Rob Jansen, Copyright (c) 2021..2021, all rights reserved.
-- Adapted-by:
-- Revision: $Revision$
-- Compiler: 2.5r5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program for controlling the DS3231 Real Time Clock it sets the
--              time and date and prints the results on the screen via a USART.
--
-- Notes: For all available procedures and functions see rtc_common.jal.       
--
include 16f1823                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset internal
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0000_0111       -- Weak pull-up for unused pins.
WPUC = 0b0011_1000       -- Weak pull-up for unused pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()      -- All pins digital IO
_usec_delay(100_000)     -- Give the hardware some time to stabilize.

-- Settings for the USART and initialize
alias pin_RX_direction is pin_RX_RC5_direction -- Pin 5 of 14 pin DIP.
alias pin_TX_direction is pin_TX_RC4_direction -- Pin 6 of 14 pin DIP.
const serial_hw_baudrate = 115200
include serial_hardware
include print

-- Settings for the DS3231 and intialize
alias ds3231_sck is pin_C0 -- Pin 10 for 14 pin DIP
alias ds3231_sck_direction is pin_C0_direction
alias ds3231_sdo is pin_C1 -- Pin 9 for 14 pin DIP.
alias ds3231_sdo_direction is pin_C1_direction 
-- If you want to use software IIC, define the following constant.
-- const DS3231_SOFTWARE_IIC = TRUE
include rtc_ds3231

-- Variables
var word fullyear, yearday
var byte hours, minutes, seconds
var byte year, month, date, day


-- Print the current time of the rtc.
procedure print_time() is
   rtc_get_time_bin(hours, minutes, seconds)
   print_string(serial_hw_data, "H:")
   print_byte_dec(serial_hw_data, hours)
   print_string(serial_hw_data, " M:")
   print_byte_dec(serial_hw_data, minutes)
   print_string(serial_hw_data, " S:")
   print_byte_dec(serial_hw_data, seconds)
   print_crlf(serial_hw_data)
end procedure


-- Print the current date of the rtc.
procedure print_date() is
   rtc_get_date_bin(year, month, date)
   print_string(serial_hw_data, "Year: ")
   print_byte_dec(serial_hw_data, year)
   print_string(serial_hw_data, " Month: ")
   print_byte_dec(serial_hw_data, month)
   print_string(serial_hw_data, " Day of month: ")
   print_byte_dec(serial_hw_data, date)
   print_crlf(serial_hw_data)

   -- You can calculate the day of the week.
   day = rtc_calc_dayofweek(year, month, date)
   print_string(serial_hw_data, "Day of week (calculated from date): ")
   print_byte_dec(serial_hw_data, day)
   print_crlf(serial_hw_data)

   -- This rtc also keeps track of the day of the week but has to be set first
   rtc_write_dayofweek(day)
   print_string(serial_hw_data, "Day of week from rtc: ")
   day = rtc_read_dayofweek()
   print_byte_dec(serial_hw_data, day)
   print_crlf(serial_hw_data)

   -- You can also calculate the day of the year
   yearday = rtc_calc_dayofyear(year, month, date)
   print_string(serial_hw_data, "Day of year (calculated from date): ")
   print_word_dec(serial_hw_data, yearday)
   print_crlf(serial_hw_data)

   -- Get and set the full year date in bcd notation.
   fullyear = rtc_read_full_year()
   print_string(serial_hw_data, "Year: ")
   year = byte(fullyear >> 8)
   print_byte_dec(serial_hw_data, rtc_bcd2bin(year))
   year = byte(fullyear)
   print_word_dec(serial_hw_data, rtc_bcd2bin(year))
   print_crlf(serial_hw_data)
   
   -- Change the date to show the century feature.
   -- Switch between two year in different centuries
   print_string(serial_hw_data, "Changing century: ")
   if (fullyear < 0x2000) then
      fullyear = 0x2021
   else
      fullyear = 0x1992
   end if
   rtc_write_full_year(fullyear)
   fullyear = rtc_read_full_year()
   year = byte(fullyear >> 8)
   print_byte_dec(serial_hw_data, rtc_bcd2bin(year))
   year = byte(fullyear)
   print_word_dec(serial_hw_data, rtc_bcd2bin(year))
   print_crlf(serial_hw_data)
end procedure

-- Main program starts here. Start with initiallization.
serial_hw_init()
rtc_init()

-- Set some intial time hh:mm:ss in binary format and print it.
rtc_set_time_bin(15, 59, 45)
print_time()

-- Set a date yy:mm:dd in bcd format and print it.
rtc_set_date_bin(21,9,25)
print_date()

forever loop

  -- Get the time and print it.
   _usec_delay(1_000_000)
   print_time()
   print_date()
   print_crlf(serial_hw_data)
  
end loop

