-- -----------------------------------------------------------------------------
-- Title: Demo of usb_serial library for the PIC16F1455.
-- Author: Rob Jansen, Copyright (c) 2017..2021, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r4
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: This application demonstratesest USB Serial library, this application 
-- will emulate a RS-232 terminal device. Once the USB device has been detected by the 
-- host operating system, it will create a virtual COM port. When opening this COM
-- on the host computer, using a standard terminal application, it should show a
-- welcome message, after the welcome message all input characters are echoed back
-- to the terminal application.
--
-- Sources: http://www.usb.org for USB specifications.
-- 
-- Notes: There are two options to use the USB driver:
--        1) Without interrupts by frequently calling 'usb_serial_flush()' 
--           frequently in the main loop.
--        2) Using interrupts to make timing less critical. In that case no 
--           calls to 'usb_serial_flush()' are needed. 
--           This can be activated by defining: const USB_INTERRUPT_DRIVEN = TRUE    
--
-- Some instructions for use:
-- -
-- 1. Make sure you logon as administrator, or with administrator privileges,
--    on Windows 10.
-- 2. If needed convert to the correct PIC device (change include file), 
--    adapt fuses fuses and speed.
-- 3. Create a basic board with USB PIC device, also see below for connections.
-- 4. Compile the this file and program the hex file into the PIC.
-- 5. Windows 10 has a build in USB driver that supports this device.
-- 6. Open the Windows Device Manager and check out the "ports" section. A new
--    communications port will be there, with a COM number.
-- 7. Open a terminal program (for example Termite) and select the COM
--    port you found in the previous step. Pick any baudrate, Windows will
--    accommodate automatically, and use 8-N-1-no for the other settings. Also
--    enable flow control (RTS/CTS) in your terminal program and connect to the
--    device. When connected a welcome message will appear on the screen.
-- 8. Now everything you type will be echoed back.
-- 9. Have fun, adapt to your needs.
--
-- ------------------------------------------------------
--
-- This file was orginally copied from 18f14k50_usb_serial.jal and made
-- operational to work for the PIC16F1454/55/59 using the modified usb driver.
--

include 16f1455                  -- Target processor.

-- For hardware a 14 pin DIL PIC16F1455 was used. The circuit can be powered by
-- the USB connection and connected as follows:
-- *) USB data- wire to pin 12 (D-)
-- *) USB data+ wire to pin 13 (D+)
-- *) USB power wire to pin 1 (Vdd). Don't forget 100nF decoupling capacitor.
-- *) USB ground wire to pin 14 (Vss)
-- *) A resistor of 33kOhm to pin 4 (MCLR) and power. We use internal reset.
-- *) A capacitor of 220nF to pin 11 (Vusb3v3) and ground.
-- *) A LED with 330 Ohm resistor to pin 7. Indicates that USB is configured.
-- *) A crystal of 12 MHz to pin 2 and pin 3 with 2*18 pF capacitors to ground.
-- Settings are also given to use the internal oscilator of the PIC so no need
-- for the 12 MHz crystal which saves you a crystal and 2 pins on the chip.
-- The configuration runs at an internal clock of 48 MHz.
-- For debugging purposes the USART is used to send information (pin 6)
--

pragma target clock       48_000_000

-- Settings for external 12 MHz crystal and system clock 48 MHz.
pragma target OSC           HS       -- External crystal
pragma target CLKOUTEN      ENABLED  -- CLKOUT function is enabled
pragma target PLLMULT       N4X      -- PLL Multipler Selection Bit, 4x Output Frequency Selected

-- Settings for internal clock and system clock 48 MHz.
-- pragma target OSC           INTOSC_NOCLKOUT -- Internal clock
-- pragma target CLKOUTEN      DISABLED -- CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
-- pragma target PLLMULT       N3X      -- PLL Multipler Selection Bit, 3x Output Frequency Selected

-- Other fuses
pragma target CPUDIV        P1       -- NO CPU system divide
pragma target USBLSCLK      F48MHZ   -- System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
pragma target PLLEN         ENABLED  -- 3x or 4x PLL Enabled
pragma target FCMEN         DISABLED -- Fail-Safe Clock Monitor is disabled
pragma target WRT           DISABLED -- Write protection off
pragma target STVR          ENABLED  -- Stack Overflow or Underflow will cause a Reset
pragma target LPBOR         DISABLED -- Low-Power BOR is disabled
pragma target IESO          DISABLED -- Internal/External Switchover Mode is disabled
pragma target PWRTE         DISABLED -- power up timer
pragma target BROWNOUT      DISABLED -- no brownout detection
pragma target WDT           DISABLED -- Watchdog disabled
pragma target MCLR          EXTERNAL -- External reset
pragma target LVP           ENABLED  -- allow low-voltage programming
pragma target VOLTAGE       MAXIMUM  -- brown out voltage
pragma target CP            DISABLED -- Program memory code protection is disabled

OSCCON        = 0b1111_1100          -- Select PLL,3x, 16MHz internal oscillator

-- Enable weak pull-up for port a and and set port c to output just to
-- have no floating input pins.
OPTION_REG_WPUEN = FALSE             -- Enable weak pull-up for port a.
WPUA          = 0b0011_1000          -- Weak-pull up for relevant port a bits.
TRISC         = 0b0000_0000          -- Port c output.

alias configured_led is pin_c3       -- Pin 7.
pin_c3_direction = output
                                 
-- Use the USB driver on an interrupt basis. This makes it possible to use
-- delays in the main loop since timing becomes less critical.
const USB_INTERRUPT_DRIVEN = TRUE
include usb_serial
include print

-- constants
const byte str_welcome[] = "JALLIB USB Serial Demo app\n"

-- setup the USB serial library
usb_serial_init()

-- variables
var bit has_shown_welcome_msg = true
var byte ch

var dword counter = 0
var word timer = 0

-- main loop
forever loop
  
   if !defined(USB_INTERRUPT_DRIVEN) then
      -- When the interrupt mode is not used we need to poll the usb ISR function 
      -- on a regular base, in order to serve the USB requests otherwise
      -- this call can be removed.                              
      usb_serial_flush()
   end if
   
   -- check if USB device has been configured by the HOST
   if ( usb_cdc_line_status() !=  0x00 )  then
      if !has_shown_welcome_msg then
         has_shown_welcome_msg = true
         print_string( usb_serial_data, str_welcome )
      end if   
      configured_led = TRUE   
   else
      has_shown_welcome_msg = false
      configured_led = FALSE   
   end if
   
   -- check for input character
   if usb_serial_read( ch ) then
      -- echo input character
      usb_serial_data = ch      
   end if

end loop
