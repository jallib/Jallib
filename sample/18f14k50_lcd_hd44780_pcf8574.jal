-- --------------------------------------------------------------------------
-- Title: Test program for lcd_hd44780_pcf8574.jal (basic / interface test)
-- Author: Eur Van Andel, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by: Rob Hamerling, Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description:
-- This sample shows how to setup an LCD and writes
-- "Hello World" to the first line, using a string and the print library.
-- Line 3 and line 4 are used as well, but will work properly only on a 4x20 LCD.
-- A counter is printed to show the running forever loop.     
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources: http://www.dfrobot.com/wiki/index.php?title=I2C/TWI_LCD1602_Module_(SKU:_DFR0063)
-- 
-- Notes: 
-- setup: an hd44780 compatible display, used in 4-bit mode. 
-- connect via an PCA8574 with i2c address 0x4E (0x27 * 2)     
-- --
-- pin 0 - RS
-- pin 1 - RW
-- pin 2 - E
-- pin 3 - backlight
-- pin 4..7 - data nibble
-- 
-- --------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_lcd_hd44780_pcf8574.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off
;@jallib section i2c
-- I2C io definition, using hardware I2C
alias i2c_scl            is pin_b6
alias i2c_scl_direction  is pin_b6_direction
alias i2c_sda            is pin_b4
alias i2c_sda_direction  is pin_b4_direction


-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

enable_digital_io()

const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB;  i2c_hw only)

;include i2c_hardware
include i2c_software                

i2c_initialize()

include print                          -- formatted output library
include lcd_hd44780_pcf8574          -- LCD lib with serial interface

lcd_backlight(on)
lcd_init()                              -- initialize LCD

const byte str1[] = "Hello world!"      -- define strings
print_string(lcd, str1)                 -- show hello world!
       
var byte counter = 0

forever loop                           -- loop forever

   counter = counter + 1               -- update counter
   lcd_cursor_position(1,0)            -- second line, first column (0)
   print_byte_hex(lcd, counter)        -- output in hex format
   delay_100ms(3)                      -- wait a little

   lcd_backlight(off)
   delay_100ms(1)                      -- wait a little
   lcd_backlight(on)

   if counter == 255 then              -- counter wrap
      lcd_cursor_position(1,1)         -- 2nd line, 2nd char
      lcd = " "                        -- clear 2nd char
      lcd = " "                        -- clear 3rd char
   end if

end loop

