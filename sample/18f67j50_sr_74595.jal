-- ----------------------------------------------------------------------------
-- Title: Test program for 74595 shift register
-- 
-- Author: Joep Suijs, Copyright (c) 2014..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
--  
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Testing lcd_backlight 
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
--  
-- Notes: 
--    test setup: 3 x 74595 cascaded
--    sr_sda connects to SER_IN / DS pin of 74595 #1
--    SER_OUT / Q7S of 74595 #1 connects to SER_IN / DS pin of 74595 #2
--    SER_OUT / Q7S of 74595 #2 connects to SER_IN / DS pin of 74595 #3
--    sr_scl is connected the SRCK / SHCP pin of all three 74595 chips
--    sr_rck is connected the RCK / STCP pin of all three 74595 chips
--    sr_g is connected the G / OE pin of all three 74595 chips      
--
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f67j50_ms.jal
--    * test : test_sr_74595.jal
--

;@jallib section chipdef
-- chip setup
include 18f67j50                   -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      INTOSC_NOCLKOUT_PLL      -- internal oscillator
                                                -- and using PLL
pragma target PLLDIV   P2          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96/2): 48 MHz
pragma target FCMEN    DISABLED    -- no fail-safeclock monitoring
pragma target IESO     DISABLED    -- no in/ext oscillator switchover
pragma target WDT      CONTROL     -- watchdog software controlled
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging

WDTCON_SWDTEN = OFF                 -- disable watchdog

-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
OSCTUNE_PLLEN = enabled            -- activate PLL module
--
WDTCON_SWDTEN = OFF                -- disable WDT
--
_usec_delay (1_000)                -- allow PLL to stabilize

enable_digital_io() -- disable analog I/O (if any)

include delay
include seven_segment

-- define IO pin's 
alias sr_rck   is pin_a0   ; RCK (parallel clock / load, rising edge)
alias sr_sda   is pin_a1   ; SER_IN   / DS
alias sr_scl   is pin_a2   ; SRCK  (serial clock, rising egde)
alias sr_g     is pin_a3   ; G (output enable, low = enable)

-- set IO pins to output   
pin_a0_direction = output
pin_a1_direction = output
pin_a2_direction = output
pin_a3_direction = output

-- include library & turn outputs on   
include shift_register_74595
sr_output_enable(1)  ; activate shift register outputs 

forever loop

   -- set one output of each shift register      
   sr_write(1)   ; data for 74595 #3 (end of chain) 
   sr_write(2)   ; data for 74595 #2 (middle one) 
   sr_write(4)   ; data for 74595 #1 (directly connected to PIC) 
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- show numbers on seven segment display, connected to shift register
   sr_write(seven_from_digit(1))
   sr_write(seven_from_digit(2))
   sr_write(seven_from_digit(3))
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- clear outputs of all 3 shift registers
   sr_write(0)
   sr_write(0)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- set all outputs of shift register #1
   sr_write(255)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs of #2 become high)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs of #3 become high)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs are low now)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
end loop


