-- Title: Sample using software implemented USART.
-- Author: Sebastien Lelong, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to setup a simple software serial communication link.
-- It echoes every received char.
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_serial_sw_echo.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

include delay

-- set all IO as digital
enable_digital_io()


-- ok, now setup serial
-- setup speed. Standard values are: 57_600, 19_200, 9_600, 2_400, ...
-- Note: as it's a software implementation, not all baudrates can work with 
-- our any clock. Higher speeds gives too much errors. We'll use a lower
-- baudrate here.
--
-- because it's a software implementation, we also need to define 
-- tx and rx pins. How clever we are: we use the same pin as in hardware,
-- so it works out of the box with any board having an USART module...
--
-- finally, how levels are understood ? Inverted or not ?
-- Note in hardware serial, it's inverted. Since we're talking to a PC
-- we need to invert the signal
;@jallib section serial_software
const serial_sw_baudrate = 9600
alias serial_sw_tx_pin           is pin_C6
alias serial_sw_tx_pin_direction is pin_C6_direction
alias serial_sw_rx_pin           is pin_C7

serial_sw_tx_pin_direction = output

-- now we can use serial_software module
include serial_software
-- initialize the whole with our parameters
serial_sw_init()

-- inform user PIC is ready !
serial_sw_write("!")

-- let's build our loop
var byte char	-- will store received char
forever loop
	if serial_sw_read(char)
	then
		serial_sw_write(char)	-- that's the echo...
	end if
end loop
