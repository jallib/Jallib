-- ----------------------------------------------------------------------------
-- Title: Test program for sicr remote control library.
--  
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: 
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
-- 
-- Notes: 
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_sirc.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

enable_digital_io()                -- make all pins digital I/O

-- generic setup (see releated examples for more details)  
;@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
include print
include delay

-- sicr setup
const sirc_transmitter = true    ; we want to transmit sirc codes  
var bit sirc_pulse_out is pin_B0 ; define output (IR LED) pin
pin_B0_direction = output        ; set pin to output       
sirc_pulse_out = low

const sirc_receiver    = true    ; we want to receive sirc codes
var bit sirc_pulse_in is pin_B1  ; define input (IR receiver) pin
pin_B1_direction = input         ; set pin to input (should be default)


include sirc

;i2c_initialize()


-- we're alive
const byte str1[] = "Test.\r\n" 
print_string(serial_hw_data, str1)


forever loop
   
   serial_hw_data = "*"   
   print_crlf(serial_hw_data)
   
   delay_100ms(10)
end loop