-- -----------------------------------------------------------------------------
-- Title: Sample program for the nRF24L01+
--
-- Author: Rob Jansen, Copyright (c) 2019..2020 all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This program waits for a message to be received from another
--              nRF24L01 device, adds 'Reply : ' to the received message and
--              returns the modified message back to the tranmit address.
--              Three LEDs are used to indicate the status of the transmission:
--              -) Yellow LED. A message was received. This LED will blink shortly.
--              -) Red LED. The transmission of the return message failed.
--              -) Green LED. The transmission of the return message went OK.
--              Next to that the program uses a test input pin for forcing the
--              transmission of a "Hello" message to the transmit address. 
--              This message will be repeated as long as the test input pin is 
--              held LOW. In this case the yellow LED will also blink with each
--              message sent.
--                 
-- Sources:
--
-- Notes:       See sample program 16f1825_nrf24l01.jal for the counter part of
--              this sample program (the transmitter of the original message).
--     
include 16f1823                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      ENABLED         -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0000_0111       -- Weak pull-up for unused pins.
WPUC = 0b0000_0000       -- No weak pull-up for port C, all pins used.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()

-- nRF24L01+ pin definition.
alias nrf24_spi_sck is pin_C0 -- Pin 10 for 14 pin DIP
alias nrf24_spi_sck_direction is pin_C0_direction
alias nrf24_spi_sdi is pin_C1 -- Pin 9 for 14 pin DIP.    
alias nrf24_spi_sdi_direction is pin_C1_direction   
alias nrf24_spi_sdo is pin_C2 -- Pin 8 for 14 pin DIP.
alias nrf24_spi_sdo_direction is pin_C2_direction 
alias nrf24_ce_pin  is pin_C3 -- Pin 7 for 14 pin DIP. 
alias nrf24_ce_pin_direction is pin_C3_direction 
alias nrf24_csn_pin is pin_C4 -- Pin 6 for 14 pin DIP. 
alias nrf24_csn_pin_direction is pin_C4_direction 

-- nRF24L01 transmit and receive address for this module must be defined, 5 bytes.
-- In case of more receive addresses only the first byte (LSB) of the receive 
-- address is used, all remaining address bytes are the same.
-- Address must be given with Least Significant Byte first {LSB, .., .., .., MSB}.
const byte NRF24_TRANSMIT_ADDR[5] = {0x01, 0x22, 0x33, 0x44, 0x55}
const byte NRF24_RECEIVE_ADDR[5]  = {0x66, 0x77, 0x88, 0x99, 0xAA}
-- Note: If you want to make a second device using the counter part sample 
-- program 16f1825_nrf24l01.jal then use these addresses instead when running 
-- this sample program on your second device.
-- const byte NRF24_TRANSMIT_ADDR[5] = {0x02, 0x22, 0x33, 0x44, 0x55}
-- const byte NRF24_RECEIVE_ADDR[5]  = {0xBB, 0xCC, 0xDD, 0xEE, 0xFF}

include nrf24l01
nrf24_init() -- This also sets the receive address on pipe 1.
nrf24_set_transmit_address(NRF24_TRANSMIT_ADDR)

-- LED on/off definitions.
const bit LED_ON = TRUE
const bit LED_OFF = FALSE

-- LED pin definitions.
alias led_red is pin_C5
pin_C5_direction = output
alias led_green is pin_A4
pin_A4_direction = output
alias led_yellow is pin_A5
pin_A5_direction = output

-- Test input pin, active low.
alias test_input is pin_A2
pin_A2_direction = input

const byte hello[] = "Hello World!"
const byte reply[] = "Reply : "
var byte buffer[NRF24_PAYLOAD_SIZE] -- Size defined in nRF24L01 library.
var byte counter, index_1, index_2, pipe
var bit sending_data

led_red = LED_ON
led_green = LED_ON
led_yellow = LED_ON

-- Send a welcome message at start up.
nrf24_power_up_tx()
nrf24_send_data(hello, count(hello))  
while !nrf24_tx_ready() loop 
   -- Empty: Wait for the transmission to complete.
end loop

led_red = LED_OFF
led_green = LED_OFF
led_yellow = LED_OFF

-- Let's wait for a message to arrive.
nrf24_power_up_rx()
sending_data = FALSE

forever loop

   -- Check for new data.
   if nrf24_get_data(pipe, counter) then
      led_yellow = LED_ON
      led_red = LED_OFF
      led_green = LED_OFF
      -- Add reply text to return message.
      for count(reply) using index_1 loop
         buffer[index_1] = reply[index_1]
      end loop 
      index_1 = count(reply)
      index_2 = 0
      -- Now copy the received text but not more than the buffer size.
      while (counter > 0) & (index_1 < NRF24_PAYLOAD_SIZE) loop
         buffer[index_1] =  nrf24_read_buffer[index_2]
         counter = counter - 1
         index_1 = index_1 + 1         
         index_2 = index_2 + 1
      end loop
      -- Send this message back.
      nrf24_power_up_tx()
      nrf24_send_data(buffer, index_1)
      sending_data = TRUE
   end if 
   
   -- If transmission is done, indicate the result of the transmission and
   -- start the receiver again. 
   if sending_data & nrf24_tx_ready() then
      led_yellow = LED_OFF
      if nrf24_tx_ok() then
         led_red = LED_OFF
         led_green = LED_ON
      else
         led_red = LED_ON
         led_green = LED_OFF
      end if
      -- Enable reiver again.
      nrf24_power_up_rx()
      sending_data = FALSE
   end if   

   -- If the test pin is low we transmit the hello message (if not transmitting).
   if !sending_data & !test_input then
      -- Debounce and repetition time. Will repeat as long as input is low.
      _usec_delay(100_000)
      if !test_input then
         nrf24_power_up_tx()
         nrf24_send_data(hello, count(hello))
         sending_data = TRUE
         -- In this case we use the yellow LED to show that we are sending something.
         led_yellow = LED_ON
         led_red = LED_OFF
         led_green = LED_OFF
      end if
   end if

end loop

