-- Title: sample for math.jal, showing use of abs() and sign() functions
-- Author: Eur van Andel Copyright (c) 2010, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4m
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: shows 3 signed variables which can be incremented and decremented
-- and the result of the abs() and sign() functions on these variables.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------

include 18f2685
pragma target clock 20_000_000
pragma target OSC  HS
pragma target XINST disabled
pragma target WDT  control
pragma target LVP  enabled 
pragma target MCLR external

WDTCON_SWDTEN = 0b_0             -- no watchdog

enable_digital_io()              -- no analog functions used


-- pick one of the following LCD connections:

const byte LCD_ROWS = 4          -- Sterm LCD + keyboard on single pin_a4
const byte LCD_CHARS = 20

var bit lcd_sterm_pin is pin_a0     -- Sterm LCD & keyboard \
var bit lcd_sterm_pin_dir is pin_a0_direction   --               >  single pin LCD & keyboard connection
include lcd_sterm_master      -- library for LCD and keyboard   /   this has PIC inside as well

-- alias LCD_RS           is pin_b5       -- LCD command/data select       \
-- alias LCD_EN           is pin_b4       -- LCD data trigger               \
-- alias LCD_dataport     is portb_low    -- LCD data nibble                 > traditional 6 pin LCD connection
-- portb_direction        = all_output    -- LCD data is portb_low          /
-- include lcd_hd44780_4                  -- LCD library with 4 data lines /
-- lcd_init()

include math                              -- duh
include print                             -- nice formatted output

var sbyte  x = 3
var sword  y = -3
var sdword z = 5



procedure keyboard() is

   if getkey() == 1 then  x = x + 1    end if  -- manual override
   if getkey() == 4 then  x = x - 1    end if

   if getkey() == 2 then  y = y + 1    end if
   if getkey() == 5 then  y = y -1     end if

   if getkey() == 3 then  z = z + 1    end if
   if getkey() == 6 then  z = z -1     end if


   if getkey() == 7 then         end if
   if getkey() == 0x0A then      end if

   if getkey() == 8 then      end if

   if getkey() == 0x0F then      end if
   if getkey() == 0x0E then      end if

   if getkey() == 9 then         end if
   if getkey() == 0x0D then      end if


   if getkey() == 0x0B then      end if
   if getkey() == 0 then         end if
   if getkey() == 0x0C then      end if

end procedure


-- START MAIN

delay_100ms(5)
lcd_clear_screen
delay_100ms(5)
lcd_clear_screen


--                 12345678901234567890
const byte str0[]="math demo sample    "  -- print banner
const byte str1[]="abs() and sign()    "
const byte str2[]="use keys 1..6       "


lcd_cursor_position(0,0)
print_string(lcd, str0)
lcd_cursor_position(1,0)
print_string(lcd, str1)

delay_1s(5)

lcd_clear_screen

forever loop

   lcd_cursor_position(0,0)
   lcd = "x" lcd = "="lcd = " "
   print_sbyte_dec(lcd, x)
   lcd = " "
   lcd = "a" lcd = "b" lcd = "s"
   lcd = " "
   print_byte_dec(lcd, abs8(x))
   lcd = " "
   lcd = "s" lcd = "i" lcd = "g" lcd = "n"
   lcd = " "
   print_sbyte_dec(lcd, sign8(x))
   if x < 10 & x > 0 then
      lcd = " "
      lcd = " "
   else
      lcd = " "
   end if


   lcd_cursor_position(1,0)
   lcd = "y" lcd = "="lcd = " "
   print_sword_dec(lcd, y)
   lcd = " "
   lcd = "a" lcd = "b" lcd = "s"
   lcd = " "
   print_word_dec(lcd, abs16(y))
   lcd = " "
   lcd = "s" lcd = "i" lcd = "g" lcd = "n"
   lcd = " "
   print_sbyte_dec(lcd, sign16(y))
   if y < 10 & x > 0 then
      lcd = " "                  -- cleaning junk from LCD
      lcd = " "
   else
      lcd = " "
   end if

   lcd_cursor_position(2,0)
   lcd = "z" lcd = "="lcd = " "
   print_sdword_dec(lcd, z)
   lcd = " "
   lcd = "a" lcd = "b" lcd = "s"
   lcd = " "
   print_dword_dec(lcd, abs32(z))
   lcd = " "
   lcd = "s" lcd = "i" lcd = "g" lcd = "n"
   lcd = " "
   print_sbyte_dec(lcd, sign32(z))
   lcd = " "
   if z < 10 & x > 0 then
      lcd = " "
      lcd = " "
   else
      lcd = " "
   end if

   lcd_cursor_position(3,0)
   print_string(lcd, str2)

   delay_1ms(200)   -- proper LCD refresh rate

   keyboard()

end loop
