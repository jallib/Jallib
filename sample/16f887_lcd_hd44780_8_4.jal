-- ------------------------------------------------------
-- Title: LCD sample program for the Microchip PIC 16f887
--
-- Author: Rob Hamerling, Copyright (c) 2009..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
--    LCD sample program for Microchip PIC 16f887.
--    Shows some texts on a 2 x 16 LCD display.
--    Blinks also a LED on pin_A0 to show program is running.
--    Uses:  - LCD library lcd_hd44780_8.jal
--           - 8 LCD data lines
--           - DataPath: 2 nibbles
--
-- Sources:
--
-- Notes:
--  - File creation date/time: 14 Mar 2014 16:31:13
--  - This file is generated by script "lcd-sample.cmd"
--    and a table "lcd-sample.lst".  Do not change!
--
-- ------------------------------------------------------
--
include 16f887                       -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target OSC HS                  -- HS crystal or resonator
pragma target clock 20_000_000        -- oscillator frequency
pragma target WDT      CONTROL      -- watchdog
pragma target LVP  enabled            -- allow low voltage programming
pragma target MCLR external
WDTCON_SWDTEN = OFF                 -- disable WDT
--
enable_digital_io()                   -- disable analog I/O (if any)
--
pin_A0_direction       =  output      -- blinking LED
--
const byte LCD_ROWS    =  2           -- LCD with 2 lines
const byte LCD_CHARS   =  16          -- and 16 characters per line
--
alias     lcd_en       is pin_D3      -- data trigger
alias     lcd_rs       is pin_D2      -- command/data select.
pin_D3_direction       = output
pin_D2_direction       = output
--
alias     lcd_dataport_low  is portC_high
alias     lcd_dataport_high is portD_high
portC_high_direction   = all_output
portD_high_direction   = all_output
--
include lcd_hd44780_8
--
lcd_init()                            -- init the lcd controller
--
include delay                         -- fetch delay library
--
-- --- generate LCD screen activity ---------
var byte line1[LCD_CHARS] = "<= 2 x 16 LCD =>"
var byte line2[LCD_CHARS] = "0123456789ABCDEF"
var byte i, k
forever loop
   lcd_clear_screen()             -- (to first line)
   delay_100ms(5)
   for LCD_CHARS using i loop
      lcd_write_char(line1[i])    -- write using procedure
   end loop
   delay_100ms(5)
   lcd_cursor_position(1,0)       -- to second line
   for LCD_CHARS using i loop
      k = (i * 7) & 0x0F          -- "random" character(index)
      lcd_cursor_position(1,k)    -- corresponding position
      lcd = line2[k]              -- write using pseudo variable
      delay_100ms(3)              -- pause between bytes
      pin_A0 = !pin_A0            -- flip the LED
   end loop
   delay_100ms(10)
end loop
--
