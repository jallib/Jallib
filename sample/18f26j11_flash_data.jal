-- --------------------------------------------------------------------
-- Title: How to use flash memory of an 18f26j11 for variable data
--
-- Author: Rob Hamerling, Copyright (c) 2012..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Example of how to use flash (code) memory to save variable data over
-- reset/power-off cycles of PICs without EEPROM.
-- In this sample a counter is incremented at every start of the program
-- and the new value is saved in flash memory.
-- The current value of the counter is shown by the number of blinks of a led.
-- This shows the number of resets since the time the program was loaded.
-- .
-- A 'signature' is the first part of the overlay. This shows to the program
-- that flash memory was ever written (first time issue). Only when this
-- signature is found in the first few bytes of the reserved block of flash
-- memory the data block may be restored.
-- In this sample the signature is "RobH".
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
-- - This sample shows the use of flash_data library
--
-- =====================================================================

include  18f26j11                                  -- target chip

-- Internal oscillator is configured for 8 MHz

pragma target clock         8_000_000              -- intosc 8 MHz

-- ---------- configuration bits settings -------------------------
pragma target WDT           CONTROL                -- watchdog software controlled!
pragma target STVR          DISABLED               -- reset on stack over/under flow
pragma target XINST         DISABLED               -- extended instruction set
pragma target DEBUG         DISABLED               -- background debugging
pragma target CP0           DISABLED               -- code block 0 not protected
pragma target OSC           INTOSC_NOCLKOUT        -- oscillator type
pragma target T1DIG         DISABLED               -- no timer1 oscillator
pragma target LPT1OSC       HIGH_POWER             -- high power timer 1
pragma target FCMEN         DISABLED               -- fail safe clock monitor
pragma target IESO          DISABLED               -- no osc switch over
pragma target WDTPS         P64                    -- watchdog timeout about 1/4 sec
pragma target DSWDTOSC      INTOSC                 -- for deep sleep WDT
pragma target RTCOSC        INTOSC                 -- RTCC uses INT Osc
pragma target BROWNOUT      DISABLED               -- no brownout detection
pragma target DSWDTEN       DISABLED               -- no deep sleep WDT
pragma target DSWDTPS       P2                     -- (no deep sleep WDT)
pragma target IOL1WAY       DISABLED               -- no I/O lock
pragma target MSSPMASK      B5                     -- (no ext ram)
pragma target WPFP          P0                     -- start of code protection
pragma target WPEND         PWPFP_END              -- code protection from ... to end
pragma target WPCFG         DISABLED               -- no code protection!
pragma target WPDIS         DISABLED               -- no write protection

-- --------- JAL extensions --------------------

include  delay                                     -- delay support library

-- --------- block of data to be saved in flash (code) memory -----------------

const  byte*3  FLASH_RESERVED = 0x00F800           -- address of 1KB flash memory
                                                   -- to save data


var  byte      flash_data[64]                      -- block of data to be saved in and
                                                   -- restored from flash memory

include flash_data                                 -- the library

-- --- local function prototypes ----------------------------------------------

procedure  setup_pic()

-- ----------------------------------------------------------------------------

var  byte      signature[4]    at flash_data[0]  = "RobH"     -- flash block identification
var  word      reset_counter   at flash_data[4]  = 0          -- initial 'reset' value
var  byte      filler[8]       at flash_data[6]  = "ABCDEFGH" -- dummy for read back check

alias  LED is pin_B1                               -- visual indication of reset-counter


-- ===============================================================
--
--   M A I N L I N E
--
-- ===============================================================

setup_pic()                                        -- init PIC

pin_B1_direction = OUTPUT                          -- make LED-pin output

LED = OFF                                          -- initial status of LED

-- check if signature is present in flash memory
-- if yes replace the contents of the data block by the contents of the flash block
if ( (flash_read_word(0) == 0x6F52)  &             -- "Ro" 1st part of flash-ID found
     (flash_read_word(2) == 0x4862) ) then         -- "bH" 2nd part of flash-ID found
   flash_restore_block()                           -- flash-ID found: restore block
end if

reset_counter = reset_counter + 1                  -- increment counter
for reset_counter loop                             -- show value of counter
   LED = ON
   delay_100ms(2)
   LED = OFF
   delay_100ms(2)
end loop

flash_save_block()                                 -- save updated block to flash memory

forever loop
   LED = OFF
end loop


-- -------------------------------------------------------
--  Perform basic PIC Setup
-- -------------------------------------------------------
procedure  setup_pic() is

   enable_digital_io()                             -- disable all analog I/O

   INTCON         = 0b0000_0000                    -- no interrupts

   OSCCON_IRCF    = 0b111                          -- INTOSC at 8 MHz
   OSCCON_SCS     = 0b00                           -- primary clock source INTOSC
   OSCCON_IDLEN   = 0                              -- for sleep (not idle) mode

   REFOCON_ROON   = FALSE                          -- no oscillator output

   WDTCON         = 0b0000_0000                    -- disable watchdog
   DSCONH_DSEN    = FALSE                          -- no deep sleep mode

   T1CON          = 0b0000_0000                    -- Tmr1 off
   T2CON          = 0b0000_0000                    -- Tmr2 off

   portA          = 0b0000_0000                    -- )
   portB          = 0b0000_0000                    -- ) init ports
   portC          = 0b0000_0000                    -- )

   portA_direction = ALL_OUTPUT                    -- )
   portB_direction = ALL_OUTPUT                    -- ) pin directions
   portC_direction = ALL_OUTPUT                    -- )

end procedure

