-- ----------------------------------------------------------------------------
-- Title: Test program for bit_array_1.jal
-- 
-- Author: Matthew Schinkel, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: Joep Suijs
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This samples shows usage of the bit array library to
--              create a bit array with up to 16383 entries
--  
-- Sources:
-- 
-- notes:
-- uses large_array_1 library when BIT_ARRAY_1_SIZE > 2047
-- 
-- const dword BIT_ARRAY_1_SIZE = 100   -- choose number of array variables
-- include bit_array_1                  -- include the array library
-- alias test is bit_array_1            -- rename/alias the array to test
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_bit_array.jal
--


;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section serial
const serial_hw_baudrate = 115_200

include serial_hardware
serial_hw_init()

const dword BIT_ARRAY_1_SIZE = 203     -- choose number of array variables
include bit_array_1                    -- include the array library
alias test is bit_array_1              -- rename/alias the array to test

;example write bit
test[200] = 1
test[201] = 0
test[202] = 1

;example read bit
var bit x,y,z
x = test[200]
y = test[201]
z = test[202]

-- send these three bits via serial port 10 times
for 10 loop
   serial_hw_data = x
   serial_hw_data = y
   serial_hw_data = z
end loop

-- show the array byte that contains these bits
-- location is 200 / 8 = 25
-- non-valued bits will be unpredictable
-- in this sample, output will be byte XXXXX101
for 10 loop
   serial_hw_data = bit_array_1_byte_array[25]
end loop
