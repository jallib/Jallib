-- ---------------------------------------------------------------------------
-- Title: LCD sample program for the Microchip PIC 16f88 with custom characters
--
-- Author: Rob Hamerling, Copyright (c) 2010, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
--    LCD sample program for Microchip PIC 16f88.
--    Shows the use of custom (user defined) characters.
--    Blinks also a LED on pin_A0 to show program is running.
--    Uses:  - LCD library lcd_hd44780_4.jal
--           - 4 LCD data lines
--           - DataPath: 1 nibble
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--    The Jallib libraries for HD47780-based LCDs are setup for 5x8 pixel
--    characters (effectively 5x7 to leave the cursor line free).
--    The HD47780 has memory reserved for 8 user-defined characters (in CGRAM).
--    Custom characters occupy positions 0 to 7. To define and display such
--    a character you should use the values 0 to 7 (binary! not "0" to "7").
--    Each character is defined as an 8 byte array to form a 8x8 bit
--    pattern. The 3 left (high order) bits of each pixel line are not used.
--    A binary 0 in the pattern defines an 'off' pixel, a binary 1 an 'on' pixel.
--    This sample program demonstrates how to use positions 0 to 3 to display
--    4 different arrows.
--
-- ------------------------------------------------------
--
include 16f88                                   -- target PICmicro
--
pragma target clock 20_000_000                  -- oscillator frequency
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target OSC HS                            -- HS crystal or resonator
pragma target WDT  disabled                     -- WDT off
pragma target LVP  enabled                      -- allow low voltage programming
pragma target MCLR external
--
enable_digital_io()                             -- set all pins to digital I/O
--
alias  led        is pin_A0                     -- pin with LED
pin_A0_direction  =  output                     -- is output
--
-- ----------- setup for LCD -------------------------------------------------
--
const byte LCD_ROWS    =  2                     -- LCD with 2 lines
const byte LCD_CHARS   =  16                    -- and 16 characters per line
--
alias     lcd_en       is pin_A2                -- data trigger
alias     lcd_rs       is pin_A3                -- command/data select.
pin_A2_direction       = output
pin_A3_direction       = output
--
alias     lcd_dataport is portB_low             -- 4 data lines used
portB_low_direction    = all_output
--
include lcd_hd44780_4
--
lcd_init()                                      -- init the lcd controller
--
-- ---------------------------------------------------------------------------
--
include delay                                   -- delay library
--
const byte title[]   = "< Custom chars >"       -- for top line of LCD
const byte custom0[] = { 0b_00011111,
                         0b_00011110,
                         0b_00011100,
                         0b_00011010,
                         0b_00010001,
                         0b_00000000,
                         0b_00000000,
                         0b_00000000 }          -- upper left
const byte custom1[] = { 0b_00011111,
                         0b_00001111,
                         0b_00000111,
                         0b_00001011,
                         0b_00010001,
                         0b_00000000,
                         0b_00000000,
                         0b_00000000 }          -- upper right
const byte custom2[] = { 0b_00000000,
                         0b_00000000,
                         0b_00010001,
                         0b_00001011,
                         0b_00000111,
                         0b_00001111,
                         0b_00011111,           -- lower right
                         0b_00000000 }
const byte custom3[] = { 0b_00000000,
                         0b_00000000,
                         0b_00010001,
                         0b_00011010,
                         0b_00011100,
                         0b_00011110,
                         0b_00011111,           -- lower left
                         0b_00000000 }

lcd_define(0,custom0)                           -- )
lcd_define(1,custom1)                           -- ) send custom chars
lcd_define(2,custom2)                           -- ) 1..4 to LCD CGRAM
lcd_define(3,custom3)                           -- )

var byte i
forever loop
   lcd_clear_screen()                           -- erase whole display
   delay_100ms(10)
   for LCD_CHARS using i loop                   -- title on first line
      lcd = title[i]
   end loop
   delay_100ms(10)
   lcd_cursor_position(1,0)                     -- second line
   for 4 using i loop                           -- 4 custom characters 1..4
      lcd = "0" + i                             -- display value of i in ASCII
      lcd = "="
      lcd = i                                   -- display custom character
      lcd = " "
      delay_100ms(10)
   end loop
   delay_100ms(20)
   led = !led                                   -- flip the LED
end loop
--
