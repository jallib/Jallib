-- ------------------------------------------------------
-- Title: Sample data EEPROM write and read for the Microchip PIC18F6722
--
-- Author: Rob Hamerling, Copyright (c) 2008..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r3
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample all data EEPROM write and read for the Microchip PIC18F6722.
-- Blinks a LED quickly as long as read back data matches written data,
-- but blinks slowly when data doesn't match.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--

-- chip setup
include 18f6722

-- target frequency to 20 MHz
pragma target clock        20_000_000

-- fuses
pragma target OSC           HS          -- high speed resonator
pragma target FCMEN         DISABLED    -- no clock monitoring
pragma target IESO          DISABLED    -- no oscillator switch over
pragma target PWRTE         DISABLED    -- no power up delay
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDT           CONTROL     -- watchdog
pragma target CCP2MUX       pin_E7      -- assign CCP2 pin
pragma target LPT1OSC       HIGH_POWER  -- no low power timer
pragma target MCLR          EXTERNAL    -- master reset
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED    -- no extended instruction set
pragma target DEBUG         DISABLED    -- no background debugging

WDTCON_SWDTEN = OFF                     -- no watchdog

pragma eedata 129,130,131,132           -- initial contents

enable_digital_io()                     -- disable analog modules

include pic_data_eeprom                 -- data eeprom library

-- LED IO definition
alias led is pin_A0
pin_A0_direction = output

var word i = 0                          -- offset counter
var byte d1, d2                         -- data bytes

forever loop
  d1 = byte(i % 256)                    -- byte to write
  data_eeprom_write(i, d1)              -- write byte
  d2 = data_eeprom(i)                   -- read back
  led = !led                            -- flip the LED
  if (d2 != d1) then                    -- data not matching
    _usec_delay(500000)                 -- blink slowly
  else                                  -- matching
    _usec_delay(50000)                  -- blink fastly
  end if
  i = (i + 1) % 1024                    -- max 1024 bytes eeprom
end loop

