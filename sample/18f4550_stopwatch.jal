-- Title: Test program for Stopwatch
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This example shows basic usage stopwatch library which can
--              be used to time events
--
-- Sources:
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_stopwatch.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section serial
const serial_hw_baudrate = 115_200

enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize


include delay

-- setup uart for communication
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- set stopwatch variable size, (2 = word) or (4 = dword)
const STOPWATCH_VAR_SIZE = 4 -- (4 is default if not defined)
--
-- the lowest time unit to measure
const STOPWATCH_MIN_VALUE = STOPWATCH_NS -- (STOPWATCH_NS is default if not defined)
--
-- choose what timer to use
const STOPWATCH_USE_TIMER = 1 -- (1 is default if not defined)
include stopwatch -- include the library
--
stopwatch_init()

-- main program here

-- print serial start characters
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = " "

stopwatch_start() -- start the stopwatch

-- create some delay to measure
asm nop
;delay_1us() -- some delay
;delay_1ms(1) -- some delay
;delay_1s(1) -- some delay

stopwatch_stop() -- stop the stopwatch

-- print error message if stopwatch time was too long
if stopwatch_time_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error1[] = "Stopwatch time overflow error occurred"
   print_string(serial_hw_data, error1)
end if

-- print error message if stopwatch instruction count ran too long
if stopwatch_cycle_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error2[] = "Stopwatch instruction cycle overflow error occurred"
   print_string(serial_hw_data, error2)
end if

-- measure instructions run and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch_cycles)
const byte instructions[] = " instruction(s)"
print_string(serial_hw_data, instructions)

-- measure time taken and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch)

-- print the time unit of measurement
if STOPWATCH_MIN_VALUE == STOPWATCH_NS then
   serial_hw_data = "n"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_US then
   serial_hw_data = "u"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_MS then
   serial_hw_data = "m"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_S then
   serial_hw_data = "s"
end if

-- print serial end characters
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
