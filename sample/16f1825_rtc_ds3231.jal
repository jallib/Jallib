-- -----------------------------------------------------------------------------
-- Title: Sample program for the DS3231 RTC Real Time Clock IC.
-- Author: Rob Jansen, Copyright (c) 2021..2021, all rights reserved.
-- Adapted-by:
-- Revision: $Revision$
-- Compiler: 2.5r5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program for controlling the DS3231 RTC Real Time Clock. It 
--              sets the time and date and prints the results on the screen via a USART.
--              It also demonstrates the alarm functionality and more.
--
include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset internal
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0011_1111       -- Weak pull-up on all pins.
WPUC = 0b0011_1111       -- Weak pull-up on all pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()      -- All pins digital IO
_usec_delay(100_000)     -- Give the hardware some time to stabilize.

-- Settings for the USART and initialize
alias pin_RX_direction is pin_RX_RC5_direction -- Pin 5 of 14 pin DIP.
alias pin_TX_direction is pin_TX_RC4_direction -- Pin 6 of 14 pin DIP.
const serial_hw_baudrate = 115200
include serial_hardware
include print

-- Settings for the RTC and intialization.
alias rtc_sck is pin_C0 -- Pin 10 for 14 pin DIP
alias rtc_sck_direction is pin_C0_direction
alias rtc_sdo is pin_C1 -- Pin 9 for 14 pin DIP.
alias rtc_sdo_direction is pin_C1_direction 
-- If you want to use software IIC, define the following constant.
-- const RTC_SOFTWARE_IIC = TRUE
include rtc_ds3231

-- Setting to check the alarm on a poll basis or interrupt bases. When
-- defined the alarms are checked using the external interrupt of the PIC.
-- Using the interrupt has its limitations for this rtc as explained in the
-- sample interrupt routine below.
-- const ALARM_ON_INTERRUPT = TRUE 

-- LED
alias led is pin_C3
pin_C3_direction = output

-- Variables
var byte counter = 0
var byte square_wave = RTC_SQUARE_WAVE_1_HZ
var bit alarm_was_given = FALSE


-- Print the current time of the rtc.
procedure print_time() is

   var byte hours, minutes, seconds
    
   rtc_get_time_bin(hours, minutes, seconds)
   print_string(serial_hw_data, "H:")
   print_byte_dec(serial_hw_data, hours)
   print_string(serial_hw_data, " M:")
   print_byte_dec(serial_hw_data, minutes)
   print_string(serial_hw_data, " S:")
   print_byte_dec(serial_hw_data, seconds)
   print_crlf(serial_hw_data)

end procedure


-- Print the current date of the rtc.
procedure print_date() is

   var word fullyear, yearday
   var byte year, month, date, day

   rtc_get_date_bin(year, month, date)
   print_string(serial_hw_data, "Year: ")
   print_byte_dec(serial_hw_data, year)
   print_string(serial_hw_data, " Month: ")
   print_byte_dec(serial_hw_data, month)
   print_string(serial_hw_data, " Day of month: ")
   print_byte_dec(serial_hw_data, date)
   print_crlf(serial_hw_data)

   -- You can calculate the day of the week.
   day = rtc_calc_dayofweek(year, month, date)
   print_string(serial_hw_data, "Day of week (calculated from date): ")
   print_byte_dec(serial_hw_data, day)
   print_crlf(serial_hw_data)

   -- This rtc also keeps track of the day of the week but has to be set first.
   rtc_write_dayofweek(day)
   print_string(serial_hw_data, "Day of week from rtc: ")
   day = rtc_read_dayofweek()
   print_byte_dec(serial_hw_data, day)
   print_crlf(serial_hw_data)

   -- You can also calculate the day of the year.
   yearday = rtc_calc_dayofyear(year, month, date)
   print_string(serial_hw_data, "Day of year (calculated from date): ")
   print_word_dec(serial_hw_data, yearday)
   print_crlf(serial_hw_data)

   -- Get and set the full year date in bcd notation.
   fullyear = rtc_read_full_year()
   print_string(serial_hw_data, "Year: ")
   year = byte(fullyear >> 8)
   print_byte_dec(serial_hw_data, rtc_bcd2bin(year))
   year = byte(fullyear)
   print_word_dec(serial_hw_data, rtc_bcd2bin(year))
   print_crlf(serial_hw_data)
   
   -- Change the date to show the century feature.
   -- Switch between two year in different centuries.
   print_string(serial_hw_data, "Changing century: ")
   if (fullyear < 0x2000) then
      fullyear = 0x2021
   else
      fullyear = 0x1992
   end if
   rtc_write_full_year(fullyear)
   fullyear = rtc_read_full_year()
   year = byte(fullyear >> 8)
   print_byte_dec(serial_hw_data, rtc_bcd2bin(year))
   year = byte(fullyear)
   print_word_dec(serial_hw_data, rtc_bcd2bin(year))
   print_crlf(serial_hw_data)

end procedure


-- Alarm routine. When the first alarm is active the LED will be 
-- turned on and when the second alarm is active the LED wil be 
-- turned off. Also the 32 kHz ouput signal will be turned on and off.
procedure check_alarms() is 

   if rtc_alarm_1_flag then
      rtc_alarm_1_flag = FALSE
      led = ON
      rtc_enable_32_khz()
   end if

   if rtc_alarm_2_flag then
      rtc_alarm_2_flag = FALSE
      led = OFF
      rtc_disable_32_khz()
   end if

end procedure


-- Example of handling the alarm on an interrupt basis. Note that we cannot
-- call any of the RTC procedures because it will interfere with the IIC
-- transmission. We can only set a flag that can be checked later.
-- So in fact the interrupt routine does not add so much value.
if defined(ALARM_ON_INTERRUPT) then
   procedure alarm_interrupt is pragma interrupt
      if INTCON_INTF then
         INTCON_INTF = FALSE
         alarm_was_given = TRUE
      end if
   end procedure
end if 


-- Set and change the square wave output. Only to be used when the alarm
-- check on interrupt is not used since it uses the INT/SQW pin.
procedure change_square_wave() is

   rtc_set_square_wave(square_wave)
   case square_wave of
      RTC_SQUARE_WAVE_1_HZ:  square_wave = RTC_SQUARE_WAVE_1_KHZ
      RTC_SQUARE_WAVE_1_KHZ: square_wave = RTC_SQUARE_WAVE_4_KHZ
      RTC_SQUARE_WAVE_4_KHZ: square_wave = RTC_SQUARE_WAVE_8_KHZ
      RTC_SQUARE_WAVE_8_KHZ: square_wave = RTC_SQUARE_WAVE_1_HZ
   end case

end procedure


-- Main program starts here. Start with initiallization.
serial_hw_init()
rtc_init()
led = OFF

-- Enable interrupts if setting is defined.
if defined(ALARM_ON_INTERRUPT) then
   INTCON_INTE = TRUE
   -- Interrupt on falling edge.
   OPTION_REG_INTEDG = FALSE
   INTCON_GIE = TRUE
   rtc_enable_alarm_1_interrupt()
   rtc_enable_alarm_2_interrupt()
end if

-- Set some intial time hh:mm:ss in binary format and print it.
rtc_set_time_bin(15, 59, 30)
print_time()

-- Set an alarm time 1 to match with hour, minutes, seconds.
rtc_set_alarm_1_rate(RTC_ALARM_1_HOUR_MIN_SEC_MATCH)
-- Alarm time 1, 15 seconds later than the intial set time.
rtc_set_alarm_1_time_bin(15, 59, 45)

-- Set an alarm time 2 to match with hour, minutes.
rtc_set_alarm_2_rate(RTC_ALARM_2_HOUR_MIN_MATCH)
-- Alarm time 2, 30 seconds later than the initial set time.
rtc_set_alarm_2_time_bin(16, 00)

-- Set a date yy:mm:dd in binary format.
rtc_set_date_bin(21,9,25)

forever loop

   -- Print time and date every second.
   _usec_delay(1_000_000)
   print_time()
   print_date()
   print_crlf(serial_hw_data)

   -- Two methods to check the alarms although the version using
   -- the interrupt does not add much value because the rtc
   -- cannot be read in the interrupt routine due to the IIC interface.
   if defined(ALARM_ON_INTERRUPT) then
      -- Version using the external interrupt.
      if alarm_was_given then
         check_alarms()
         alarm_was_given = FALSE
      end if 
   else
      -- Version without using the external interrupt. 
      check_alarms()
      -- In this mode we can also change the square wave since
      -- we do not use the INT/SQW pin for the interrupt. Change
      -- it every 3 seconds.
      if (counter == 3) then
         change_square_wave()
         counter = 0
      else
         counter = counter + 1
      end if    
   end if 

end loop

