-- -----------------------------------------------------------------------------
-- Title: USB HID device demo
-- Author: Albert Faber, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r4
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application emulates a mouse pointing USB human interface device
-- (HID), once the USB device has been conifgured and the USB HID is recognized by
-- the host operating systems, it will move around the mouse pointer
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: There are two options to use the USB driver:
--        1) Without interrupts by frequently calling 'usb_tasks()' 
--           frequently in the main loop.
--        2) Using interrupts to make timing less critical. In that case no 
--           calls to 'usb_tasks()' are needed. 
--           This can be activated by defining: const USB_INTERRUPT_DRIVEN = TRUE    
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_usb_hid_mouse.jal
--    Note: It was manually adapted to include the interrupt option.
--


;@jallib section board_description

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off

include delay

-- whether or not using the serial port
const HAS_SERIAL_DEBUG_PORT = 1

if defined( HAS_SERIAL_DEBUG_PORT ) == true then
   
   const serial_hw_baudrate = 115_200
   
   include serial_hardware
   include format
   include print
   
   -- intialze serial device
   serial_hw_init()
   
   -- uncomment when directly coupled (i.e. without max 232) to rs-232C
   -- BAUDCON_CKTXP = true
   
   procedure serial_print_spc() is 
      serial_hw_write( " " )
   end procedure
   
   procedure serial_newline() is
      serial_hw_write( 10 )
      -- serial_hw_write( 13 )
   end procedure
end if



const bit USB_DEBUG = false
const bit USB_DEBUG_HIGH = false
const bit USB_HID_DEBUG = false
const bit USB_HID_DEBUG_HIGH = false
const byte USB_HID_ENDPOINT = 0x01
var volatile bit usb_hid_can_tx = true


include usb_defs

const bit USB_EP0 = 1
const byte USB_EP0_OUT_SIZE = 8
const word USB_EP0_OUT_ADDR = ( USB_BASE_ADDRESS + 0x0010 )
const byte USB_EP0_IN_SIZE  = 8
const word USB_EP0_IN_ADDR  = ( USB_EP0_OUT_ADDR + USB_EP0_OUT_SIZE )

const bit USB_EP1 = 1
const byte USB_EP1_OUT_SIZE = 8
const word USB_EP1_OUT_ADDR = ( USB_EP0_IN_ADDR + USB_EP0_IN_SIZE )
const byte USB_EP1_IN_SIZE  = 8
const word USB_EP1_IN_ADDR  = ( USB_EP1_OUT_ADDR + USB_EP1_OUT_SIZE )

var volatile byte  usb_ep1in_buf[ 8 ] at USB_EP1_IN_ADDR

const bit USB_EP2 = 0
const byte USB_EP2_OUT_SIZE = 8
const word USB_EP2_OUT_ADDR = 0x0000
const byte USB_EP2_IN_SIZE  = 8
const word USB_EP2_IN_ADDR  = 0x0000

const bit USB_EP3 = 0
const byte USB_EP3_OUT_SIZE = 8
const word USB_EP3_OUT_ADDR = 0x0000
const byte USB_EP3_IN_SIZE = 8
const word USB_EP3_IN_ADDR  = 0x0000

const byte USB_DEVICE_DESCRIPTOR[USB_DEVICE_DESCRIPTOR_SIZE] = {
USB_DEVICE_DESCRIPTOR_SIZE, 	-- 18 bytes long
USB_DT_DEVICE, 	-- DEVICE 01h
0x00,
0x02,		-- usb version 2.00
0x00,		-- class
0x00,		-- subclass
0x00,		-- protocol
0x08,		-- max packet size for end point 0
0xd8,
0x04,		-- Microchip's vendor
0x00,
0x00,		-- Mouse circle demo
0x02,
0x00, 	     -- version 2.0 of the product
0x01,		-- string 1 for manufacturer
0x02,		-- string 2 for product
0x00,		-- string 3 for serial number
0x01		-- number of configurations
}

const USB_CONFIGURATION_DESCRIPTOR_SIZE = 0x09 + 0x09 + 0x09 + 0x07

const byte USB_HID_REPORT1[]=
{
0x05, 0x01, -- Usage Page (Generic Desktop)             
0x09, 0x02, -- Usage (Mouse)                            
0xA1, 0x01, -- Collection (Application)                 
0x09, 0x01, -- Usage (Pointer)                         
0xA1, 0x00, -- Collection (Physical)                   
0x05, 0x09, -- Usage Page (Buttons)                
0x19, 0x01, -- Usage Minimum (01)                  
0x29, 0x03, -- Usage Maximum (03)                  
0x15, 0x00, -- Logical Minimum (0)                 
0x25, 0x01, -- Logical Maximum (0)                 
0x95, 0x03, -- Report Count (3)                    
0x75, 0x01, -- Report Size (1)                     
0x81, 0x02, -- Input (Data, Variable, Absolute)    
0x95, 0x01, -- Report Count (1)                    
0x75, 0x05, -- Report Size (5)                     
0x81, 0x01, -- Input (Constant), 5 bit padding  
0x05, 0x01, -- Usage Page (Generic Desktop)        
0x09, 0x30, -- Usage (X)                           
0x09, 0x31, -- Usage (Y)                           
0x15, 0x81, -- Logical Minimum (-127)              
0x25, 0x7F, -- Logical Maximum (127)               
0x75, 0x08, -- Report Size (8)                     
0x95, 0x02, -- Report Count (2)                    
0x81, 0x06, -- Input (Data, Variable, Relative)    
0xC0, 0xC0
}

const byte USB_CONFIGURATION_DESCRIPTOR[ USB_CONFIGURATION_DESCRIPTOR_SIZE ]=
{	
-- configuration descriptor - - - - - - - - - - 
0x09,	-- length,
USB_DT_CONFIGURATION,	-- descriptor_type

USB_CONFIGURATION_DESCRIPTOR_SIZE,
0x00,	-- total_length;

0x01,	-- num_interfaces,
0x01,	-- configuration_value,
0x00,	-- configuration_string_id,
0b10000000, -- attributes (bus powered, no remote wake up)
100,	-- max_power; (200ma)

-- interface descriptor - - - - - - - - - - - -
0x09,	-- length,
USB_DT_INTERFACE,	-- descriptor_type,
0x00,	-- interface_number, (starts at zero)
0x00,	-- alternate_setting, (no alternatives)
0x01,	-- num_endpoints,
0x03,	-- interface_class, (HID)
0x01,	-- interface_subclass, (boot - is this necessary?)
0x02,	-- interface_protocol, (mouse)
0x00,	-- interface_string_id;

-- hid descriptor - - - - - - - - - - - - - - -
0x09,				-- length,
USB_DT_HID,			-- descriptor_type;
0x11,
0x01,				-- hid_spec in BCD (1.11)
0x00,				-- country_code, (0=not country specific)
0x01,				-- num_class_descriptors, (1)
USB_DT_HID_REPORT,	-- class_descriptor_type; (0x22 = report)
(count( USB_HID_REPORT1 ) & 0xFF ),
(count( USB_HID_REPORT1 ) >> 8 ),

0x07,				-- length,
USB_DT_ENDPOINT,	-- descriptor_type,
0b10000001,			-- endpoint_address, (Endpoint 1, IN)
0b00000011,			-- attributes; (Interrupt)
0x03,				
0x00,				-- max_packet_size
0x0A				-- interval (10ms)
}

const byte USB_STRING0[] = 
{
0x04,	-- bLength
USB_DT_STRING,	-- bDescriptorType
0x09,	-- wLANGID[0] (low byte)
0x04	-- wLANGID[0] (high byte)
}

const byte USB_STRING1[] = 
{
0x36,	-- bLength
USB_DT_STRING,	-- bDescriptorType
"M", 0x00, 
"i", 0x00, 
"c", 0x00, 
"r", 0x00, 
"o", 0x00, 
"c", 0x00, 
"h", 0x00, 
"i", 0x00, 
"p", 0x00, 
" ", 0x00,
"T", 0x00, 
"e", 0x00, 
"c", 0x00, 
"h", 0x00, 
"n", 0x00, 
"o", 0x00, 
"l", 0x00, 
"o", 0x00, 
"g", 0x00, 
"y", 0x00, 
",", 0x00, 
" ", 0x00,
"I", 0x00, 
"n", 0x00, 
"c", 0x00, 
".", 0x00
}

const byte USB_STRING2[44] = 
{
44,	-- bLength
USB_DT_STRING,	-- bDescriptorType
"J", 0x00, 
"A", 0x00, 
"L", 0x00, 
"L", 0x00, 
"I", 0x00, 
"B", 0x00, 
" ", 0x00, 
"H", 0x00, 
"I", 0x00, 
"D", 0x00, 
" ", 0x00, 
"M", 0x00, 
"o", 0x00,
"u", 0x00, 
"s", 0x00, 
"e", 0x00, 
" ", 0x00, 
"D", 0x00, 
"e", 0x00, 
"m", 0x00, 
"o", 0x00
}

-- Use the USB driver on an interrupt basis. This makes it possible to use
-- delays in the main loop since timing becomes less critical.
const USB_INTERRUPT_DRIVEN = TRUE
include usb_drv_core


procedure usb_ep_data_in_callback(byte in end_point, word in buffer_addr, byte  in byte_count) is
   pragma inline
   if USB_HID_DEBUG_HIGH then
      const byte str[] = " EP data in: "
      const byte str1[] = " bytes "
      print_string( serial_hw_data,str )
      print_byte_hex( serial_hw_data, byte_count & 0xFF)
      print_string(serial_hw_data,str1)
   end if
   
   -- data has been sent, so do we need to send more?
   if (end_point == USB_HID_ENDPOINT) then
      -- it's the data end point
      usb_hid_can_tx = true
   end if
end procedure


include usb_drv

-- constants
const sbyte dir_table[] = {-4,-4,-4, 0, 4, 4, 4, 0}
const  byte str_welcome[] = "JALLIB USB HID MOUSE DEMO version 1.0\nplease wait (takes ~10 seconds) before the device it is fully configured"

-- variables
var word i = 0
var byte movement_length
var byte vector = 0
var bit usb_initialized = false
var byte data_buffer[3]
var word ticks100us = 0
var bit enable_mouse = false


-- -----------------------------------------------------------------------
-- usb_tasks shall be called on a regular base (millisecond range)
-- in order to keep the USB transmision alive. Therefore it is adviced to
-- call the usb_tasks procedure in the main loop of your 
-- application. 
-- Note: Only needed when USB interrupt is not used otherwise this call
--       can be omitted (it does nothing in interrupt mode).
-- -----------------------------------------------------------------------
procedure usb_tasks() is    
   if !defined(USB_INTERRUPT_DRIVEN) then
      -- Servicing Hardware use polling method
      usb_handle_isr()
   end if
end procedure

if defined( HAS_SERIAL_DEBUG_PORT ) == high then
   -- put info on RS-232 serial line
   serial_newline()
   serial_newline()
   
   print_string(serial_hw_data, str_welcome )
   serial_newline()
end if

-- setup the USB device
usb_setup()

-- enable USB device
usb_enable_module()

-- initialize HID buffer
data_buffer[0] = 0x00
data_buffer[1] = 0x00
data_buffer[2] = 0x00

-- main loop
forever loop

   if !defined(USB_INTERRUPT_DRIVEN) then
      -- When the interrupt mode is not used we need to poll the usb ISR function 
      -- on a regular base, in order to serve the USB requests otherwise
      -- this call can be removed.                              
      usb_tasks()
   end if
   
   -- check if USB device has been configured by the HOST
   if usb_is_configured()  then
      
      -- note user via serial line that USB has been configured
      if usb_initialized == false then
         usb_initialized = true
         
         if defined( HAS_SERIAL_DEBUG_PORT ) == true then			
            const  byte str[] = "USB device has been configured by the HOST!"
            print_string(serial_hw_data, str )
            serial_newline()
         end if
      end if
      
      -- now the mouse pointer can be moved around
      enable_mouse = true
   end if
   
   if enable_mouse then
      ticks100us = ticks100us + 1
      delay_10us(10)
      
      if ticks100us == 250 then
         ticks100us = 0
         
         if( movement_length > 16 ) then
            data_buffer[0] = 0
            data_buffer[1] = byte( dir_table[vector & 0x07] ) -- X-Vector
            data_buffer[2] = byte( dir_table[(vector+2) & 0x07] ) -- Y-Vector
            vector = vector+1
            movement_length = 0
         end if
         
         if 	( usb_hid_can_tx ) then
            usb_hid_can_tx = false
            usb_send_data(1, data_buffer, 3, low )
            movement_length =  movement_length + 1
         end if			
         
      end if
   end if
   
   if defined( HAS_SERIAL_DEBUG_PORT ) == true then    
      if PIR1_RCIF then
         serial_hw_write( RCREG )
         
         if RCREG == "S" then
         end if
         if RCREG == "T" then
         end if
      end if
   end if	
   
end loop
