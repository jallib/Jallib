-- ----------------------------------------------------------------------------
-- Title: test timer0 interval
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: test the library timero_isr_interval
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_16f723_af.jal
--    * test : test_timer0_interval.jal
--

;@jallib section chipdef

-- device include
include 16f723

-- Internal osc, running at 16 MHz
pragma target clock 16_000_000


-- fuses
pragma target OSC INTOSC_NOCLKOUT
pragma target WDT DISABLED
pragma target PWRTE DISABLED
pragma target MCLR INTERNAL
pragma target CP DISABLED
pragma target BROWNOUT DISABLED
pragma target VOLTAGE V19
pragma target PLLEN ENABLED
pragma target VCAPEN pin_A0
;@jallib section led
-- LED IO definition
alias led             is pin_a7
alias led_direction   is pin_a7_direction
alias led2            is pin_a6
alias led2_direction  is pin_a6_direction

led_direction = output

if (defined(led2)) then -- compile only when led2 is defined.
   led2_direction = output
end if

-- set all IO as digital
enable_digital_io()

-- setup the timer0_isr_interval library
const word timer0_isr_rate = 1000  -- 1 kHz isr rate
const DELAY_SLOTS = 2         -- support 2 delays at the same time
include timer0_isr_interval
timer0_isr_init()             -- init timer0 isr

var word prev_interval_counter

   forever loop   
      
      if (isr_counter != prev_interval_counter) then
         prev_interval_counter = isr_counter
         -- put here code that you want  
         -- to execute each tick.               
      end if ; 1 kHz loop   
           
      if (check_delay(0)) then
         set_delay(0, 409) -- 409 ticks on delay-slot 0
         led = !led                  
      end if
      if (defined(led2)) then -- compile only when led2 is defined.
         if (check_delay(1)) then
            set_delay(1, 619) -- 619 ticks on delay-slot 1
            led2 = !led2
         end if
      end if
   end loop

; end of main
