-- -----------------------------------------------------------------------------
-- Title: Sample data EEPROM write and read for the Microchip PIC18F27K40.
-- 
-- Author: Rob Jansen, Copyright (c) 2019..2019, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: 2.5r3
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description:
-- Sample data EEPROM write and read for the Microchip PIC18F27K40. During
-- EEPROM writing and reading the LED is blinking. After veryfing all 1024
-- EEPROM addresses successfully the LED should stay on. If the data read is 
-- not the same as the data written the LED will be off.            
--  
-- Sources:
-- 
-- Notes: 
--                               
          

-- chip setup
include 18f27k40

-- This setup assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000      -- oscillator frequency
pragma target OSC      HS           -- crystal or resonator
pragma target CLKOUTEN DISABLED     -- no clock output
pragma target WDT      DISABLED     -- watchdog
pragma target XINST    DISABLED     -- do not use extended instructionset
pragma target DEBUG    DISABLED     -- no debugging
pragma target BROWNOUT DISABLED     -- no brownout reset
pragma target FCMEN    DISABLED     -- no clock monitoring
pragma target CSWEN    ENABLED      -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED      -- allow low voltage programming
pragma target MCLR     EXTERNAL     -- external reset

pragma eedata 129,130,131,132            -- initial contents

enable_digital_io()                      -- disable analog modules

include pic_data_eeprom

-- LED IO definition
alias led             is pin_a0
alias led_direction   is pin_a0_direction
led_direction = output


var word counter
var byte i,j                          
var bit led_value = ON
var bit all_ok = TRUE

led = OFF
i = 0
counter = 0

forever loop
    _usec_delay(100_000)                           

   -- As long as the led blinks all written data equals the data is read back.
   -- In case of a difference in data the led will be turned off. After a 
   -- succesfull write and read cycle of 1024 bytes the LED stays on.
   if all_ok then
      led_value = !led_value          -- toggle the led
      data_eeprom_write(counter,i)    -- write value
      j = data_eeprom(counter)        -- read back
      if (j != i) then
         all_ok = FALSE
         led_value = OFF
      end if 
   end if
   i = i + 1
   counter = counter + 1
   
   led = led_value

   while (counter == 1024) loop -- The end, led should be on if all OK.    
      if all_ok then
         led = ON
      else
         led = OFF
      end if
   end loop          
 
end loop

