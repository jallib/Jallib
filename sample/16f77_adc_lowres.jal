-- -----------------------------------------------------------------------------
-- Title: Sample showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Rob Jansen
-- Compiler: 2.5r5
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--  
-- Description: this program shows how to use adc_hardware library. It regurlarly performs an
-- Analog-to-Digital Conversion, on channel AN0 and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--
-- Few words about diagram: this program performs ADC on channel AN0, so you can 
-- any voltage source connected to AN0 (no more 5V please). To test the whole, you can
-- use a voltage divider:
--		
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN0-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--
-- - R1=1K, R2=1K: you should get ~127 as ADC value
-- - R1=1K, R2=2.2K: you should get ~175 as ADC value
--
-- This file has been generated by hand (manually maintained)
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--


-- select chip
include 16f77
-- set all IO as digital, will turn ADC on later
enable_digital_io()

-- We'll use internal oscillator. It work @ 8MHz
pragma target CLOCK		20_000_000
pragma target OSC		HS
-- Specify no postscaler, ie. really runs @8MHz
-- no watchdog, please
pragma target WDT		disabled

include delay
const usart_hw_serial = true	-- true = RS232, false = SPI
const serial_hw_baudrate = 19_200
include serial_hardware
serial_hw_init()
-- inform user PIC is ready !
serial_hw_write("!")

-- Step 1: ADC input pin setup we wil use channel 0 and 1 (2 channels)
pin_AN0_direction = input 
-- Step 2: Set A0 and analog input and VDD as Vref
ADCON1_PCFG = 0b000
-- Step 3: Use Frc as ADC clock 
ADCON0_ADCS = 0b11 
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 2_000
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()


-- will periodically send those chars
var byte measure

forever loop

	-- get ADC result, on channel 0
	measure = adc_read_low_res(0)
	-- send it back through serial
	serial_hw_write(measure)
	-- and sleep a litte...
	delay_1ms(200)

end loop

