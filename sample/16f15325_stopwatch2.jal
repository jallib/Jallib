-- -----------------------------------------------------------------------------
-- Title: Test program for Stopwatch2.
-- Author: Rob Jansen, Copyright (c) 2023..2023 all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r8
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This example shows basic usage stopwatch2 library which can
--              be used to time events. 
--                 
-- Sources:     This program is based on the stopwatch sample program created by
--              Matt Schinkel. It was created for testing - compiling - the update 
--              of the stopwatch library for newer PIC types like the 16F15325. 
--              
-- Notes:       This sample program is created manually. 
--
include 16f15325                  

-- ------------------------------- Pragmas -------------------------------------

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000  -- oscillator frequency
--
pragma target OSC      OFF         -- internal oscillator
pragma target RSTOSC   HFINT32     -- select 32 MHz
pragma target CLKOUTEN DISABLED    -- no clock output
pragma target WDT      DISABLED    -- watchdog
pragma target BROWNOUT DISABLED    -- no brownout reset
pragma target FCMEN    DISABLED    -- no clock monitoring
pragma target CSWEN    ENABLED     -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED     -- Low voltage programming
pragma target MCLR     EXTERNAL    -- external reset
OSCCON2 = 0x00                     -- 32 MHz and no division

-- Enable weak pull up for all ports 
WPUA = 0b0001_1111       
WPUC = 0b0001_1111       

enable_digital_io()   -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize

include delay
 
-- Declaration of the USART1 pins 
alias pin_RX_direction  is pin_C4_direction 
alias pin_TX_direction  is pin_C5_direction 

-- Re-assign the pins. Note: This must always be done to let it work 
-- even for the default assignment.
include pps
pps_control_lock(FALSE)                
RC5PPS   = PPS_TX1       -- TX1 re-assigned to C5  (default)             
RX1DTPPS = PPS_RC4       -- C4  re-assigned to RX1 (default)            
pps_control_lock(TRUE)                 

-- setup uart for communication
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

include print

-- set stopwatch variable size, (2 = word) or (4 = dword)
const STOPWATCH2_VAR_SIZE = 4 -- (4 is default if not defined)
--
-- the lowest time unit to measure
const STOPWATCH2_MIN_VALUE = STOPWATCH_NS -- (STOPWATCH_NS is default if not defined)
--
-- choose what timer to use
const STOPWATCH2_USE_TIMER = 1 -- (1 is default if not defined)
include stopwatch2 -- include the library
--
stopwatch2_init()

-- main program here

-- print serial start characters
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = " "

stopwatch2_start() -- start the stopwatch

-- create some delay to measure
asm nop
;delay_1us() -- some delay
;delay_1ms(1) -- some delay
;delay_1s(1) -- some delay

stopwatch2_stop() -- stop the stopwatch

-- print error message if stopwatch time was too long
if stopwatch2_time_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error1[] = "Stopwatch2 time overflow error occurred"
   print_string(serial_hw_data, error1)
end if

-- print error message if stopwatch instruction count ran too long
if stopwatch2_cycle_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error2[] = "Stopwatch2 instruction cycle overflow error occurred"
   print_string(serial_hw_data, error2)
end if

-- measure instructions run and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch2_cycles)
const byte instructions[] = " instruction(s)"
print_string(serial_hw_data, instructions)

-- measure time taken and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch2)

-- print the time unit of measurement
if STOPWATCH2_MIN_VALUE == STOPWATCH_NS then
   serial_hw_data = "n"
   serial_hw_data = "s"
elsif STOPWATCH2_MIN_VALUE == STOPWATCH_US then
   serial_hw_data = "u"
   serial_hw_data = "s"
elsif STOPWATCH2_MIN_VALUE == STOPWATCH_MS then
   serial_hw_data = "m"
   serial_hw_data = "s"
elsif STOPWATCH2_MIN_VALUE == STOPWATCH_S then
   serial_hw_data = "s"
end if

-- print serial end characters
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"

-- Give the serial port some time to send the last characters.
_usec_delay(100_000)