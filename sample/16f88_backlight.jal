-- ----------------------------------------------------------------------------
-- Title: Test program for lcd_backlight test (basic test)
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
--  
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Testing lcd_backlight 
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
--  
-- Notes: 
-- setup:   A hd44780 compatible display, used in 4-bit mode with backlight
--  
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_backlight.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

;@jallib section lcd_hd44780_4
-- LCD IO definition
alias lcd_rs           is pin_b4              -- LCD command/data select.
alias lcd_rs_direction is pin_b4_direction
alias lcd_en           is pin_b0              -- LCD data trigger
alias lcd_en_direction is pin_b0_direction

alias lcd_dataport is porta_low              -- LCD data  port
alias lcd_dataport_direction is porta_low_direction
const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line
;@jallib section led
-- LED IO definition
alias led             is pin_b3
alias led_direction   is pin_b3_direction
alias led2            is pin_b1
alias led2_direction  is pin_b1_direction
;@jallib section ccp
-- ccp setup: since CCP1 is multiplexed, we need to define
-- alias pointing to the active CCP1 pin
alias pin_ccp1_direction is pin_ccp1_rb3_direction

-- backlight control (can be variable and digital on this pin)
alias lcd_bl is pin_b3
alias lcd_bl_direction is pin_b3_direction

enable_digital_io() -- disable analog I/O (if any)

-- setup libs, io etc
lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include print
include lcd_hd44780_4
include delay 
lcd_init()                              -- initialize LCD

lcd_clear_screen()
lcd_home()

const byte teststring[] = "Backlight test."
print_string(lcd, teststring)
   
const byte lcd_backlight_pwm = 1 -- by selecting the pwm pin, lcd_backlight_variable() is enabled.
lcd_bl_direction = output      
;const bit lcd_bl_inverted = true   -- define this when pin low turns backlight on

-- include & init backlight lib
include lcd_backlight
pwm_backlight_init()

var byte i
forever loop
                                  
   -- set backlight off for two seconds
   lcd_backlight(off)   
   delay_100ms(20)

   -- set backlight on for two seconds                                     
   lcd_backlight(on)   
   delay_100ms(20)
   
   if(defined(lcd_backlight_pwm) == true) then        
      
      -- we have variable backlight!
      
      -- first increase intensity 
      for 255 using i loop      
         lcd_backlight_variable(i)   
         delay_1ms(10)
      end loop

      -- and decrease intensity 
      for 255 using i loop      
         lcd_backlight_variable(255-i)   
         delay_1ms(10)
      end loop
      
   end if                                      
   
end loop