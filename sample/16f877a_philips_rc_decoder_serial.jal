-- -----------------------------------------------------------------------------
-- Title:Sample program for the Philips Remote Control Decoder
-- Author: Rob Jansen, Copyright (c) 2023..2023, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r8
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program that shows Philips Remote Control commands on an 
--              serial interface using the external interrupt of the PIC.
-- 
-- Notes:       The 36 kHz Infra Red receiver (active low)  must be connected
--              to the external interrupt pin.
--

include 16f877a                     -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal.
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS           -- crystal or resonator
pragma target WDT      DISABLED     -- watchdog
pragma target DEBUG    DISABLED     -- no debugging
pragma target BROWNOUT DISABLED     -- no brownout reset
pragma target LVP      ENABLED      -- low voltage programming, pull PGM pin LOW for normal operation

enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(250_000)

-- Serial hardware pin aliases.
const serial_hw_baudrate = 115200            
include serial_hardware
alias serial is serial_hw_data
serial_hw_init()
include print

-- Settings for the Philips Remote Control Decoder. Decoder times are based
-- on Timer 1 running at 1.0 MHz. Since 20 MHz will not give exactly
-- 1 MHz we do the following:
-- -) Use Fosc/4. This gives 5 MHz.
-- -) Use a prescaler of 1:4. This gives 1.25 MHz.
T1CON_TMR1CS = FALSE -- Clock source Fosc/4 gives 5 MHz
T1CON_T1CKPS = 0b10  -- Prescaler 1:4 gives 1.25 MHz
-- Since the clock runs 1.25 times faster than the default of 1 MHz 
-- we need to scale the bit times accordingly (see library).
const dword PHILIPS_RC_SCALING = 125
-- Interrupt pin.
alias philips_rc_decoder_pin_direction is pin_b0_direction 
-- Now we can include the library.
include philips_rc_decoder
philips_rc_decoder_init()

var word repeat_counter = 0 
var byte last_address = 255
var byte last_command = 255
var bit  last_toggle = FALSE
var bit  rc5_received = FALSE
var bit  rc6_received = FALSE

-- ------- Procedures ------------------------

-- Print the received remote control data. When data is requested
-- the remote control message received flag is cleared. 
procedure print_remote_control_data() is

   var byte command, address
   var bit toggle 

   philips_rc_get_data(toggle, address, command)
   -- If new data is received, the repeat counter is reset.
   if (last_toggle != toggle) | (last_address != address) | 
      (last_command != command) then
      repeat_counter = 0
      last_toggle = toggle
      last_address = address
      last_command = command
   else  
      repeat_counter = repeat_counter + 1
   end if 

   -- Print the contents of the RC5 or RC6 message.
   if toggle then
      print_string(serial, "Toggle bit: 1, ")
   else
      print_string(serial, "Toggle bit: 0, ")
   end if 

   print_string(serial, "Address: ")
   print_byte_dec(serial, address)

   print_string(serial, ", Command: ")
   print_byte_dec(serial, command)

   print_string(serial, ", Repeat: ")
   print_word_dec(serial, repeat_counter)
   print_crlf(serial)

end procedure

-- -------- Main program starts here -------------

print_crlf(serial)
print_string(serial,"PHILIPS RC5/RC6 MODE 0 REMOTE CONTROL DECODER.\r\n")

forever  loop 

   if philips_rc5_message_received()then
      print_string(serial, "Message: RC5, ")
      rc5_received = TRUE
      if rc6_received then
         rc6_received = FALSE
         repeat_counter = 0
      end if 
      -- Print the data. This will also clear the message received.
      print_remote_control_data() 
   elsif philips_rc6_message_received then
      print_string(serial, "Message: RC6, ")
      rc6_received = TRUE
      if rc5_received then
         rc5_received = FALSE
         repeat_counter = 0
      end if 
      -- Print the data. This will also clear the message received.
      print_remote_control_data() 
   end if 
   


end loop
