-- Title: Test program for Large Array 
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This is an example large array for creating an array that
--              take up more then 256 bytes memory. Tested on 18F devices only.
--
-- Sources:
--
-- Notes:
-- Supports byte array with up to 2048 entries
-- Supports word array with up to 1024 entries
-- Supports dword array with up to 512 entries
-- Creates an array named large_array_1
-- Use "alias new_array_name is large_array_1" to rename the array
--
-- Example:
-- const dword LARGE_ARRAY_1_SIZE = 600           -- choose number of array variables
-- const dword LARGE_ARRAY_1_VARIABLE_SIZE = 2    -- choose bytes size of variables
-- include large_array_1                    -- include the array library
-- alias test is large_array_1            -- rename/alias the array
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_large_array.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off
;@jallib section serial
const serial_hw_baudrate = 115_200

-- setup uart for communication
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- Setup the large array
const dword LARGE_ARRAY_1_SIZE = 100         -- choose number of array variables
const dword LARGE_ARRAY_1_VARIABLE_SIZE = 1    -- choose size of variables (byte*1)
include large_array_1                    -- include the array library
alias test is large_array_1            -- rename/alias the array to test

-- send start via serial port
serial_hw_write("S")
serial_hw_write("T")
serial_hw_write("A")
serial_hw_write("R")
serial_hw_write("T")

_usec_delay(1_000_000) -- 1 sec delay

-- store some values
test[50] = 0x11
test[51] = 0x22
test[26] = 0x33
test[27] = 0x44
test[56] = 0x55
test[57] = 0x66
test[49] = 0x77
test[17] = 0x88

-- read some values
serial_hw_write(test[50])
serial_hw_write(test[51])
serial_hw_write(test[26])
serial_hw_write(test[27])
serial_hw_write(test[56])
serial_hw_write(test[57])
serial_hw_write(test[49])
serial_hw_write(test[17])

_usec_delay(1_000_000) -- 1 sec delay

-- send end via serial port
serial_hw_write ("E")
serial_hw_write ("N")
serial_hw_write ("D")
