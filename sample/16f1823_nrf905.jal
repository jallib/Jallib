-- -----------------------------------------------------------------------------
-- Title: Sample program for the nRF905.
-- Author: Rob Jansen, Copyright (c) 2020..2024 all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r8
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This program waits for a message to be received from another
--              nRF905 device, adds 'Reply : ' to the received message and
--              returns the modified message back to the tranmit address.
--              A LED is used to indicate when data is received which can be
--              triggered by the reception of a message or the test pin.
--              The test input pin is used for forcing the transmission of a 
--              "Hello" message to the transmit address. 
--              This message will be repeated as long as the test input pin is 
--              held LOW. In this case the LED will also blink with each message
--              sent.
--
-- Notes:       See sample program 16f1825_nrf905.jal for the counter part of
--              this sample program (the transmitter of the original message).
--     
include 16f1823                 

-- Variable reduce reduces both RAM and ROM for this sample program.          
pragma opt variable_reduce yes

-- This program uses the internal oscillator at 4 MHz.
pragma target clock    4_000_000       -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- internal oscillator
pragma target PLLEN    DISABLED        -- PLL off
pragma target CLKOUTEN DISABLED        -- no clock output
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     INTERNAL        -- Reset internal
OSCCON_SCS = 0                         -- select primary oscillator
OSCCON_IRCF = 0b1101                   -- 4 MHz
OSCCON_SPLLEN = FALSE                  -- software PLL off

-- Enable weak pull up for all pins.
WPUA = 0b0011_1111       
WPUC = 0b0011_1111       
OPTION_REG_WPUEN = FALSE 

enable_digital_io()
-- Take some time to stabilize.
_usec_delay(100_000)

-- nRF905 pin definition.
alias nrf905_spi_sck is pin_C0 -- Pin 10 for 14 pin DIP
alias nrf905_spi_sck_direction is pin_C0_direction -- To SCK of nRF905
alias nrf905_spi_sdi is pin_C1 -- Pin 9 for 14 pin DIP.    
alias nrf905_spi_sdi_direction is pin_C1_direction -- To MISO of nRF905   
alias nrf905_spi_sdo is pin_C2 -- Pin 8 for 14 pin DIP.
alias nrf905_spi_sdo_direction is pin_C2_direction -- To MOSI of nRFF905 
alias nrf905_csn_pin is pin_C3 -- Pin 7 for 14 pin DIP. 
alias nrf905_csn_pin_direction is pin_C3_direction -- To csn of nRF905   
alias nrf905_txen_pin is pin_A5 -- Pin 2 for 14 pin DIP. 
alias nrf905_txen_pin_direction is pin_A5_direction -- To txen of nRF905 
alias nrf905_trx_ce_pin is pin_A4 -- Pin 3 for 14 pin DIP. 
alias nrf905_trx_ce_pin_direction is pin_A4_direction  -- To (tx_)ce of nRF905

-- We use software SPI. If not defined, hardware SPI is used.
const bit NRF905_SOFTWARE_SPI = TRUE
if !defined(NRF905_SOFTWARE_SPI) then
   -- Setup hardware SPI interface. Not the maximum speed.
   include spi_master_hw
   spi_init(SPI_MODE_00, SPI_RATE_FOSC_16)
   alias nrf905_spi_exchange is spi_master_hw_exchange
end if 

-- When using the power pin, define it here. If not used connect the power pin
-- of the module to VCC. 
const NRF905_USE_PWR_PIN = TRUE
if defined(NRF905_USE_PWR_PIN) then
   alias nrf905_pwr_up_pin is pin_A1 -- Pin 12 for 14 pin DIP. 
   alias nrf905_pwr_up_pin_direction is pin_A1_direction 
end if 

-- This program uses the interrupt way of receiving new data which gives the
-- main program more time before processing it. 
const NRF905_USE_INTERRUPT = TRUE
if defined(NRF905_USE_INTERRUPT) then
   -- Aliases for the interrupts.
   alias nrf905_dr_pin is pin_A2 -- Pin 11 for 14 pin DIP, external interrupt. 
   alias nrf905_dr_pin_direction is pin_A2_direction -- To DR of nRF905
   alias nrf905_external_interrupt_enable is INTCON_INTE 
   alias nrf905_global_interrupt_enable is INTCON_GIE
   alias nrf905_external_interrupt_edge is OPTION_REG_INTEDG 
   alias nrf905_external_interrupt_flag is INTCON_INTF 
   const nrf905_postive_interrupt_edge = TRUE
end if 

-- nRF905 addresses. We use 4-bit addresses (default).
const dword NRF905_RX_ADDR = 0x55667788 -- My address for device 1.
const dword NRF905_TX_ADDR = 0x11223344 -- Address of device we reply to. 
-- Note: If you want to make a second device using the counter part sample 
-- program 16f1825_nrf905.jal then use these addresses instead when running 
-- this sample program on your second device.
-- const dword NRF905_RX_ADDR = 0xBBCCDDEE  -- My address  for device 2.
-- const dword NRF905_TX_ADDR = 0x11223344  -- Address of device we reply to.    

-- We do not use the library default payload size (default is maximum of 32).
const byte NRF905_TX_PAYLOAD_SIZE = 25
const byte NRF905_RX_PAYLOAD_SIZE = 25
-- The RX buffer size must be equal to or bigger than the highest payload size.
const byte NRF905_RX_BUFFER_SIZE  = 25
include nrf905
 
-- Use my own RF channel (default is 108). Range from 0 .. NRF905_MAX_CHANNEL.
const word MY_CHANNEL = 50

-- LED on/off definitions.
const bit LED_ON = TRUE
const bit LED_OFF = FALSE

-- LED pin definitions.
alias led is pin_c4    -- Pin 6 for 14 pin DIP   
pin_c4_direction = output

-- Test input pin, active low.
alias test_input is pin_c5  -- Pin 5 for 14 pin DIP   
pin_c5_direction = input

-- Some text constants.
const byte hello[] = "Hello World!"
const byte reply[] = "Reply : "

-- Used buffer and variables.
var byte tx_buffer[NRF905_TX_PAYLOAD_SIZE]
var byte counter, index_1, index_2
var bit sending_data

-- Initialize the nRF905 module with the default values.      
if defined(NRF905_USE_PWR_PIN) then
   nrf905_power_up_device()
end if 
nrf905_init()
-- Set addresses.
nrf905_set_tx_address(NRF905_TX_ADDR)
nrf905_set_rx_address(NRF905_RX_ADDR)
-- Our module has a 16 MHz clock (init value is 20 MHz)
nrf905_set_crystal_clock(NRF905_CRYSTAL_CLK_16MHZ)
-- Set a different payload width for this program.
nrf905_set_rx_payload_width(NRF905_RX_PAYLOAD_SIZE)
nrf905_set_tx_payload_width(NRF905_TX_PAYLOAD_SIZE)
nrf905_set_power_level(NRF905_POWER_LEVEL_MIN)  
nrf905_set_rf_channel(MY_CHANNEL)

-- Transmit a welcome message at start up.
nrf905_send_data(hello, count(hello))  
while !nrf905_tx_ready() loop 
   -- Empty: Wait for the transmission to complete.
end loop

led = LED_OFF

-- Let's wait for a message to arrive.
nrf905_power_up_rx()
sending_data = FALSE

forever loop

   -- Check for new data.
   if nrf905_get_data() then
      led = LED_ON
      -- Add the text 'Reply: ' to received message and return that message.
      for count(reply) using index_1 loop
         tx_buffer[index_1] = reply[index_1]
      end loop 
      index_1 = count(reply)
      index_2 = 0
      counter = NRF905_RX_PAYLOAD_SIZE
      -- Now copy the received text but not more than the transmit buffer size.
      while (counter > 0) & (index_1 < NRF905_TX_PAYLOAD_SIZE) loop
         tx_buffer[index_1] =  nrf905_rx_buffer[index_2]
         counter = counter - 1
         index_1 = index_1 + 1         
         index_2 = index_2 + 1
      end loop
      -- Send this message back, wait so that the LED can flash.
      _usec_delay(100_000)
      nrf905_send_data(tx_buffer, index_1)
      sending_data = TRUE
   end if 
   
   -- If transmission is done, indicate the result of the transmission and
   -- start the receiver again. 
   if sending_data & nrf905_tx_ready() then
      led = LED_OFF
      -- Enable receiver again.
      nrf905_power_up_rx()
      sending_data = FALSE
   end if   

   -- If the test pin is low we transmit the hello message (if not transmitting).
   if !sending_data & !test_input then
      -- Debounce and repetition time. Will repeat as long as input is low.
      _usec_delay(100_000)
      if !test_input then
         nrf905_send_data(hello, count(hello))
         sending_data = TRUE
         led = LED_ON
      end if
   end if

end loop


