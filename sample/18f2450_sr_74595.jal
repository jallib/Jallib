-- ----------------------------------------------------------------------------
-- Title: Test program for 74595 shift register
-- 
-- Author: Joep Suijs, Copyright (c) 2014..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
--  
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Testing lcd_backlight 
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
--  
-- Notes: 
--    test setup: 3 x 74595 cascaded
--    sr_sda connects to SER_IN / DS pin of 74595 #1
--    SER_OUT / Q7S of 74595 #1 connects to SER_IN / DS pin of 74595 #2
--    SER_OUT / Q7S of 74595 #2 connects to SER_IN / DS pin of 74595 #3
--    sr_scl is connected the SRCK / SHCP pin of all three 74595 chips
--    sr_rck is connected the RCK / STCP pin of all three 74595 chips
--    sr_g is connected the G / OE pin of all three 74595 chips      
--
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2450_af.jal
--    * test : test_sr_74595.jal
--

;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz since pragma target CPUDIV is P1
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 (20 MHz)
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL      -- hs + pll, usb hs
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog scaler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          INTERNAL    -- no master reset
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

enable_digital_io() -- disable analog I/O (if any)

include delay
include seven_segment

-- define IO pin's 
alias sr_rck   is pin_a0   ; RCK (parallel clock / load, rising edge)
alias sr_sda   is pin_a1   ; SER_IN   / DS
alias sr_scl   is pin_a2   ; SRCK  (serial clock, rising egde)
alias sr_g     is pin_a3   ; G (output enable, low = enable)

-- set IO pins to output   
pin_a0_direction = output
pin_a1_direction = output
pin_a2_direction = output
pin_a3_direction = output

-- include library & turn outputs on   
include shift_register_74595
sr_output_enable(1)  ; activate shift register outputs 

forever loop

   -- set one output of each shift register      
   sr_write(1)   ; data for 74595 #3 (end of chain) 
   sr_write(2)   ; data for 74595 #2 (middle one) 
   sr_write(4)   ; data for 74595 #1 (directly connected to PIC) 
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- show numbers on seven segment display, connected to shift register
   sr_write(seven_from_digit(1))
   sr_write(seven_from_digit(2))
   sr_write(seven_from_digit(3))
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- clear outputs of all 3 shift registers
   sr_write(0)
   sr_write(0)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- set all outputs of shift register #1
   sr_write(255)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs of #2 become high)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs of #3 become high)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   

   -- shift all data to nex shift register, clear outputs of shift register #1, 
   -- (all outputs are low now)
   sr_write(0)
   sr_commit()   ; clock all data to outputs
   delay_1ms(1000);   
   
end loop


