-- --------------------------------------------------------------------------
-- Title: Test program for lcd_hd44780_4.jal (basic / interface test)
-- Author: Eur Van Andel, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Rob Hamerling, Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description:
-- This sample shows how to setup an LCD and writes
-- "Hello World" to the first line, using a string and the print library.
-- A counter is printed to show the running forever loop.
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
-- 
-- Notes:
-- setup: an hd44780 compatible display, used in 4-bit mode.
-- 
-- --------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_lcd_hd44780_4bit.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section lcd_hd44780_4

procedure PORTLCD'put(byte in x) is

    var volatile bit x_0 at x:0
    var volatile bit x_1 at x:1
    var volatile bit x_2 at x:2
    var volatile bit x_3 at x:3

    pin_b1 = x_0
    pin_b2 = x_1
    pin_b3 = x_2
    pin_b4 = x_3
end procedure

function PORTLCD'get() return byte is
    var byte ret
    var volatile bit ret_0 at ret:0 = pin_b1
    var volatile bit ret_1 at ret:1 = pin_b2
    var volatile bit ret_2 at ret:2 = pin_b3
    var volatile bit ret_3 at ret:3 = pin_b4
    return ret
end function

procedure PORTLCD_direction'put(byte in x) is

    var volatile bit x_0 at x:0
    var volatile bit x_1 at x:1
    var volatile bit x_2 at x:2
    var volatile bit x_3 at x:3

    pin_b1_direction = x_0
    pin_b2_direction = x_1
    pin_b3_direction = x_2
    pin_b4_direction = x_3
end procedure

function PORTLCD_direction'get() return byte is
    var byte ret
    var volatile bit ret_0 at ret:0 = pin_b1_direction
    var volatile bit ret_1 at ret:1 = pin_b2_direction
    var volatile bit ret_2 at ret:2 = pin_b3_direction
    var volatile bit ret_3 at ret:3 = pin_b4_direction
    return ret
end function

-- LCD IO definition
alias lcd_rs           is pin_d2              -- LCD command/data select.
alias lcd_rs_direction is pin_d2_direction
alias lcd_en           is pin_b0              -- LCD data trigger
alias lcd_en_direction is pin_b0_direction

alias lcd_dataport is portlcd             -- LCD data  port
alias lcd_dataport_direction is portlcd_direction

const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line
;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction

include delay

enable_digital_io()

led_direction = output

for 4 loop                           -- blink LED 4 times to indicate startup
   LED = on
   delay_100ms(2)
   LED = off
   delay_100ms(2)
end loop

lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include lcd_hd44780_4                -- LCD library with 4 data lines
lcd_init()                           -- initialize LCD

include print                        -- formatted output library

const byte str1[] = "Hello world!"   -- define strings

lcd_cursor_position(0,0)             -- to 1st line, 1st char
print_string(lcd, str1)              -- show hello world!

var byte counter = 0

forever loop                         -- loop forever

   counter = counter + 1             -- update counter
   lcd_cursor_position(1,0)          -- second line
   print_byte_hex(lcd, counter)      -- output in hex format
   delay_100ms(3)                    -- wait a little

   if counter == 255 then            -- counter wrap
      lcd_cursor_position(1,1)       -- 2nd line, 2nd char
      lcd = " "                      -- clear 2nd char
      lcd_write_char(" ")            -- 3rd char, equivalent to 
                                     -- the previous line
   end if

end loop
