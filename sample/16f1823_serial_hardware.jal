-- ------------------------------------------------------
-- Title: Serial hardware test program for classic type of USART 1.
--
-- Author: Rob Jansen, Copyright (c) 2019..2019 all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
--    USART test program for the Microchip pic16f1823. This sample program was
--    created to test the classic type of USART 1 using the serial_hardware library.
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
include 16f1823                     -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000    -- oscillator frequency
--
pragma target OSC      HS         -- crystal or resonator
pragma target PLLEN    DISABLED   -- PLL off
pragma target CLKOUTEN DISABLED   -- no clock output
pragma target WDT      DISABLED   -- watchdog
pragma target BROWNOUT DISABLED   -- no brownout reset
pragma target FCMEN    DISABLED   -- no clock monitoring
pragma target IESO     DISABLED   -- no int/ext osc switching
pragma target LVP      ENABLED    -- allow low voltage programming
pragma target MCLR     INTERNAL   -- Internal reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
enable_digital_io()               -- make all pins digital I/O

const serial_hw_baudrate = 115200
alias pin_RX_direction is pin_c5_direction -- Receive pin.
alias pin_TX_direction is pin_c4_direction -- Transmit pin.
include serial_hardware
serial_hw_init()

include print                              -- output library

const byte str1[] = "Hello serial world"   -- define a string
print_string(serial_hw_data, str1)         -- output string to serial

-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10
forever loop

   -- if there is a char, echo it back.
	if (serial_hw_read(char))	then
		serial_hw_write(char)	-- that's the echo...
	end if

   -- code block below prints a dot, every now and then, to signal
   -- the pic is alive, waiting to receiver character from the host
	counter = counter - 1      ; count down
	if (counter == 0) then     ; until zero
	   counter = 50000         ; then start over counting from 50000
      serial_hw_data = "."	   ; and output a dot to the serial port
   end if
end loop

