-- -----------------------------------------------------------------------------
-- Title: GLCD ILI9341 demo sample showing text (fonts) and pixel based graphics.
-- Author: Rob Jansen, Copyright (c) 2022..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6 
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demo program showing how to use GLCD ILI9341. It demonstrates
--              all features of the glcd_ili9341.jal library. This sample shows 
--              both the text (font usage) features as well as the graphics 
--              features drawing a line, a boxe, a circle and an ellipse.
--              Last but not least it shows the drawing of images.
--
--              You can find the green_frog_bitmap.jal in the project folder
--              jallib/project/ili9341. Copy this file to your local folder.
--
-- Notes:       See the disclaimer not to use fonts + the picture at the same time.
--              Use the setting DO_FONT so select between the two options.
--
--              A way to generate the bitmap from a png or jpg file: 
--              Converter: https://online-converting.com/image/convert2bmp/
--              Choose: 16 (5:6:5 RGB Hi-Color), rows direction Top - Bottom
--


include 16f18857
-- When using a crytal of 20 MHz
-- pragma target clock 20_000_000      -- oscillator frequency
-- pragma target OSC      HS           -- crystal or resonator
-- pragma target RSTOSC   EXT1X        -- power-up clock select: OSC
-- pragma target CLKOUTEN DISABLED     -- no clock output
-- pragma target WDT      DISABLED     -- watchdog
-- pragma target BROWNOUT DISABLED     -- no brownout reset
-- pragma target FCMEN    DISABLED     -- no clock monitoring
-- pragma target CSWEN    ENABLED      -- allow writing OSCCON1 NOSC and NDIV
-- pragma target LVP      ENABLED      -- use low voltage programming
-- pragma target MCLR     EXTERNAL     -- external reset 

-- When using internal oscillator at 32 MHz
pragma target clock    32_000_000       -- oscillator frequency
pragma target OSC      OFF              -- internal oscillator
pragma target RSTOSC   HFINT32          -- select 32 MHz
pragma target CLKOUTEN DISABLED         -- no clock output
pragma target WDT      DISABLED         -- watchdog
pragma target BROWNOUT DISABLED         -- no brownout reset
pragma target FCMEN    DISABLED         -- no clock monitoring
pragma target CSWEN    ENABLED          -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED          -- low voltage programming
pragma target MCLR     EXTERNAL         -- external reset
OSCFRQ_HFFRQ = 0b110                    -- Fosc 32 MHz

enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(100_000)

-- Define the SPI pins and other used pins to control the display
alias ili9341_sck is pin_C3 -- To pin 7 of the module (SCK).
alias ili9341_sck_direction is pin_C3_direction -- Pin 14 of 28 pin DIP.
alias ili9341_sdo is pin_C4 -- To pin 6 of the module (SDI).
alias ili9341_sdo_direction is pin_C4_direction -- Pin 15 of 28 pin DIP. 
alias ili9341_sdi is pin_C5 -- To pin 9 of the module (SDO).
alias ili9341_sdi_direction is pin_C5_direction -- Pin 16 of 28 pin DIP. 
-- Extra needed for SPI.
alias ili9341_csn is pin_C2  -- To pin 3 of the module (CS). 
alias ili9341_csn_direction is pin_C2_direction  -- Pin 13 of 28 pin DIP. 
alias ili9341_dc_rs is pin_C1  -- To pin 5 of the module (DC/RS). 
alias ili9341_dc_rs_direction is pin_C1_direction -- Pin 12 of 28 pin DIP. 
-- Optional hardware reset pin. If not defined, software reset will be used. 
alias ili9341_rst is pin_C0  -- To pin 4 of the module (RESET).
alias ili9341_rst_direction is pin_C0_direction  -- Pin 11 of 28 pin DIP. 

-- You can select which SPI interface will be used by the ILI9341. The
-- default is SPI hardware 1. You can select one of the following:
-- const ILI9341_SPI_HW2 = TRUE
-- const ILI9341_SPI_SW  = TRUE

-- The default display resolution is 240 x 320 pixels If a display with a
-- different resolution is used you can overrule these as follows (example):
-- const word ILI9341_MAX_X_PIXELS = 128  -- Width  
-- const word ILI9341_MAX_Y_PIXELS = 160  -- Height 

-- Some displays require mirroring. When needed use these settings:
-- const ILI9341_MIRROR_X = TRUE -- Will mirror in the x-direction
-- const ILI9341_MIRROR_Y = TRUE -- Will mirror in the y-direction

-- Set the pinning for the hardware pins of IIC or SPI. This is default but 
-- still needed for this chip. Do not use when using software SPI since it
-- the pins are then assigned for hardware SPI.
include pps
pps_control_lock(FALSE)                
-- SPI 1 used by ili9341. Do not map when using ILI9341_SPI_SW.
if !defined(ILI9341_SPI_SW) then
   RC3PPS = PPS_SCK1 -- SPI clock 
   RC5PPS = PPS_SDA1 -- SPI data in
   RC4PPS = PPS_SDO1 -- SPI data out
end if 
pps_control_lock(TRUE)                 

include print
include delay

-- Font library.
include glcd_8x12_font

-- Include and initialize the GLCD lib.
include glcd_ili9341
ili9341_init()

-- There is an unknown problem when using fonts in combination with 
-- a big picture so they are not used at the same time in this program.
-- This problem does not occur when using a PIC18.
const DO_FONT = TRUE -- If defined, using fonts and graphics but no picture.
                     -- If not defined using graphics and picture but no fonts. 

-- Include the green frog bitmap. Only when not using fonts.
if !defined(DO_FONT) then
   include jal_logo
end if 

-- Variables.
var byte counter, radius
var word x_coord, y_coord, scroll

forever  loop   

if defined(DO_FONT) then
   -- First write the demo text.
   glcd_clear_screen()
   glcd_pen_color = ILI9341_RED
   glcd_font_use(FONT_8X12)
   ili9341_goto(80,100)
   print_string(glcd,"JAL ILI9341")
   ili9341_goto(80,120)
   glcd_pen_color = ILI9341_GREEN
   print_string(glcd,"Library Demo")
   ili9341_goto(80,140)
   glcd_pen_color = ILI9341_WHITE
   print_string(glcd,"2021-09-09")
   ili9341_goto(80,160)
   glcd_pen_color = ILI9341_YELLOW
   print_string(glcd,"Text only")
   ili9341_goto(80,180)
   glcd_pen_color = ILI9341_CYAN
   print_string(glcd,"Font 8X12")
   delay_1s(1)

   -- Show some display features.
   glcd_pen_color = ILI9341_WHITE
   ili9341_goto(70,220)
   print_string(glcd,"INVERSE DISPLAY")
   ili9341_display_inverse()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"NORMAL DISPLAY ")
   ili9341_display_normal()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"DISPLAY OFF    ")
   delay_1s(1)
   ili9341_display_off()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"DISPLAY ON     ")
   ili9341_display_on()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"DISPLAY SLEEP  ")
   delay_1s(1)
   ili9341_display_sleep()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"DISPLAY WAKEUP ")
   ili9341_display_wakeup()
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"VERTICAL SCROLL")
   ili9341_set_vertical_scroll_area(25, 25)
   for 100 using scroll loop
      ili9341_vertical_scroll_display(scroll)
      _usec_delay(10_000_)
   end loop
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"AREA RESET     ")
   ili9341_set_vertical_scroll_area(0, 0)
   delay_1s(3)
   ili9341_goto(70,220)
   print_string(glcd,"SCROLL RESET   ")
   -- Reset scroll
   ili9341_vertical_scroll_display(0)
   delay_1s(3)
   ili9341_set_display_rotation(ILI9341_ROTATE_0_DEGREES)
   ili9341_goto(0,0)
   print_string(glcd,"DISPLAY ROTATION 0 DEGREES")
   delay_1s(1)
   ili9341_set_display_rotation(ILI9341_ROTATE_90_DEGREES)
   ili9341_goto(0,0)
   print_string(glcd,"DISPLAY ROTATION 90 DEGREES")
   delay_1s(1)
   ili9341_set_display_rotation(ILI9341_ROTATE_180_DEGREES)
   ili9341_goto(0,0)
   print_string(glcd,"DISPLAY ROTATION 180 DEGREES")
   delay_1s(1)
   ili9341_set_display_rotation(ILI9341_ROTATE_270_DEGREES)
   ili9341_goto(0,0)
   print_string(glcd,"DISPLAY ROTATION 270 DEGREES")
   delay_1s(3)
   -- Restore rotation.
   ili9341_set_display_rotation(ILI9341_ROTATE_0_DEGREES)
end if

  -- Change the color of the screen a few times.
   glcd_clear_screen()
   delay_1s(1)
   ili9341_fill_screen(ILI9341_RED)
   delay_1s(1)
   ili9341_fill_screen(ILI9341_GREEN)
   delay_1s(1)
   ili9341_fill_screen(ILI9341_BLUE)
   delay_1s(1)
   ili9341_fill_screen(ILI9341_YELLOW)
   delay_1s(1)

   -- ------------------Do some graphics stuff ---------------------
   -- Draw some lines. 
   -- From top left to bottom right.
   glcd_clear_screen()
   glcd_pen_color = ILI9341_RED
   glcd_line(0, 0, glcd_display_x_size - 1, glcd_display_y_size - 1)
   -- From top right to bottom left.
   glcd_pen_color = ILI9341_GREEN
   glcd_line(glcd_display_x_size - 1, 0, 0, glcd_display_y_size - 1)
   -- In the middle from left to right.
   glcd_pen_color = ILI9341_BLUE
   glcd_line(0, glcd_display_y_size / 2 , glcd_display_x_size - 1 , glcd_display_y_size / 2)
   -- In the middel from top to bottom
   glcd_pen_color = ILI9341_GREENYELLOW
   glcd_line(glcd_display_x_size / 2 , 0, glcd_display_x_size / 2, glcd_display_y_size - 1)
   delay_1s(3)

  -- Draw boxes on the screen.
   x_coord = 0
   y_coord = 0
   glcd_clear_screen()
   glcd_pen_color = ILI9341_GREEN
   while (x_coord <= (glcd_display_x_size / 2)) loop
      glcd_box(x_coord, y_coord, glcd_display_x_size - x_coord , glcd_display_y_size - y_coord)
      x_coord = x_coord + 1
      y_coord = y_coord + 1
      -- Change color do that we can see the boxes.
      if (glcd_pen_color == ILI9341_GREEN) then
         glcd_pen_color = ILI9341_RED
      else 
         glcd_pen_color = ILI9341_GREEN
      end if 
   end loop
   delay_1s(3)

  -- Draw circels on the screen.
   radius = 1
   ili9341_fill_screen(ILI9341_GREENYELLOW)
   glcd_pen_color = ILI9341_MAGENTA
   while (radius < (glcd_display_x_size / 2)) loop
      glcd_circle(glcd_display_x_size / 2, glcd_display_y_size / 2, radius)
      radius = radius + 1
      -- Change color do that we can see the circles.
      if (glcd_pen_color == ILI9341_MAGENTA) then
         glcd_pen_color = ILI9341_MAROON
      else 
         glcd_pen_color = ILI9341_MAGENTA
      end if 
   end loop
   delay_1s(3)

  -- Draw elipses on a rotated screen.
   x_coord = 1
   y_coord = 1
   radius = 1
   ili9341_fill_screen(ILI9341_RED)
   -- Let's rotate the screen for this one.
   ili9341_set_display_rotation(ILI9341_ROTATE_90_DEGREES)
   glcd_pen_color = ILI9341_CYAN
   while (x_coord <= (glcd_display_x_size / 2)) loop
      glcd_ellipse(glcd_display_x_size / 2, glcd_display_y_size / 2, x_coord, y_coord)
      x_coord = x_coord + 1
      if (x_coord % 2) == 0 then
         y_coord = y_coord + 1
      end if
      -- Change color do that we can see the elipses.
      if (glcd_pen_color == ILI9341_CYAN) then
         glcd_pen_color = ILI9341_MAGENTA
      else 
         glcd_pen_color = ILI9341_CYAN
      end if 
   end loop
   delay_1s(3)

if !defined(DO_FONT) then
   -- Draw an image. Note the screen is still rotated so the picture will 
   -- also be rotated.
   glcd_clear_screen()
   ili9341_draw_image(JAL_LOGO_BITMAP, 60, 90, JAL_LOGO_WIDTH,
                      JAL_LOGO_HEIGHT)
   -- Restore rotation.
   ili9341_set_display_rotation(ILI9341_ROTATE_0_DEGREES)
   -- Draw the same one on another location without rotation.
   ili9341_draw_image(JAL_LOGO_BITMAP, 60, 200,JAL_LOGO_WIDTH,
                      JAL_LOGO_HEIGHT)
   delay_1s(10)
else
   -- Restore rotation since picture is not shown but display is still rotated.
   ili9341_set_display_rotation(ILI9341_ROTATE_0_DEGREES)
end if 

end loop
