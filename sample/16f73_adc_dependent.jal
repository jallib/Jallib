-- -----------------------------------------------------------------------------
-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r5
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--  
-- Description: this program shows how to use adc_hardware library. 
-- It regurlarly performs an Analog-to-Digital Conversion, on channels AN0 and AN1
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--   
-- Few words about diagram: this program performs ADC on channels AN0 and AN1, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
-- 		 
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ ANx-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--	AN0: - R1=1K, R2=1K: you should get ~127
-- AN1: - R1=1K, R2=2.2K: you should get ~175
--
-- Actual output with the above given resistor values (10% tolerance on resistors):
-- Channel  (low) 0: 127
-- Channel  (low) 1: 176
--
-- This file was originally a generated version but was changed by hand 
-- (and manually maintained) for use with the updated adc library and
-- for correct operation on a 16f73.
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--

-- chip setup
include 16f73

-- This program assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target OSC HS               -- HS crystal or resonator
pragma target clock 20_000_000     -- oscillator frequency
pragma target WDT disabled

-- set all IO as digital, will turn ADC on later 
enable_digital_io()

include print
include delay
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- Step 1: ADC analog input pin setup we wil use channel 0 and 1 (2 channels)
pin_AN0_direction = input 
pin_AN1_direction = input 
ANSEL_AO
-- Step 2: Set A0 and A1 analog input and VDD as Vref
ADCON1_PCFG = 0b100
-- Step 3: Use Frc as ADC clock 
ADCON0_ADCS = 0b11 
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var byte lowmeasure, channel
const byte prefix[] = "Channel "
const byte lowstr[] = " (low) "
const byte suffix[] = ": "

forever loop
   -- loop over both channels and read
   for 2 using channel loop

     -- Get ADC value, this PIC only has an 8-bit ADC register
	  lowmeasure = adc_read_low_res(channel)
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,lowstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_byte_dec(serial_hw_data,lowmeasure)
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(100)

   end loop
end loop
