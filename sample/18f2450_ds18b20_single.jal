-- ------------------------------------------------------
-- Title: Test program for ds18b20.jal
-- 
-- Author: Vasile Guta Ciucur, Copyright (c) 2010..2014, all rights reserved.
-- 
-- Adapted-by: mkerna@gmail.com, Joep Suijs
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Test program
--    Read sensor temperature DS18B20 from a specific device using the
--    drive's ID
-- 
-- Sources:
-- 
-- Notes: requires LCD to display result
-- 
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2450_af.jal
--    * test : test_ds18b20_single.jal
--

;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz since pragma target CPUDIV is P1
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 (20 MHz)
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL      -- hs + pll, usb hs
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog scaler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          INTERNAL    -- no master reset
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

;@jallib section lcd_hd44780_4
-- LCD IO definition
alias lcd_rs           is pin_b4              -- LCD command/data select.
alias lcd_rs_direction is pin_b4_direction
alias lcd_en           is pin_b0              -- LCD data trigger
alias lcd_en_direction is pin_b0_direction

alias lcd_dataport is porta_low              -- LCD data  port
alias lcd_dataport_direction is porta_low_direction
const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line

include delay
include print  
include format
enable_digital_io()  -- set all IO as digital

-- setup lcd
lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include lcd_hd44780_4                -- LCD library with 4 data lines
lcd_init()                           -- initialize LCD
alias device is lcd
                               
-- ----------------------------                               
-- start of setup ds18b20 stuff              
-- ----------------------------                               
              
-- setup pin definitions for dallas one-wire bus
alias d1w_bus            is pin_b1
alias d1w_bus_direction  is pin_b1_direction     
include one_wire           -- include one-wire library
d1w_init()                 -- init one-wire bus

-- select one of the output formats below
const ds18b20_value_raw          = 0
const ds18b20_value_celcius      = 1
const ds18b20_value_farenheit    = 0

const ds18b20_ignore_crc         = 0 -- 1 tell lib to ignore crc (code becomes smaller and faster, but reliability of data is less)
const ds18b20_max_retries        = 2 -- 1 means the library re-reads once when crc fails, 4 means up to 4 retries (so max 5 reads)

include ds18b20            -- include library for ds18b20 temperature sensor with one-wire interface

-- ---------------------------                               
-- end of setup ds18b20 stuff 
-- ---------------------------                               

-- strings and vars for the main loop
const byte str1[]       = "Temp="
const byte str_err1[]   = "ds18b20 read failed."
var byte i
var sword temperature                
var bit r                            

forever loop           
 
                 
   ds18b20_convert()  -- tell all ds18b20 devices to start conversion                 

   -- note: the statement above starts the conversion and it can take
   -- up to 750ms to complete. 
   -- If the sensor is in parasite mode, it is mandatory to leave the bus 
   -- during conversion. You could include a delay like:
   delay_1ms(750)
   -- If you have other stuff to do, feel free to do so and create proper
   -- timing in an other way. 
   --
   -- If the sensor is conventional powered, you don't have to keep the
   -- bus idle and could read the sensor before conversion is complete.
   -- The sensor will return the previous value.
   
   r = ds18b20_s_temp(temperature)                 -- read conversion result   
   lcd_cursor_position(0,0)                        -- first line
   if (r) then
      -- success, so print temperature
      print_string(device, str1)                   -- print string
      format_sword_dec(device, temperature, 4, 1)  -- print temperature in xx.x format
      device = "C"
      device = " "
   else
      -- print fail message
      print_string(device, str_err1)    
   end if

   -- read the device's ID and print it    
   lcd_cursor_position(1,0)          -- second line

   r = ds18b20_s_read_rom()
   if (r) then
      -- read_rom successful, so print ID which is now stored in scratchpad 
      for 8 using i loop
         print_byte_hex(device, scratchpad[i])
      end loop                
   else                      
      -- print fail message
      print_string(device, str_err1)
   end if
 
end loop
