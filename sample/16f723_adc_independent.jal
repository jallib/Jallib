-- -----------------------------------------------------------------------------
-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2025, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r5
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--  
-- Description: this program shows how to use adc_hardware library. 
-- It regurlarly performs an Analog-to-Digital Conversion, on channels AN0 and AN1
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--   
-- Few words about diagram: this program performs ADC on channels AN0 and AN1, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
-- 		 
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ ANx-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--	AN0: - R1=1K, R2=1K: you should get ~127
-- AN1: - R1=1K, R2=2.2K: you should get ~175
--
-- Actual output with the above given resistor values (10% tolerance on resistors):
-- Channel  (low) 0: 126
-- Channel  (low) 1: 175
--
-- This file was originally a generated version but was changed by hand 
-- (and manually maintained) for use with the updated adc library and
-- for correct operation on a 16f723.
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--

-- device include
include 16f723

-- Internal osc, running at 16 MHz
pragma target clock 16_000_000

-- fuses
pragma target OSC INTOSC_NOCLKOUT
pragma target WDT DISABLED
pragma target PWRTE DISABLED
pragma target MCLR INTERNAL
pragma target CP DISABLED
pragma target BROWNOUT DISABLED
pragma target VOLTAGE V19
pragma target PLLEN ENABLED
pragma target VCAPEN DISABLED
OSCCON_IRCF = 0b11 -- Select 16 MHz

-- set all IO as digital, will turn ADC on later
enable_digital_io()

include print
include delay
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- Step 1: ADC analog input pin setup we wil use channel 0 and 1 (2 channels)
ANSELA_ANSA0 = TRUE                               
pin_AN0_direction = input
ANSELA_ANSA1 = TRUE                               
pin_AN1_direction = input
-- Step 2: Set VDD as Vref
ADCON1_ADREF = 0b00 
-- Step 3: Use Frc as ADC clock 
ADCON1_ADCS = 0b011 
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 2_000
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var byte lowmeasure, channel
const byte prefix[] = "Channel "
const byte lowstr[] = " (low) "
const byte suffix[] = ": "

forever loop
   -- loop over both channels and read
   for 2 using channel loop

     -- Get ADC value, this PIC only has an 8-bit ADC register
	  lowmeasure = adc_read_low_res(channel)
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,lowstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_byte_dec(serial_hw_data,lowmeasure)
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(100)

   end loop
end loop
