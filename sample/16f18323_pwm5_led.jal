-- -----------------------------------------------------------------------------
-- Title: Test program for the first PWM channel of a PIC16F18323, using a LED. 
-- Author: Rob Jansen, Copyright (c) 2022..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: This sample show how to use PWM in low resolution mode.
--              It progressively light up and down a LED connected to port RA2.
-- 
-- Notes: This file was copied from a pwm_led.jal created by Sebastien Lelong and
--        adapted manually. Note that for this PIC, PWM5 is the first PWM.
--        Also works for a PIC16F18313 (the 8 pin version).
-- 
include 16f18323                                 -- target PIC

-- Use internal oscillator at 32 MHz.
pragma target CLOCK    32_000_000
--
pragma target OSC      OFF                       -- internal oscillator
pragma target RSTOSC   HFINT32                   -- select 32 MHz
pragma target CLKOUTEN DISABLED                  -- no clock output
pragma target WDT      DISABLED                  -- watchdog
pragma target DEBUG    DISABLED                  -- no debugging
pragma target BROWNOUT DISABLED                  -- no brownout reset
pragma target FCMEN    DISABLED                  -- no clock monitoring
pragma target CSWEN    ENABLED                   -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED                   -- low voltage programming
pragma target MCLR     EXTERNAL                  -- external reset
OSCCON1_NDIV = 0b0000                            -- Fosc 32 / 1 -> 32 MHz

enable_digital_io()                              -- set all IO as digital

-- PWM setup. We need to map the PWM output to a pin and we use RA2 for that.
include pps
pps_control_lock(FALSE)                         -- unlock PPS module
RA2PPS = PPS_PWM5                               -- pin_A2 is PWM5 (OUTPUT)
pps_control_lock(TRUE)                          -- lock PPS module
pin_A2_direction = output                       -- don't forget to set this to output
include pwm_hardware                            -- fetch PWM library
pwm_max_resolution(1)                           -- max res. with highest possible freq.
pwm5_on

var byte i

forever loop
 
   i = 0
   -- loop up and down, to produce different duty cycle
   while i < 100 loop
      pwm5_set_dutycycle_percent(i)
      _usec_delay(10000)
      i = i + 1
   end loop

   while i > 0 loop
      pwm5_set_dutycycle_percent(i)
      _usec_delay(10000)
      i = i - 1
   end loop

   -- turning off, the LED
   _usec_delay(500_000)
   pwm5_off()
   _usec_delay(500_000)
   pwm5_on()
   
end loop
