-- Title: Test program for Stopwatch
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This example shows basic usage stopwatch library which can
--              be used to time events
--
-- Sources:
--
-- This file has been generated by jallib.py from:
--    * board: board_18f67j50_ms.jal
--    * test : test_stopwatch.jal
--

;@jallib section chipdef
-- chip setup
include 18f67j50                   -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      INTOSC_NOCLKOUT_PLL      -- internal oscillator
                                                -- and using PLL
pragma target PLLDIV   P2          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96/2): 48 MHz
pragma target FCMEN    DISABLED    -- no fail-safeclock monitoring
pragma target IESO     DISABLED    -- no in/ext oscillator switchover
pragma target WDT      CONTROL     -- watchdog software controlled
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging

WDTCON_SWDTEN = OFF                 -- disable watchdog

-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
OSCTUNE_PLLEN = enabled            -- activate PLL module
--
WDTCON_SWDTEN = OFF                -- disable WDT
--
_usec_delay (1_000)                -- allow PLL to stabilize
;@jallib section serial
const serial_hw_baudrate = 115_200

enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize


include delay

-- setup uart for communication
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- set stopwatch variable size, (2 = word) or (4 = dword)
const STOPWATCH_VAR_SIZE = 4 -- (4 is default if not defined)
--
-- the lowest time unit to measure
const STOPWATCH_MIN_VALUE = STOPWATCH_NS -- (STOPWATCH_NS is default if not defined)
--
-- choose what timer to use
const STOPWATCH_USE_TIMER = 1 -- (1 is default if not defined)
include stopwatch -- include the library
--
stopwatch_init()

-- main program here

-- print serial start characters
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = " "

stopwatch_start() -- start the stopwatch

-- create some delay to measure
asm nop
;delay_1us() -- some delay
;delay_1ms(1) -- some delay
;delay_1s(1) -- some delay

stopwatch_stop() -- stop the stopwatch

-- print error message if stopwatch time was too long
if stopwatch_time_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error1[] = "Stopwatch time overflow error occurred"
   print_string(serial_hw_data, error1)
end if

-- print error message if stopwatch instruction count ran too long
if stopwatch_cycle_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error2[] = "Stopwatch instruction cycle overflow error occurred"
   print_string(serial_hw_data, error2)
end if

-- measure instructions run and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch_cycles)
const byte instructions[] = " instruction(s)"
print_string(serial_hw_data, instructions)

-- measure time taken and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch)

-- print the time unit of measurement
if STOPWATCH_MIN_VALUE == STOPWATCH_NS then
   serial_hw_data = "n"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_US then
   serial_hw_data = "u"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_MS then
   serial_hw_data = "m"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_S then
   serial_hw_data = "s"
end if

-- print serial end characters
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"