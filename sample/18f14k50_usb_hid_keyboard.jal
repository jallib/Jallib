-- -----------------------------------------------------------------------------
-- Title: USB HID keyboard device demo
-- Author: Albert Faber, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r4
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application emulates a keyboard USB human interface device
-- (HID), once the USB device has been conifgured and the USB HID device is recognized by
-- the host operating systems, it will generate keyboard chars if boot program pin is low
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: There are two options to use the USB driver:
--        1) Without interrupts by frequently calling 'usb_keyboard_flush()' 
--           frequently in the main loop.
--        2) Using interrupts to make timing less critical. In that case no 
--           calls to 'usb_keyboard_flush()' are needed. 
--           This can be activated by defining: const USB_INTERRUPT_DRIVEN = TRUE    
--
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_usb_hid_keyboard.jal
--    Note: It was manually adapted to include the interrupt option.
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off

include delay
;@jallib section serial
const serial_hw_baudrate = 115_200
;@jallib section bootloader
alias bootloader_program_pin    is pin_c2
alias bootloader_program_pin_direction  is pin_c2_direction
;@jallib section led
-- LED IO definition
alias led             is pin_c4
alias led_direction   is pin_c4_direction
alias led2            is pin_c6
alias led2_direction  is pin_c6_direction

-- Use the USB driver on an interrupt basis. This makes it possible to use
-- delays in the main loop since timing becomes less critical.
-- const USB_INTERRUPT_DRIVEN = TRUE
include usb_keyboard

-- set all inputs to digital
enable_digital_io()

-- setup direction bits
led_direction = output
led2_direction = output
bootloader_program_pin_direction = input

var byte key_value = USB_KEYBOARD_KEY_A

-- intialize the library
usb_keyboard_init()

-- main loop
forever loop

   if !defined(USB_INTERRUPT_DRIVEN) then
      -- When the interrupt mode is not used we need to poll the usb ISR function 
      -- on a regular base, in order to serve the USB requests otherwise
      -- this call can be removed.                              
      usb_keyboard_flush()
   end if
   
   -- check if USB device has been configured by the HOST
   if usb_is_configured()  then
   
      led = usb_keyboard_led_caps_lock
      led2 = usb_keyboard_led_num_lock
      
      if ( bootloader_program_pin == low )then
         -- send key code towards the USB host
         -- ush_keyboard_send_key( USB_KEYBOARD_MKEY_LEFT_SHIFT, key_value )
         ush_keyboard_send_key( 0x00, key_value )
            
         -- next key code
         key_value = key_value + 1      
         if ( key_value > USB_KEYBOARD_KEY_Z ) then
            key_value = USB_KEYBOARD_KEY_A
         end if            
      else
         -- depress key
         ush_keyboard_send_key( 0, 0 )
      end if
         
      -- debounce switch
      delay_1ms(50)      
   end if
   
end loop
