-- Title: USB HID keyboard device demo
-- Author: Albert Faber, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application emulates a keyboard USB human interface device
-- (HID), once the USB device has been conifgured and the USB HID device is recognized by
-- the host operating systems, it will generate keyboard chars if boot program pin is low
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: compiled with following flags
-- none when using no bootloader
-- when using bootloader: -loader18 -no-fuse 
-- use -no-variable-reuse when debugging flags are
--  set due to a compiler issue
-- 
-- ------------------------------------------------------
-- ------------------------------------------------------
-- 
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_usb_hid_keyboard.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

include delay
;@jallib section serial
const serial_hw_baudrate = 115_200
;@jallib section bootloader
alias bootloader_program_pin    is pin_b5
alias bootloader_program_pin_direction  is pin_b5_direction
;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction

include usb_keyboard

-- set all inputs to digital
enable_digital_io()

-- setup direction bits
led_direction = output
led2_direction = output
bootloader_program_pin_direction = input

var bit latched_switch = bootloader_program_pin

var byte key_value = USB_KEYBOARD_KEY_A

-- intialize the library
usb_keyboard_init()

-- main loop
forever loop
	-- poll the usb flush function on a regular base, in order to 
	-- serve the USB requests
	usb_keyboard_flush()
	
	-- check if USB device has been configured by the HOST
	if usb_is_configured()  then
	
		led = usb_keyboard_led_caps_lock
		led2 = usb_keyboard_led_num_lock
		
		if ( latched_switch != bootloader_program_pin ) then
		
			latched_switch = bootloader_program_pin
			
			if ( bootloader_program_pin == low )then

				-- send key code towards the USB host
				-- ush_keyboard_send_key( USB_KEYBOARD_MKEY_LEFT_SHIFT, key_value )
				ush_keyboard_send_key( 0x00, key_value )
				
				-- next key code
				key_value = key_value + 1
				
				if ( key_value > USB_KEYBOARD_KEY_Z ) then
					key_value = USB_KEYBOARD_KEY_A
				end if
				
			else
				-- depress key
				ush_keyboard_send_key( 0, 0 )
			end if
		end if
			
		-- debounce switch
		delay_1ms(50)		
	end if
end loop
