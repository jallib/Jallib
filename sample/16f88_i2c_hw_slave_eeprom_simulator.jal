-- Title: Test program for i2c hardware slave, message interface implementation
-- Author: Joep Suijs, Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: this sample shows how to implements an i2c hardware slave,
-- using the message interface lib. It has the same interface* as an 24lc256 i2c eeprom
-- and supports 32 bytes of memory. This means it can be used with the i2c master 
-- samples: i2c_sw_l1 and i2c_hw_l1.
-- --
-- (* the slave does behave similar as far as the test is concerned. It does however 
-- store the data in ram and the memory pointer behaves different, so read without 
-- previous setting the desired address gives unpredictable results.)
-- 
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_i2c_hw_slave_eeprom_simulator.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

;@jallib section led
-- LED IO definition
alias led             is pin_b3
alias led_direction   is pin_b3_direction
alias led2            is pin_b1
alias led2_direction  is pin_b1_direction
led_direction = output

-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

include print

const byte str1[] = "Test i2c hardware slave - msg interface Eeprom sim interface.\r\n"   -- define a string
print_string(serial_hw_data, str1)                 -- output string

-- for debug only!
-- const bit i2c_debug = true -- value does not care, the existence of the const enables debug
if(defined(i2c_debug) == true) then
   const byte  queue01_size = 80
   include queue01
   queue01_clear()
end if
                             
-- ---------------
-- setup i2c slave 
-- ---------------
const byte I2C_BUFFER_SIZE = 40
include i2c_hw_slave_msg

-- this will be the slave address. It looks like:
--     0b_0101_1100
-- => 0b_0101_110   : 7-bits address
-- =>            0  : 8th bit is to specify read or write operation. 
--                    Value can be anything, it does not matter while init
const byte SLAVE_ADDRESS = 0xA0
i2c_hw_slave_init(SLAVE_ADDRESS) 


-- simulated memory 
var volatile byte memory[32];
var volatile word address_pointer = 0;

-- --------------------------------------------------------------------
-- i2c_process_message - User code for i2c slave
-- --------------------------------------------------------------------
-- This code is called from the ISR, every time the i2c slave module 
-- received a serie of bytes.
-- The ISR logic assures this procedure is called exactly once for 
-- each messagae.       
-- --------------------------------------------------------------------
procedure i2c_process_message(byte in byte_count) is
   var byte i
   
   if (byte_count >= 2) then
      -- this should always be the case - we want at least a 2-byte address.
      address_pointer = word(i2c_buffer[0]) * 256 + word(i2c_buffer[1])
                  
      if (byte_count > 2) then
         -- there are bytes to store
         i = 2
         for (byte_count - 2) loop

            if(defined(i2c_debug) == true) then
               queue01_nb = "&" 
               print_byte_hex(queue01_nb, i2c_buffer[i])
            end if

            memory[(address_pointer & 0x1F)] = i2c_buffer[i]
            i = i + 1
            address_pointer = address_pointer + 1
         end loop
      end if

      -- now prepare buffer in case the master wants to read back
      for 32 using i loop 
         i2c_buffer[i] = memory[((address_pointer + i)& 0x1F)] 
      end loop      
   end if
   
end procedure


-- blink a little to tell the world we're up
for 4 loop
   led = on
   _usec_delay(100000)
   led = off
   _usec_delay(100000)
end loop

var byte ch

-- just loop until interrupt is raised
forever loop        
   
   if(defined(i2c_debug) == true) then
      -- dump data from isr to serial port
      ch = queue01_nb
      if (ch != 0) then serial_hw_data = ch end if
   end if

   if (serial_hw_read(ch) == true) then
      serial_hw_data = "!"
      for 32 using ch loop
         print_byte_hex(serial_hw_data, memory[ch])
         serial_hw_data = " "
      end loop
      print_crlf(serial_hw_data)
   end if
   
end loop