-- -----------------------------------------------------------------------------
-- Title: Single channel dimmer
-- Author: Rob Hamerling, Copyright (c) 2009..2021, all rights reserved.
-- Adapted-by: Rob Jansen
-- Compiler: 2.5r5
-- Revision: $Revision$
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- This program shows a simple single channel dimmer by using
-- a combination of one ADC input pin and one PWM output pin.
-- Internal oscillator is used for minimum components.
-- PWM resolution of 256 steps is sufficient for this purpose,
-- and accorlingly low resolution ADC is selected.
--
-- This file has been generated by hand (and manually maintained).
--
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--
include 12f683                                  -- target PIC

-- Use internal oscillator at 8MHz
pragma target CLOCK     8_000_000
pragma target OSC       INTOSC_NOCLKOUT
pragma target WDT       disabled
OSCCON_IRCF   = 0b_111                          -- Fosc = 8 MHz

enable_digital_io()                             -- set all IO as digital
include delay

-- Step 1: ADC analog input pin setup
const byte ADC_CHANNEL = 3                      -- potmeter connected to pin_AN3
ANSEL_ANS3 = TRUE                               -- port 3 is analog input (default)
pin_AN3_direction = input 
-- Step 2: Set VDD and VSS as Vref
ADCON0_VCFG = FALSE                             
-- Step 3: Use Frc as ADC clock 
ANSEL_ADCS = 0b011                              
const ADC_RSOURCE = 4_700                       -- Input resistance: 4.7K potmeter
-- Now we can include the library
include adc                                     
-- And initialize the whole with our parameters
adc_init()                                      

-- PWM setup -------
include pwm_hardware                            -- fetch PWM library
pwm_max_resolution(1)                           -- max res. with highest possible freq.
pin_CCP1_direction = output                     -- set PWM-pin output

var byte measure                                -- ADC value / PWM duty cycle

-- ---- mainline ----
forever loop
   measure = adc_read_low_res(ADC_CHANNEL)      -- get ADC result
   pwm1_set_dutycycle_ratio(4 * measure)        -- copy to PWM duty cycle
end loop

