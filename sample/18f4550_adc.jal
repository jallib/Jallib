-- -----------------------------------------------------------------------------
-- Title: Sample showing how to use adc_library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Rob Hamerling, Rob Jansen
-- Compiler: 2.45r5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this program shows how to use adc library. It regurlarly performs an
-- Analog-to-Digital Conversion, on pin RA0/AN0 and sends the result through serial.
--
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--
-- Few words about diagram: this program performs ADC on channels AN0, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
--
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN0-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
-- - R1=1K, R2=1K: you should get ~127/~512 as ADC value (low/high)
-- - R1=1K, R2=2.2K: you should get ~175/~704 as ADC value (low/high)
--
-- Actual output with the above given resistor values (10% tolerance on resistors):
-- 1k/1k:  Result in high resolution: 540
-- 1k/1k:  Result in low  resolution: 135
-- 1k/2k2: Result in high resolution: 750
-- 1k/2k2: Result in low  resolution: 188
--
-- This file has been generated by hand (manually maintained)
--

include 18f4550
pragma target clock 48_000_000
-- magical statements: using a 20MHz Xtal, you can run @48MHz !
pragma target PLLDIV    P5
pragma target CPUDIV    P1
pragma target USBDIV    P2
pragma target OSC       HS_PLL

pragma target WDT  control          -- watchdog
pragma target LVP  enabled          -- allow Low Voltage Programming
pragma target MCLR external         -- reset externally

WDTCON_SWDTEN = off                 -- no watchdog

-- We'll start to set all pins as digital
-- then, using ADC lib, we'll configure needed
-- ones as analog.
enable_digital_io()

include print
include delay

-- ok, now setup serial, we'll use this
-- to get ADC measures
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- Configure ADC
-- Step 1: ADC input pin setup 
pin_AN0_direction = input                      
-- Set A0 to analog input 
ADCON1_PCFG = 0b000
-- Step 2: Set VDD and VSS as Vref
ADCON1_VCFG0 = FALSE                            -- Vref+ is VDD
ADCON1_VCFG1 = FALSE                            -- Vref- is VSS
-- Step 3: Use Fosc/64 as ADC clock when using a 48 MHz target clock, see datasheet
ADCON2_ADCS = 0b110 
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var word wmeasure
var byte bmeasure
const byte wprefix[] = "Result in high resolution: "
const byte bprefix[] = "Result in low  resolution: "

forever loop

   -- get ADC result, on channel 0
   -- this means we're currently reading on pin AN0 !

   -- access results in high resolution
   wmeasure = adc_read_high_res(0)
   -- wmeasure contains the result, as a word (byte*2)
   print_string(serial_hw_data,wprefix)
   print_word_dec(serial_hw_data,wmeasure)
   print_crlf(serial_hw_data)

   -- though we are in high resolution mode,
   -- we can still get a result as a byte, as though
   -- it were in low resolution.
   bmeasure = adc_read_low_res(0)
   print_string(serial_hw_data,bprefix)
   print_byte_dec(serial_hw_data,bmeasure)
   print_crlf(serial_hw_data)

   -- and sleep a little to prevent flooding serial...
   delay_1ms(200)

end loop

