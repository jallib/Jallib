-- Title: Sample using software implemented USART.
-- Author: Sebastien Lelong, Copyright (c) 2008..2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to setup a simple software serial communication link.
-- It echoes every received char.
--
-- This file has been generated by jallib.py from:
--    * board: board_18f452_dwarf.jal
--    * test : test_serial_sw_echo.jal
--

;@jallib section chipdef
-- chip setup
include 18f452

pragma target clock 20_000_000                  -- xtal frequency
pragma target OSC        hs
pragma target   LVP enabled                     -- allow LVP
pragma target   WDT CONTROL                     -- watchdog software controlled

WDTCON_SWDTEN = OFF                             -- disable watchdog


include delay

-- set all IO as digital
enable_digital_io()


-- ok, now setup serial
-- setup speed. Standard values are: 57_600, 19_200, 9_600, 2_400, ...
-- Note: as it's a software implementation, not all baudrates can work with 
-- our any clock. Higher speeds gives too much errors. We'll use a lower
-- baudrate here.
--
-- because it's a software implementation, we also need to define 
-- tx and rx pins. How clever we are: we use the same pin as in hardware,
-- so it works out of the box with any board having an USART module...
--
-- finally, how levels are understood ? Inverted or not ?
-- Note in hardware serial, it's inverted. Since we're talking to a PC
-- we need to invert the signal
;@jallib section serial_software
alias serial_sw_tx_pin           is pin_C6
alias serial_sw_tx_pin_direction is pin_C6_direction
alias serial_sw_rx_pin           is pin_C7
const serial_sw_baudrate = 9600
const serial_sw_invert = true

serial_sw_tx_pin_direction = output

-- now we can use serial_software module
include serial_software
-- initialize the whole with our parameters
serial_sw_init()

-- inform user PIC is ready !
serial_sw_write("!")

-- let's build our loop
var byte char	-- will store received char
forever loop
	if serial_sw_read(char)
	then
		serial_sw_write(char)	-- that's the echo...
	end if
end loop
