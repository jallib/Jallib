-- Title: Sample showing basic read/write operations on data eeprom
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows a basic usage to read from and write to data eeprom.
-- The first time, it asks for your name, complaining it does not know you...
-- Enter your name, then turn off the PIC. Turn on, it still knows you. Amazing !
-- --
-- You can re-enter your name again, by entering "$" (1 dollar sign) to switch to
-- input mode. This is a basic example of how to implement a read/eval/print/loop (REPL)
--
-- This file has been generated by hand (manually maintained)
--
-- Input/Output: 
-- [open your favorite serial term]
-- [turn on your PIC, you should have something like...]
-- Hi,
-- (press '$' to enter your name...)
-- [follow instructions]
-- Erasing eeprom... done !
-- I don't know you, please enter your name, then press [RETURN]
-- Sebastien Lelong
-- Hi, Sebastien Lelong
-- (press '$' to enter your name...)
-- [turn off/on PIC, it remembers you !]
-- Hi, Sebastien Lelong
-- (press '$' to enter your name...)





include 16f88
-- set all IO as digital
enable_digital_io()

-- We'll use internal oscillator. It work @ 8MHz
pragma target clock		8_000_000
pragma target OSC		INTOSC_NOCLKOUT
-- Specify no postscaler, ie. really runs @8MHz
OSCCON_IRCF = 0b_111
-- no watchdog, please
pragma target WDT		disabled

-- ok, now setup serial
-- we want to use USART/RS232, not SPI
const usart_hw_serial = true	-- true = RS232, false = SPI
-- setup speed. Standard values are: 57_600, 19_200, 9_600, 2_400, ...
const serial_hw_baudrate = 19_200
-- now we can use serial_hardware module
include serial_hardware
-- initialize the whole with our parameters
serial_hw_init()


include pic_data_eeprom
include print

-- This is where we start reading/writing
-- We could start from 0, but for fun (...), 
-- we'll start at 10.
const EEPROM_ADD_START = 10
-- We'll also use a counter to know where we are
var byte eeprom_counter = 0

-- Because we don't want to handle eeprom address logic
-- everywhere in the code, we defines convinient functions
-- and procedures
--
-- store a char, and set next eeprom position
procedure store_char(byte in char) is
	data_eeprom_write(EEPROM_ADD_START + eeprom_counter,char)
	eeprom_counter = eeprom_counter + 1
end procedure

-- read char from eeprom, at current address, then
-- set to next eeprom position
function read_char() return byte is
	var byte char
	data_eeprom_read(EEPROM_ADD_START + eeprom_counter,char)
	eeprom_counter = eeprom_counter + 1
	return char
end function

procedure reset() is
	eeprom_counter = byte(EEPROM_ADD_START)
end procedure

procedure erase() is
	print_crlf(serial_hw_data)
	var byte str [] = "Erasing eeprom... "
	print_string(serial_hw_data,str)
	var byte i
	-- fill eeprom with zero
	
	
	-- for 256 using i loop does not work in JAL
	-- therefore use repeat unitl loop instead
	i = 0
	repeat
		data_eeprom_write(i,0)
		i = i + 1
	until i == 0 
	
	var byte str2 [] = "done !"
	print_string(serial_hw_data,str2)
	print_crlf(serial_hw_data)
end procedure

procedure ask_username() is
	-- first erase all data eeprom
	erase()

	-- ok, now collect info
	var byte str1 [] = "I don't know you, please enter your name, then press [RETURN]"
	print_string(serial_hw_data,str1)
	print_crlf(serial_hw_data)

	-- read entered chars, until return press
	-- store to eeprom in the same time
	var byte char = 255
	-- until a cariage return (win/linux)
	while char >= 32 loop
		-- check if something entered
		if serial_hw_read(char) == true then
			store_char(char)
			-- echo char, so user knows what he's typing
			serial_hw_write(char)
		end if
	end loop

	-- print a EOF (end-of-frame) char to mark end of input
	-- will used to extract username later
	store_char(4)

	print_crlf(serial_hw_data)
	const str2 [] = "Thanks !"
	print_crlf(serial_hw_data)
end procedure

-- erase all, from scratch if needed...
;;erase()

forever loop
	-- back to the beginning of data
	reset()

	var byte str1 [] = "Hi, "
	print_string(serial_hw_data,str1)
	-- extract username
	var byte char = 0
	-- print until reach previously stored EOF
	-- or end of data eeprom memory
	var byte counter = 0
	while (counter != 255) & (char != 4) loop
		char = read_char()
		serial_hw_data = char 
		counter = counter + 1
	end loop
	print_crlf(serial_hw_data)
	var byte str2 [] = "(press '$' to enter your name...)"
	print_string(serial_hw_data,str2)
	print_crlf(serial_hw_data)

	-- wait for user input
	while serial_hw_read(char) == false loop
	end loop

	if char == "$" then
		ask_username()
	end if
end loop
