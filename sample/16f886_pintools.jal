-- Title: Show how to access pins by number, controlling their direction and levels, using pintools.jal library
-- Author: Rob Hamerling
-- Adapted-by:
-- Compiler: 2.4q3
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample show how to use pintools.jal library.
-- This library allows to access pins using a sequence number in an array in
-- stead of the pin name. This sample uses 4 LEDs and a push-button. With each push
-- button action the current led is switched off and next LED switched on.
--
-- Notes:
-- - pin_B0 .. pin_B3 have a LED + series resistor, pin_E3 the push button,
--   for example like the Microchip PicKit 2 28-pin Demo Board.
-- - The forever loop contains more instructions than necessary,
--   these are used just to demonstrate the library features.
--
-- This file has been generated by hand (manually maintained)
--

include 16f886                     -- target PICmicro

-- Compiler directives
pragma target CLOCK    20_000_000  -- CPU frequency

-- Configuration memory settings (fuses)
pragma target OSC      HS          -- HS crystal or resonator
pragma target WDT      CONTROL     -- watchdog software controlled
pragma target MCLR     INTERNAL    -- MCLR pin used as switch input
pragma target BROWNOUT DISABLED    -- no brownout detection
pragma target IESO     DISABLED    -- no int/ext clock switchover
pragma target FCMEN    DISABLED    -- no fail-safe clock monitoring
pragma target LVP      ENABLED     -- allow Low Voltage Programming
pragma target DEBUG    DISABLED    -- no debugging

-- Note: Not specified: Code protection, Data EEPROM protection,
--       Flash Write protection and some other configuration bits.

WDTCON_SWDTEN = OFF                -- no watchdog

OSCCON_SCS = 0b00                  -- select primary clock source

enable_digital_io()                -- make all pins digital I/O

include delay -- include the delay library

-- Setup pushbutton to control the LEDs
alias sw1 is pin_E3
pin_E3_direction = input

-- Here we define our associate array, a mapping between
-- pin names and an index.
-- First LED is on pin_B0: its index will be 0,
-- second LED: pin_B1, index = 1, etc.
-- Array elements go by 2: [port,number],
-- which translates to (size = 2 * 4 pins)

const byte pintools_map[] = {"B",0, "B",1, "B",2, "B",3}

include pintools

-- logical aliases for the pintools procedures
alias led           is pintools_level
alias led_direction is pintools_direction

var byte i = 3                               -- start with last LED

forever loop

   -- "read" switch SW1                      -- when switch is open pin_E3 is pulled up
   if (sw1 == low) then                      -- button pushed

     if (led[i] == ON) then                  -- is current LED on
        led[i] = OFF                         -- switch it OFF
     end if
     if (led_direction[i] == OUTPUT) then    -- is current pin output
        led_direction[i] = INPUT             -- switch to input mode
     end if

     i = i + 1                               -- next LED
     if (i >= count(pintools_map) / 2) then  -- past last pin in pinmap
        i = 0                                -- restart from begin
     end if
     led[i] = ON
     led_direction[i] = OUTPUT

     while (sw1 == low) loop                 -- debouncing
        delay_1ms(50)
     end loop

   end if

end loop

