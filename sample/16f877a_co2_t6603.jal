-- Title: read CO2 values from GE/Telaire T6603 CO2 sensor, show on LCD
-- Author: Eur van Andel, eur@fiwihex.nl Copyright (c) 2008, all rights reserved.
-- Adapted-by: Albert Faber
-- Compiler: =2.4l
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to read CO2 concentration values
-- from the GE/Telaire CO2 sensor, using the serial_hardware, delay
-- and t6603_co2 library. It uses a 4x20 LCD for user interaction.
-- The T6603 uses 3.3V serial signals, negative logic at 19k2 baud.
-- Use a level converter like the 74xx07 with both 5V and 3.3V pullups.
--
-- This file has been generated by hand (manually maintained)
--
-- Note: the CO2 sensor needs some 20s to get heated after powerup. Just wait.
-- The sensor sometimes gives a wrong value, this is just after it
-- updates the internal value. This can be overcome by polling the status byte
-- until it is non-zero, then waiting for a second before polling the ppm value.
-- This is not done here.

-- select PIC
include 16f877a

pragma target clock 20_000_000  -- 20 MHz xtal
pragma target OSC       HS
pragma target WDT       disabled        -- no watchdog, please
pragma target LVP       enabled         -- allow low voltage programming, frees up pin_b3

-- set all IO as digital
enable_digital_io()

-- ------------------- INCLUDE LIBRARIES --------------------------

const usart_hw_serial       = true  -- true = RS232, false = SPI
const serial_hw_baudrate    = 19_200
include serial_hardware
serial_hw_init()                -- calculate baudrate, turn peripheral on


const byte LCD_CHARS = 20
const byte LCD_ROWS  = 4

alias LCD_RS        is pin_b5       -- LCD command/data select.
alias LCD_EN        is pin_b4       -- LCD data trigger
alias LCD_dataport     is portb_low    -- LCD data nibble
portb_direction     = all_output    -- LCD data is portb_low
include lcd_hd44780_4               -- LCD library with 4 data lines
lcd_init()

include print                       -- nice formatted output

delay_100ms(5)                      -- to get the LCD up & running

include co2_t6603                      -- actual CO2 library

-- ---------------- VARIABLES ---------------------------

var word co2                       -- in ppm

-- --------------- START PROGRAM ---------------------------

lcd_clear_screen()
lcd_cursor_position(0,0)
const byte str1[] = "CO2 monitor"
print_string(lcd, str1)             -- output string to LCD
delay_100ms(30)

lcd_clear_screen()

forever loop

    CO2 = get_co2_ppm()
    lcd_cursor_position(0, 0)                 -- row 1, position = 1
    print_word_dec(lcd, CO2)
    lcd="p" lcd="p" lcd="m" lcd =" " lcd =" " lcd =" "

    delay_100ms(10)         -- for proper display function

end loop
