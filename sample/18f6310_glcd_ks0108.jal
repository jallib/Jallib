-- ------------------------------------------------------
-- Title: Graphics LCD sample of the Microchip pic18f6310
--
-- Author: Rob Hamerling, Copyright (c) 2011..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample program for use with 128x64 graphics LCD
-- with KS0108 chipset, like the GDM12864A, using external fonts.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
-- chip setup
include 18f6310

pragma target clock   20_000_000                   -- Fosc

pragma target OSC     hs
pragma target FCMEN   disabled
pragma target IESO    disabled
pragma target WDT     control
pragma target CCP2MUX pin_C1
pragma target MCLR    external
pragma target DEBUG   disabled

WDTCON_SWDTEN = OFF                    -- no watchdog


-- GRAPHIC_LCD IO definition ------------------------
var volatile byte GLCD_DATAPRT     is portD
var volatile byte GLCD_DATAPRT_DIR is portD_direction

var volatile bit GLCD_DI  is pin_E7
var volatile bit GLCD_RW  is pin_E3
var volatile bit GLCD_E   is pin_E5
var volatile bit GLCD_CS1 is pin_B0
var volatile bit GLCD_CS2 is pin_B1
var volatile bit GLCD_RST is pin_B2

var volatile bit GLCD_DI_DIRECTION  is pin_E7_direction
var volatile bit GLCD_RW_DIRECTION  is pin_E3_direction
var volatile bit GLCD_E_DIRECTION   is pin_E5_direction
var volatile bit GLCD_CS1_DIRECTION is pin_B0_direction
var volatile bit GLCD_CS2_DIRECTION is pin_B1_direction
var volatile bit GLCD_RST_DIRECTION is pin_B2_direction

const GLCD_CLIPPING = TRUE                         -- enable clipping (of ellipse)

enable_digital_io()                                -- all pins digital I/O

include delay
include math
include print

include glcd_6x8_font                              -- font to be used
include glcd_font                                  -- common font stuff
glcd_font_use(FONT_6X8)                            -- activate font

include glcd_ks0108                                -- glcd device dependent library

glcd_init()                                        -- initialize display

const byte str[] = "GLCD_TEST "

glcd_background_color = GLCD_WHITE                 -- background color
glcd_pen_color = GLCD_BLACK                        -- pixel color

var byte i = 0
var byte d

forever loop

   glcd_clear_screen()
   delay_100ms(10)

   for (GLCD_X_PIXELS / glcd_font_current_width_ + 1) using i loop
      glcd_write_char(i * glcd_font_current_width_, i, "A" + i)   -- every char 1 pixel-line lower
      delay_100ms(1)
   end loop

   for (GLCD_X_PIXELS / glcd_font_current_width_ + 1) using i loop
      glcd_write_char(i * glcd_font_current_width_, 12 + i, "a" + i)  -- every char 1 pixel-line lower
      delay_100ms(1)
   end loop

-- Test to see if reads work also properly

-- for (GLCD_X_PIXELS - 1) using i loop
--    d = _ks0108_read_byte(i, 8)                  -- page boundary: simple read
--    _ks0108_write_byte(i, 44, d)
-- end loop
--
-- for (GLCD_X_PIXELS - 1) using i loop
--    d = _ks0108_read_byte(i, 12)                 -- page crossing: double read
--    _ks0108_write_byte(i, 56, d)
-- end loop

   delay_100ms(50)

end loop

