-- -----------------------------------------------------------------------------
-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r5
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: this program shows how to use adc_hardware library. 
-- It regurlarly performs an Analog-to-Digital Conversion, on channels AN0 and AN1
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--   
-- Few words about diagram: this program performs ADC on channels AN0 and AN1, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
-- 		 
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ ANx-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--	AN0: - R1=1K, R2=1K: you should get ~127/~512 as ADC value (low/high)
-- AN1: - R1=1K, R2=2.2K: you should get ~175/~704 as ADC value (low/high)
--
-- Actual output with the above given resistor values (10% tolerance on resistors):
-- Channel  (high) 0: 503
-- Channel  (low) 0: 125
-- Channel  (high) 1: 702
-- Channel  (low) 1: 175
--
-- This file was originally a generated version but was changed by hand 
-- (and manually maintained) for use with the updated adc library.
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--

-- chip setup
include 16f88

;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

-- set all IO as digital, will turn ADC on later
enable_digital_io()

include print
include delay
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- Configure ADC
-- Step 1: ADC input pin setup we wil use channel 0 and 1 (2 channels)
ANSEL_ANS0 = TRUE                               
pin_AN0_direction = input
ANSEL_ANS1 = TRUE                               
pin_AN1_direction = input
-- Step 2: Set VDD and VSS as Vref
ADCON1_VCFG = 0b00
-- Step 3: Use Frc as ADC clock 
ADCON0_ADCS = 0b11 
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 2_000
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var word measure
var byte lowmeasure, channel
const byte prefix[] = "Channel "
const byte highstr[] = " (high) "
const byte lowstr[] = " (low) "
const byte suffix[] = ": "

forever loop
   -- loop over all channels and read
   for 2 using channel loop

	  -- get ADC result, high resolution
	  measure = adc_read_high_res(channel)
	  -- send it back through serial
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,highstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_word_dec(serial_hw_data,measure) 
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(100)

	  -- Even if we set high resolution, we can still access results
	  -- in low resolution (the 2 LSb will be removed)
	  lowmeasure = adc_read_low_res(channel)
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,lowstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_byte_dec(serial_hw_data,lowmeasure) 
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(100)

   end loop
end loop
