-- ----------------------------------------------------------------------------
-- Title: Test program for i2c_hardware.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Level 0 i2c test program
--    interact with an i2c eeprom using the i2c primitives
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Sources:
-- 
-- Notes: 
--    setup: 
--         an 24lc256 i2c eeprom, connected to the test board i2c pins.
--         a serial connection to a terminal
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_i2c_hw_l0.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off
;@jallib section i2c
-- I2C io definition, using hardware I2C
alias i2c_scl            is pin_b6
alias i2c_scl_direction  is pin_b6_direction
alias i2c_sda            is pin_b4
alias i2c_sda_direction  is pin_b4_direction


-- generic setup (see releated examples for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
include print
include delay

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)

;include i2c_software                
include i2c_hardware

i2c_initialize()

-- we're alive
const byte str1[] = "Test.\r\n" 
print_string(serial_hw_data, str1)

var bit r
var byte i
forever loop

   -- read first 3 bytes from an 24lc256 eeprom and output these to the serial port
   -- then, increment the last one (write one byte)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x00) -- memory address low  byte
   
   i2c_restart()
   r = r & i2c_transmit_byte(0xA1) -- i2c address for read (of memory from eeprom)
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(false)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i2c_stop()

   -- write part (relies on var i, we just read!)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x02) -- memory address low  byte
   r = r & i2c_transmit_byte(i+1)  -- data byte
   i2c_stop()
   
   print_crlf(serial_hw_data)
   
   delay_100ms(10)
end loop
