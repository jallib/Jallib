-- -----------------------------------------------------------------------------
-- Title: Sample showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Rob Jansen
-- Compiler: 2.5r5
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this program shows how to use adc_hardware library. It regurlarly performs an
-- Analog-to-Digital Conversion, on channels AN0 to AN6 (see pin diagrams to know which pins are involved),
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--
-- Few words about diagram: this program performs ADC on channels AN0 to AN6, so you can measure
-- any voltage source connected to these channels (no more than 5V please). To test the whole, you can
-- use a voltage divider. For AN0:
--		
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ ANx-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
-- 
-- - R1=1K, R2=1K: you should get ~127 as ADC value
-- - R1=1K, R2=2.2K: you should get ~175 as ADC value
--
-- Actual output with the above given resistor values (10% tolerance on resistors)
-- and only AN0 and AN1 connected to the resistors, the other inputs floating:
-- Channel 0:123
-- Channel 1:174
-- Channel 2:78
-- Channel 3:43
-- Channel 4:12
-- Channel 5:0
-- Channel 6:0
--
-- This file has been generated by hand (manually maintained)
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--

include 16f88
-- set all IO as digital, will turn ADC on later (by adc lib)
enable_digital_io()

-- We'll use internal oscillator. It work @ 8MHz
pragma target CLOCK 8_000_000
pragma target OSC INTOSC_NOCLKOUT
-- Specify no postscaler, ie. really runs @8MHz
OSCCON_IRCF = 0b_111
-- no watchdog, please
pragma target WDT		disabled

include print
include delay
const usart_hw_serial = true	-- true = RS232, false = SPI
const serial_hw_baudrate = 19_200
include serial_hardware
serial_hw_init()
-- inform user PIC is ready !
serial_hw_write("!")

-- Step 1: ADC input pin setup we wil use channel 0 to 6 (7 channels)
ANSEL_ANS0 = TRUE                               
pin_AN0_direction = input
ANSEL_ANS1 = TRUE                               
pin_AN1_direction = input
ANSEL_ANS2 = TRUE                               
pin_AN2_direction = input
ANSEL_ANS3 = TRUE                               
pin_AN3_direction = input
ANSEL_ANS4 = TRUE                               
pin_AN4_direction = input
ANSEL_ANS5 = TRUE                               
pin_AN5_direction = input
ANSEL_ANS6 = TRUE                               
pin_AN6_direction = input
-- Step 2: Set VDD and VSS as Vref
ADCON1_VCFG = 0b00
-- Step 3: Use Frc as ADC clock 
ADCON0_ADCS = 0b11 
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 2_000
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var byte measure, channel
const byte prefix[] = "Channel "

forever loop

   -- loop over all channels and read
   for 7 using channel loop
	  -- get ADC result
	  measure = adc_read_low_res(channel)
	  -- send it back through serial
	  print_string(serial_hw_data,prefix)
	  print_byte_dec(serial_hw_data,channel)
	  serial_hw_write(":")
	  print_byte_dec(serial_hw_data,measure)
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(200)
   end loop

end loop

