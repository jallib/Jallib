-- =======================================================================
-- Title: Test program for serial communications with PPS
-- Author: Rob Hamerling, Copyright (c) 2008..2015, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4q3
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Program to test the serial hardweare libraries
--
-- Sources:
--
-- Dependencies:
--
-- Notes:
--
-- -----------------------------------------------------------------------

include 16F1708                             -- target: PIC16F88

pragma target clock      20_000_000          -- resonator frequency

pragma target OSC        hs
pragma target WDT        disabled
pragma target PWRTE      enabled
pragma target MCLR       external
pragma target BROWNOUT   enabled
pragma target CLKOUTEN   disabled
pragma target IESO       disabled
pragma target FCMEN      disabled
pragma target PPS1WAY    disabled            -- allow multiple changes
pragma target ZCD        disabled
pragma target PLLEN      disabled  
pragma target LVP        enabled 
 
enable_digital_io()                          -- disable analog functions

alias led is pin_A0
pin_A0_direction = output

include pps
pps_control_lock(FALSE)                     -- unlock PPS module
RB7PPS = PPS_TX                             -- pin_B7 is TX
RXPPS  = PPS_RB5                            -- RX is on pin_B5
pps_control_lock(TRUE)                      -- lock PPS module

const   SERIAL_HW_BAUDRATE = 115200          -- host communications

-- Aliases for the USART pins 
-- (not declared in the device files) 
alias pin_rx            is  pin_B5
alias pin_tx            is  pin_B7 
alias pin_ctsinv        is  pin_B6
alias pin_rx_direction  is  pin_B5_direction
alias pin_tx_direction  is  pin_B7_direction
pin_B6_direction = OUTPUT


include serial_hw_int_cts                    -- RS232 library
serial_hw_init()

include print
print_string(serial_hw_data, PICTYPE)

var   byte  x
forever loop
   if (serial_hw_read(x) == true) then       -- char available
      led = !led                             -- signal something received
      serial_hw_data = x                     -- echo every char 
   end if
end loop


