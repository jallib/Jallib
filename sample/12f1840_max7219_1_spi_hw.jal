-- ------------------------------------------------------
-- Title: Test 7-segment module with MAX7219 chip
--
-- Author: Rob Hamerling, Copyright (c) 2014..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Simple program to test the max7219_1 library.
-- It can use the SPI hardware or the SPI software library,
-- selected by a constant (see max7219_common.jal)
-- Most procedures and functions are called at least once,
-- with different arguments to show the capabilities of
-- a ready-built PCB with 8x8 led matrix display.
--
-- Sources:
--
-- Notes: See also samples for a chain of MAX7219 modules
--
-- ------------------------------------------------------
--
-- chip setup
include 12f1840

-- This program uses the Internal oscillator at 8 MHz
pragma target clock    8_000_000    -- oscillator frequency

pragma target OSC      INTOSC_NOCLKOUT  -- internal oscillator
pragma target WDT      DISABLED     -- watchdog
pragma target PWRTE    ENABLED      -- powerup delay
pragma target MCLR     EXTERNAL     -- reset externally
pragma target BROWNOUT DISABLED     -- no brownout
pragma target IESO     DISABLED     -- no osc switchover
pragma target PLLEN    DISABLED     -- PLL software controlled
pragma target LVP      ENABLED      -- allow LVP

-- setup internal oscillator

OSCCON_SPLLEN = 0                   -- PLL disabled
OSCCON_IRCF = 0b1110                -- 8 MHz
OSCCON_SCS = 0b00                   -- Clock determined by fuses

enable_digital_io()

-- --- setup MAX7219 -------------------------------

const bit MAX7219_SPI_HW = TRUE     -- SPI hardware used

if (MAX7219_SPI_HW == TRUE) then
   if (defined(APFCON_SDOSEL)) then
      apfcon_sdosel = 0             -- configure SDO on pin RA0
      alias pin_SDO_direction is pin_SDO_RA0_direction
   end if
   pin_SDO_direction = OUTPUT       -- SDO = pin_A0
   pin_SCK_direction = OUTPUT       -- CLK = pin_A1
else
   alias max7219_din is pin_A0
   alias max7219_clk is pin_A1
   pin_A0_direction  =  OUTPUT
   pin_A1_direction  =  OUTPUT
end if

alias max7219_cs   is pin_A2
pin_A2_direction = OUTPUT

const bit MAX7219_DISPLAY_CACHE = TRUE   -- use cache

include max7219_1                   -- single MAX7219 support library
delay_100ms(1)                      -- power up delay before init
max7219_init()                      -- initialise the MAX7219

-- --------------------------------------------------
var byte i,j

forever loop

   max7219_display_clear()
   max7219_display_test(5)
   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   for 8 using i loop
      max7219_display_col(i, TRUE)        -- column
      delay_100ms(2)
      max7219_display_col(i, FALSE)
   end loop

   for 8 using i loop
      max7219_display_row(i, TRUE)        -- row
      delay_100ms(2)
      max7219_display_row(i, FALSE)
   end loop

   for 8 using i loop                     -- diagonal 1
      max7219_display_bit(i, i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop                     -- diagonal 2
      max7219_display_bit(i, 7 - i, TRUE)
      delay_100ms(1)
   end loop

   max7219_display_blink(3,3)             -- blinking cross

   for 16 using i loop                    -- intensity range
      max7219_display_intensity(i)
      delay_100ms(2)
   end loop

   max7219_display_clear()
   max7219_display_intensity(MAX7219_DISPLAY_PWM5)

   for 8 using i loop                     -- triangle
      max7219_display_byte_bin(i, (2 << i) - 1)
      delay_100ms(2)
   end loop

   for 15 using i loop                    -- walking diagonal
      for 8 using j loop
         if ((i < j + 8)  &  (i >= j)) then
            max7219_display_byte_bin(j, 1 << (i - j))
         else
            max7219_display_byte_bin(j, 0)
         end if
      end loop
      delay_100ms(2)
   end loop

   const byte v[] = {24,60,126,255}
   const byte h[] = {24,36,66,129}
   for 4 using i loop                     -- big bang
      for 4 using j loop
         if j < i then
            max7219_display_byte_bin(3 - j, h[i])
            max7219_display_byte_bin(4 + j, h[i])
         elsif j == i then
            max7219_display_byte_bin(3 - j, v[i])
            max7219_display_byte_bin(4 + j, v[i])
         else
            max7219_display_byte_bin(3 - j, 0)
            max7219_display_byte_bin(4 + j, 0)
         end if
      end loop
      delay_100ms(3)
   end loop

   max7219_display_clear()
   const byte s[] = {60,66,165,141,141,165,66,60}
   for 8 using i loop
      max7219_display_byte_bin(i, s[i])
   end loop
   for 3 using i loop
      delay_100ms(5)
      max7219_display_bit(5, 5, FALSE)
      delay_100ms(2)
      max7219_display_bit(5, 5, TRUE)
   end loop
   delay_100ms(5)
   max7219_display_clear()

end loop

