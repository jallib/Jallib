-- -----------------------------------------------------------------------------
-- Title: Sample program for the Bluetooth HC-06 module.
--
-- Author: Rob Jansen, Copyright (c) 2021..2021 all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.5r4
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demonstrates the features of the Bluetooth HC06 slave module.
--              The program acts as a wireless serial COM port. The HC-06 can be
--              reprogrammed by making the 'program' pin active low.
--                 
-- Sources:     Bluetooth HC-06 Module Datasheet revision 2.2 (2011/04/06)
--              Guangzhou HC Information Technology Co., Ltd.
--
-- Notes:      The HC-06 module uses a serial interface so at least one of the  
--             JAL serial hardware libraries must be included by the main program.       
--
--            Steps to connect to a computer:
--            -) Find the Bluetooth device with the name you have given it.
--            -) Enter the pincode, the device should get the status 'Paired.'
--            -) Start a terminal program on your computer. The device will appear
--               as a COM port. Connect to the device with the terminal emulation
--               program. Once connected the LED on the module stops blinking and 
--               all characters that are sent to the module will be sent to the
--               second USART and all characters from the second USART will be 
--               sent to the computer.        
--
--            PIC USART connections for this PIC (14 pin DIP):
--            *) TX 1: pin 5  of the USART1 of the PIC to the RX pin of the Module.
--            *) RX 1: pin 6  of the USART1 of the PIC to the TX pin of the Module.
--            *) TX 2: pin 9  of the USART2 of the PIC to the pin 11 of the MAX232.
--            *) RX 2: pin 10 of the USART2 of the PIC to the pin 12 of the MAX232. 
--
include 16f15325                  

-- ------------------------------- Pragmas -------------------------------------

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000  -- oscillator frequency
--
pragma target OSC      OFF         -- internal oscillator
pragma target RSTOSC   HFINT32     -- select 32 MHz
pragma target CLKOUTEN DISABLED    -- no clock output
pragma target WDT      DISABLED    -- watchdog
pragma target BROWNOUT DISABLED    -- no brownout reset
pragma target FCMEN    DISABLED    -- no clock monitoring
pragma target CSWEN    ENABLED     -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED     -- Low voltage programming
pragma target MCLR     EXTERNAL    -- external reset
OSCCON2 = 0x00                     -- 32 MHz and no division
--
-- Enable weak pull up for all ports since some inputs are not connected
WPUA = 0b0001_1111       
WPUC = 0b0001_1111       

enable_digital_io()
-- Give the hardware some time to stabilize.
_usec_delay(100_000)
 
-- -------------------------------- Pins ---------------------------------------
-- Declaration of the USART1 pins for the Module
alias pin_RX_direction  is pin_C4_direction  -- Pin 6 for 14 pin DIP
alias pin_TX_direction  is pin_C5_direction  -- Pin 5 for 14 pin DIP. 

-- Declaration of the remapped USART2 pins for the PC.
alias pin_RX2_direction is pin_C0_direction  -- Pin 10 for 14 pin DIP
alias pin_TX2_direction is pin_C1_direction  -- Pin 9  for 14 pin DIP.

-- Programming pin.
alias program_pin is pin_C3                  -- Active LOW.
pin_C3_direction = input                     -- Pin 7 for 14 pin DIP. 

-- ------------------------- Constant declarations -----------------------------

-- Baudrate defintions. Module default is 9600 baud.
const serial_hw_baudrate   = 9600   -- USART default baudrate of the Module.
const serial_hw2_baudrate  = 115200 -- USART speed for the terminal.

-- Optional. Wait at most 1 second for a character from the module.
-- const word BT_HC06_READ_TIMEOUT = 10_000 -- 10.000 times 100 us, see library.

-- -------------------------- Includes go here ---------------------------------

-- We need to include the serial library first followed by the include of the
-- module so that this USART is used for communication with the module.
-- It is best to use the interrupt based serial routines to prevent data loss
-- when data is received.  Adjust the buffer size to limit timing problems or
-- to deal with baudrate differences.
const SERIAL_XMTBUFSIZE = 50 -- size of transmit buffer
const SERIAL_RCVBUFSIZE = 50 -- size of receive buffer     
const SERIAL_DELTA      = 0  
include serial_hw_int_cts
include bt_hc06              -- It will use the above included serial interface.

-- Some constants for reprogramming the HC-06. Change to your needs.
const byte DEVICE_PINCODE[] = "1111"              -- Default is "1234"  
const byte DEVICE_NAME[]    = "My HC-06"
const byte DEVICE_BAUDRATE  = BT_HC_BAUDRATE_9600 -- This is the default. 

-- Terminal data goes via the second USART interface. Adjust the buffer size to 
-- limit timing problems or to deal with baudrate differences.           
const SERIAL2_XMTBUFSIZE = 50 -- size of transmit buffer
const SERIAL2_RCVBUFSIZE = 50 -- size of receive buffer     
const SERIAL2_DELTA      = 0  
include serial_hw2_int_cts  
include PPS
include print
include strings                            

-- Re-assign the pins. Note: This must always be done to let it work even for 
-- the default assignment.
pps_control_lock(FALSE)                
RC5PPS   = PPS_TX1       -- TX1 re-assigned to C5  (default)             
RX1DTPPS = PPS_RC4       -- C4  re-assigned to RX1 (default)            
RC1PPS   = PPS_TX2       -- TX2 re-assigned to C1  (default)     
RX2DTPPS = PPS_RC0       -- C0  re-assigned to RX2 (default)             
pps_control_lock(TRUE)                 

-- ------------------------- Variable declarations -----------------------------
var bit all_ok = FALSE

-- -----------------------  Main program starts here ---------------------------
-- Initialize the serial libraries.
serial_hw_init()   -- Used by Bluetooth Module
serial_hw2_init()  -- Used by the main program.

print_crlf(serial_hw2_data)
print_string(serial_hw2_data,"Sample program for the Bluetooth HC-06 Module.\r\n")

-- Initialize the module. This is the same as reset.
bt_hc06_init()

-- Let's see if the module is available for programming.
if bt_hc06_available() then
   print_string(serial_hw2_data,"Module is available.\r\n")
   all_ok = TRUE
else
   print_string(serial_hw2_data,"Module is NOT available or already connected.\r\n")
   all_ok = TRUE
end if

-- Check the program pin, if low we will change some default values of the
-- HC-06 module as set by the user.
if all_ok & !program_pin then

    -- Change the pincode of the module.
   if bt_hc06_set_device_pin(DEVICE_PINCODE) then
      print_string(serial_hw2_data,"Module pincode set to ")
      print_string(serial_hw2_data,DEVICE_PINCODE)
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Module pincode NOT set.\r\n")
      all_ok = FALSE
   end if

   -- Change the name of the module.
   if bt_hc06_set_device_name(DEVICE_NAME) then
      print_string(serial_hw2_data,"Module device name set to ")
      print_string(serial_hw2_data,DEVICE_NAME)
      print_crlf(serial_hw2_data)
   else
      print_string(serial_hw2_data,"Module device name NOT set.\r\n")
      all_ok = FALSE
   end if

   -- Change the baudrate. Note that the baudrate changes after a new power up 
   -- of the module. Make sure that the PIC also uses this new baudrate after power up.
   if bt_hc06_set_baudrate(DEVICE_BAUDRATE) then
      print_string(serial_hw2_data,"Module baudrate set.\r\n")
   else
      print_string(serial_hw2_data,"Module baudrate NOT set.\r\n")
      all_ok = FALSE
   end if

   -- In order to take effect we need to reset the device.
   if all_ok then
      bt_hc06_reset()
   end if

end if

-- Main loop.
forever loop

  -- If data is received from the host via the Bluetooth Module send it to USART2. 
  if bt_hc06_data_available() then
     serial_hw2_data = bt_hc06_data
   end if
  
  -- If data was received from USART2 send it to the host via the Bluetooth Module.
  if serial_hw2_data_available() then
     bt_hc06_data = serial_hw2_data
  end if 

end loop



