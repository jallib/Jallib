-- ----------------------------------------------------------------------------
-- Title: Test program for i2c_software.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
--  
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: LCD DSM0822A star burst display test program
-- 
-- Sources:
-- 
-- Notes: 
--    setup: a dsm0822a display, connected via i2c
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_lcd_dsm0822a.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section i2c
-- I2C io definition, using hardware I2C, currently mutual exlusive with display
-- this will be fixed in next board
alias i2c_scl            is pin_b1
alias i2c_scl_direction  is pin_b1_direction
alias i2c_sda            is pin_b0
alias i2c_sda_direction  is pin_b0_direction


-- generic setup (see releated examples for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
include print
include delay

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)

include i2c_software
;include i2c_hardware

i2c_initialize()

-- inculde dsm0822a libraray & init                                                                                                                                                    const byte I2C_port = 0
include lcd_dsm0822a
dsm_init()

const byte str1[] = "\nStar ";
print_string(dsm_data, str1);  -- print 'Star' ('\n' sets cursor at home position)

dsm_data = ASCII_CR  -- set cursor back at home position

var byte ch = " "

forever loop

   -- 'walk' the strength indicator
   dsm_clear_indicator(DSM_I1 | DSM_I2 | DSM_I3)   -- clear all strength indicators
   dsm_set_indicator(DSM_I1)     -- set left strength indicators
   delay_100ms(3)

   dsm_clear_indicator(DSM_I1)   -- clear the left indicator   
   dsm_set_indicator(DSM_I2)     -- set the middle one
   delay_100ms(3)

   dsm_clear_indicator(DSM_I2)   -- clear the middle indicator   
   dsm_set_indicator(DSM_I3)     -- set the rigth one
   delay_100ms(3)

   dsm_clear_indicator(DSM_I3)   -- clear the right indicator   
   delay_100ms(3)

   -- put the next character on screen
   dsm_data = ch        ; put char on display
   ch = ch + 1          ; next char
   if (ch > "_") then   ; if beyond last char
      ch = " "          ; then start over
   end if   

end loop
