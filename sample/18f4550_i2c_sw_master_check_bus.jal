-- Title: Master part of i2c slave check bus test
-- Author: Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: this test corresponds to the master part
-- of i2c hardware slave bus check testing program. It blinks a little,
-- then send a i2c command, then infinitely loop. 
-- This is a one-shot test, if you want to run it again, reset your PICs
-- (or switch the power off/on...)
-- 
-- Sources:
-- 
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_i2c_sw_master_check_bus.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
enable_digital_io()

;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction
-- blink a little, then send i2c command
led_direction = output
for 8 loop
   led = on
   _usec_delay(250000)
   led = off
   _usec_delay(250000)
end loop

;@jallib section i2c
-- I2C io definition, using hardware I2C, currently mutual exlusive with display
-- this will be fixed in next board
alias i2c_scl            is pin_b1
alias i2c_scl_direction  is pin_b1_direction
alias i2c_sda            is pin_b0
alias i2c_sda_direction  is pin_b0_direction

-- i2c setup
const word _i2c_bus_speed = 4 ; 400kHz
const bit _i2c_level = true   ; i2c levels (not SMB)
include i2c_software                
i2c_initialize()

var byte i2c_tx_buffer[2]
var byte i2c_rx_buffer[1]
include i2c_level1
var byte icaddress = 0x1F	-- slave address, can be anything

-- go! If slave starts to flash at high speed,
-- it works !
-- dummy command
i2c_tx_buffer[0] = "."
var bit _trash = i2c_send_receive(icaddress, 1, 1)

forever loop
   -- reached the end of test
end loop
