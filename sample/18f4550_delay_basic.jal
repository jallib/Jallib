-- ----------------------------------------------------------------------------
-- Title: Test (Demo) program showing how to use delay library
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to use delay library. This very useful library
-- contains delay procedures, and can be used whatever the oscillator speed used.
-- 
-- Notes: as output, this sample produces characters on a serial link. First be sure you're able
-- to run serial tests.
--              
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_delay_basic.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- famous delay lib !
include delay

-- will periodically send those chars
var byte chars_to_send[8] = {"a","B","c","d","e","F","g","H"}
forever loop
	-- here we call several delay statements, just for fun
	-- since it'll be read by humans, can't use too short delays...
	serial_hw_write(chars_to_send[0])
	delay_1ms(10)	-- 1Oms

	serial_hw_write(chars_to_send[1])
	delay_1ms(100)	-- 100ms

	serial_hw_write(chars_to_send[2])
	delay_100ms(5)	-- 500ms

	serial_hw_write(chars_to_send[3])
	delay_100ms(10) -- 1000ms = 1s

	serial_hw_write(chars_to_send[4])
	delay_100ms(10)	-- 1000ms = 1s

	serial_hw_write(chars_to_send[5])
	delay_100ms(15) -- 1500ms = 1s

	serial_hw_write(chars_to_send[6])
	delay_100ms(20)	-- 2000ms = 2s

	serial_hw_write(chars_to_send[7])
	delay_100ms(50)	-- 5000ms = 5s
	
end loop
