-- -----------------------------------------------------------------------------
-- Title: Sample showing the operation of the touch screen on an ili9341.
-- Author: Rob Jansen, Copyright (c) 2022..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6 
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demo program showing the operation of the touch screen on an
--              ILI9341 TFT full color display based on an ads7843/XPT2406 touch
--              screen IC. It shows how the interrupt of the ads7843 can be used.
--              When the screen is touched, the x and y coordinates of the touch
--              location will be shown on the display for half a second.
--
-- Notes:       The interrupt output of the touch screen is open drain so it
--              must be connected to VCC via a 10 kOhm resistor.
--

include 16f18857
-- When using a crytal of 20 MHz
-- pragma target clock 20_000_000      -- oscillator frequency
-- pragma target OSC      HS           -- crystal or resonator
-- pragma target RSTOSC   EXT1X        -- power-up clock select: OSC
-- pragma target CLKOUTEN DISABLED     -- no clock output
-- pragma target WDT      DISABLED     -- watchdog
-- pragma target BROWNOUT DISABLED     -- no brownout reset
-- pragma target FCMEN    DISABLED     -- no clock monitoring
-- pragma target CSWEN    ENABLED      -- allow writing OSCCON1 NOSC and NDIV
-- pragma target LVP      ENABLED      -- use low voltage programming
-- pragma target MCLR     EXTERNAL     -- external reset 

-- When using internal oscillator at 16 MHz (PIC running at 3.3 Volt).
pragma target clock    16_000_000       -- oscillator frequency
pragma target OSC      OFF              -- internal oscillator
pragma target RSTOSC   HFINT32          -- select 32 MHz
pragma target CLKOUTEN DISABLED         -- no clock output
pragma target WDT      DISABLED         -- watchdog
pragma target BROWNOUT DISABLED         -- no brownout reset
pragma target FCMEN    DISABLED         -- no clock monitoring
pragma target CSWEN    ENABLED          -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED          -- low voltage programming
pragma target MCLR     EXTERNAL         -- external reset
OSCFRQ_HFFRQ = 0b101                    -- Fosc 32 MHz

enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(250_000)

-- Set the pinning for the hardware pins of SPI. This is default but still
-- needed for this chip. Do not use this when using software SPI since the
-- pins are then assigned for hardware SPI.
include pps
pps_control_lock(FALSE)                
-- SPI 1 used by ili9341.
RC3PPS = PPS_SCK1 -- SPI clock 
RC4PPS = PPS_SDA1 -- SPI data in
RC5PPS = PPS_SDO1 -- SPI data out
-- Map the interrupt pin to pin A5. Note: The datasheet is not very clear
-- on this so the hard coded number of pin A5 (0x05) is used here.
INTPPS = 0x05 -- Interrupt pin on A5.
pps_control_lock(TRUE)                 

-- Define the SPI pins and other used pins to control the display and
-- initiaize the pin direction.
alias ili9341_sck is pin_C3   -- PIC SCK to pin 7 of the module (SCK).
alias ili9341_sck_direction is pin_C3_direction -- Pin 14 of 28 pin DIP.
ili9341_sck_direction = output
alias ili9341_sdi is pin_C4   -- PIC SDI to pin 9 of the module (SDO - MISO).
alias ili9341_sdi_direction is pin_C4_direction -- Pin 15 of 28 pin DIP. 
ili9341_sdi_direction = input
alias ili9341_sdo is pin_C5   -- PIC SDO to pin 6 of the module (SDI - MOSI).
alias ili9341_sdo_direction is pin_C5_direction -- Pin 16 of 28 pin DIP. 
ili9341_sdo_direction = output
-- Extra needed for SPI.
alias ili9341_csn is pin_C2   -- PIC CS to pin 3 of the module (CS). 
alias ili9341_csn_direction is pin_C2_direction  -- Pin 13 of 28 pin DIP. 
ili9341_csn = high
ili9341_csn_direction = output
alias ili9341_dc_rs is pin_C1 -- PIC DC/RS to pin 5 of the module (DC/RS). 
alias ili9341_dc_rs_direction is pin_C1_direction -- Pin 12 of 28 pin DIP. 
ili9341_dc_rs_direction = output
-- Optional hardware reset pin. If not defined, software reset will be used. 
alias ili9341_rst is pin_C0   -- PIC RES to pin 4 of the module (RESET).
alias ili9341_rst_direction is pin_C0_direction  -- Pin 11 of 28 pin DIP. 
ili9341_rst_direction = output

-- Now include the used SPI interface.
include spi_master_hw
-- Set SPI mode 11. When the target clock is > 50 MHz use SPI_RATE_FOSC_16.
spi_init(SPI_MODE_11, SPI_RATE_FOSC_4) 
-- Define the interface alias for the ILI9341.
alias ili9341_spi_host is spi_master_hw

-- The default display resolution is 240 x 320 pixels If a display with a
-- different resolution is used you can overrule these as follows (example):
-- const word ILI9341_MAX_X_PIXELS = 128  -- Width  
-- const word ILI9341_MAX_Y_PIXELS = 160  -- Height 

-- Some displays require mirroring. When needed use these settings:
-- const ILI9341_MIRROR_X = TRUE -- Will mirror in the x-direction
-- const ILI9341_MIRROR_Y = TRUE -- Will mirror in the y-direction

-- Now specify SPI pins aliases for the touch screen. It uses its own
-- software SPI since it clocks data on different edges.
alias ads7843_csn is pin_b5 -- Pin 28 (T_CS)
alias ads7843_csn_direction is pin_b5_direction
ads7843_csn = HIGH -- Disable ads7843.
ads7843_csn_direction = output
alias ads7843_sck is pin_b4  -- Pin 27 (T_CLK)
alias ads7843_sck_direction is pin_b4_direction
ads7843_sck_direction = output
alias ads7843_sdi is pin_b3  -- Pin 26 (T_DO)
alias ads7843_sdi_direction is pin_b3_direction
ads7843_sdi_direction = input
alias ads7843_sdo is pin_b2  -- Pin 25 (T_DIN)
alias ads7843_sdo_direction is pin_b2_direction
ads7843_sdo_direction = output

-- Set interrrupt pin, connected to A5, to input.
pin_a5_direction = input

-- Some other used libraries.
include print
include delay

-- Font library.
include glcd_12x16_font

-- Include the graphics library and initialize.
include glcd_ili9341
ili9341_init()

-- Include the touch library and initialize.
include glcd_touch_ads7843
ads7843_init()

-- Variables.
var word touch_x, touch_y, pixel_x, pixel_y 
var bit  new_touch_data

--  -------------------- Procedures and Functions -----------------------------

-- External interrupt procedure.
procedure external_interrupt() is pragma interrupt

   if PIR0_INTF then
      new_touch_data = TRUE
      PIR0_INTF = FALSE
   end if 

end procedure

-- --------------- Variables and start of program ---------------------------- 

-- Initialize the external interrrupt. It is active low.
INTCON_INTEDG = FALSE -- React on falling edge
PIR0_INTF     = FALSE -- Clear interrupt flag
PIE0_INTE     = TRUE  -- Enable external interrupt
INTCON_GIE    = TRUE  -- Enable all interrupts
new_touch_data = FALSE

-- Main loop starts here. First write some text.
glcd_font_use(FONT_12X16)
glcd_clear_screen()
glcd_pen_color = ILI9341_MAGENTA
ili9341_goto(10,10)
print_string(glcd,"TOUCH ON INTERRUPT")
ili9341_goto(10,30)
print_string(glcd,"==================")

glcd_pen_color = ILI9341_YELLOW
ili9341_goto(5,100)
print_string(glcd,"TOUCH ME!")
ili9341_goto(5,120)
print_string(glcd,"---------")

glcd_pen_color = ILI9341_GREEN
ili9341_goto(5,150)
print_string(glcd,"Touched at X : ")
ili9341_goto(5,180)
print_string(glcd,"Touched at Y : ")

forever  loop  

   if new_touch_data then
      -- Get the coordinates and write them to the screen.
      if ads7843_get_touch_coordinate(touch_x, touch_y) then
         -- Valid coordinates, translate to pixel coordinates.
         ads7843_touch_to_display_coordinate(touch_x, touch_y, pixel_x, pixel_y)
         -- Now write them to the screen.
         ili9341_goto(180,150)
         print_word_dec(glcd, pixel_x)
         ili9341_goto(180,180)
         print_word_dec(glcd, pixel_y)
         _usec_delay(500_000)
      end if 
      new_touch_data = FALSE
   else
      -- Erase the coordinates.
      ili9341_goto(180,150)
      print_string(glcd, "    ")
      ili9341_goto(180,180)
      print_string(glcd, "    ")
   end if 

end loop
