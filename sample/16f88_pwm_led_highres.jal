-- Title: Test program for hardware (built-in) PWM, in high resolution mode, using a LED
-- Author: Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: this sample shows how to use PWM in high resolution mode
-- It lights up and down an LED.
-- 
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_pwm_led_highres.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       enabled        -- allow low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

;@jallib section ccp
-- ccp setup: since CCP1 is multiplexed, we need to define
-- alias pointing to the active CCP1 pin
alias pin_ccp1_direction is pin_ccp1_rb3_direction

-- backlight control (can be variable and digital on this pin)
alias lcd_bl is pin_b3
alias lcd_bl_direction is pin_b3_direction

enable_digital_io()

-- Configure PWM
pin_ccp1_direction = output
include pwm_hardware
pwm_max_resolution(1)
pwm1_on()


forever loop
   
   var word i
   i = 0
   
   -- High resolution means up to 10bits values (duty < 1024)
   while i < 1020 loop
      pwm1_set_dutycycle_ratio(i)
      _usec_delay(50000)
      i = i + 10
   end loop
   while i > 0 loop
      pwm1_set_dutycycle_ratio(i)
      _usec_delay(50000)
      i = i - 10
   end loop
   
   _usec_delay(500000)
   pwm1_off()
   _usec_delay(500000)
   pwm1_on()
   
end loop
