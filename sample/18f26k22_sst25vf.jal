-- Title: Test of the Microchip Flash SST25VF016 chip with PIC18f26k22
-- Author: Urmas Joeleht, Copyright (c) 2014, 2015, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4q3
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Sources:
--
-- Description:
-- Sample Microchip (SST) 1...128 Mbit serial flash chip test program for Microchip SST25VFxxx.
--
-- Notes:
--  - File creation date/time: 14 Dec 2014 22:00:00.
--

include 18f26k22                    -- target PICmicro

pragma target osc INTOSC_NOCLKOUT
OSCCON_IRCF = 0b111               -- set internal osc to 16M
OSCTUNE_PLLEN = true              -- multiply internal osc by 4
pragma target clock 64_000_000    -- oscillator frequency
pragma target WDT      disabled   -- no watchdog
pragma target XINST    disabled   -- not supported by JalV2
pragma target DEBUG    disabled   -- no debugging
pragma target LVP      enabled    -- allow Low Voltage Programming
pragma target MCLR   external     -- no external reset
pragma target BROWNOUT  enabled   -- stay in reset until power good
pragma target PWRTE  enabled      -- wait a bit more on startup
pragma target CCP3MUX  pin_C6     -- leave C1 free for USART

enable_digital_io()               -- make all pins digital I/O

alias led is pin_a1
pin_a1_direction = output

include delay
include print
include format

-- -----------------------------------------------------------------------------
--SERIAL HW
-- -----------------------------------------------------------------------------

const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- -----------------------------------------------------------------------------
--SPI HW
-- -----------------------------------------------------------------------------

include spi_master_hw
   pin_sdi_direction = input    -- spi input
   pin_sdo_direction = output   -- spi output
   pin_sck_direction = output   -- spi clock

spi_init(SPI_MODE_00,SPI_RATE_FOSC_16) -- init spi, choose mode and speed

alias spi_master_set_mode is spi_master_hw_set_mode
alias spi_master_set_speed is spi_master_hw_set_speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- -----------------------------------------------------------------------------
-- defying flash chip chip select pin
-- -----------------------------------------------------------------------------
alias sst25vf_cs is pin_A0
alias sst25vf_cs_direction   is pin_a0_direction
sst25vf_cs_direction = output    -- chip select/slave select pin
sst25vf_cs = high  -- disable chip first
include flash_sst25vf
sst25vf_init()

-- variables for tests
var byte*3 iii  -- variable for addresses
var word test = 0 -- variable for read data (word)
var dword test2 = 0  -- variable for read data (dword)
var dword error_counter = 0 -- variable for counting wrong values in tests
var byte manufacturer, memory_type, memory_capacity -- variables for chip info
var word mem_size -- memory size info
var byte*3 chip_max_address = 0xFFFFFF -- variable for chip max address

-- -----------------------------------------------------------------------------
--Strings for print to serial
-- -----------------------------------------------------------------------------

const byte result_str[] = "Errors count: "
const byte manufacturer_str1[]= "Made by Microchip (SST)"
const byte manufacturer_str2[] = "Unknown manufacturer"
const byte mem_type_str1[] = "SS25VF series"
const byte mem_type_str2[] = "Unknown series"
const byte mem_size_str[] = "Memory size "
const byte mem_max_str[] = "Memory max address:  "
const byte erased_str[] = "Chip erased."
const byte testing_str[] = "Testing ..."
const byte reading_str[] = "Reading 4kB"
const byte verifying_str[] = "Verifying ..."
const byte test_str[] = "Test "
const byte filled_str[] = "Fill 4kB with 0xAA "
const byte erased2_str[] = "4kB sector erased"
const byte filled2_str[] = "Fill 4kB with 0x00 "
const byte end_str[] = "All tests finished"
const byte progress_str[] = "0____________________________l00"

-- ----------------------------------------------------------
-- Starting tests. Will be done once, no forever loop.
-- ----------------------------------------------------------

-- ----------------------------------------------------------
-- Test 1. Read Chip ID, Manufacturer, chip size
-- ----------------------------------------------------------
print_string(serial_hw_data, test_str)
serial_hw_data = "1"
print_crlf(serial_hw_data)
led = 0
sst25vf_read_jedec_id(manufacturer, memory_type, memory_capacity)
if manufacturer == 0xBF then
  print_string(serial_hw_data, manufacturer_str1)  -- Microchip
else
   print_string(serial_hw_data, manufacturer_str2) -- other manufacturer
end if
print_crlf(serial_hw_data)
if memory_type == 0x25 then
  print_string(serial_hw_data, mem_type_str1)
  serial_hw_data = " "
  print_byte_hex(serial_hw_data,memory_type)
else
   print_string(serial_hw_data, mem_type_str2)
end if
print_crlf(serial_hw_data)
case memory_capacity of                           -- change manufacturer memory
   0x8A: block                                    -- size code to real size
            mem_size = 512 -- 0.5M
            chip_max_address = 0x00FFFF
         end block
   0x8B: block
            mem_size = 1   -- 1M
            chip_max_address = 0x01FFFF
         end block
   0x8C: block
            mem_size = 2   -- 2M
            chip_max_address = 0x03FFFF
         end block
   0x8D: block
            mem_size = 4   -- 4M
            chip_max_address = 0x07FFFF
         end block
   0x8E: block
            mem_size = 8   -- 8M
            chip_max_address = 0x0FFFFF
         end block
   0x41: block
            mem_size = 16  -- 16M
            chip_max_address = 0x1FFFFF
         end block
   0x4A: block
            mem_size = 32   -- 32M
            chip_max_address = 0x3FFFFF
         end block
   0x4B: block
            mem_size = 64   -- 64M
            chip_max_address = 0x7FFFFF
         end block
   0x4C: block
              mem_size = 128 -- 128M
              chip_max_address = 0xFFFFFF
            end block
   otherwise
         block
            mem_size = 0
            chip_max_address = 0xFFFFFF
         end block
end case
print_string(serial_hw_data, mem_size_str)            -- printing memory size
serial_hw_data = " "
print_word_dec(serial_hw_data, mem_size)
if mem_size == 512 then
   serial_hw_data = "k"
else
   serial_hw_data = "M"
end if
serial_hw_data = "b"
print_crlf(serial_hw_data)
print_string(serial_hw_data, mem_max_str)
serial_hw_data = " "                                 -- printing memory max size
print_dword_hex(serial_hw_data,chip_max_address)
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
led = 1
delay_1ms(100)
-- ----------------------------------------------------------
--Test 2. Erasing chip and verifying all data, printing result
-- ----------------------------------------------------------
print_string(serial_hw_data, test_str) -- print test number
serial_hw_data = "2"
print_crlf(serial_hw_data)
led = 0
sst25vf_chip_erase()                   -- erase whole chip
while sst25vf_chip_ready()== 0 loop    -- wait when chip is ready after erasing.
end loop                               -- Alternative is wait for 50ms

print_string(serial_hw_data, erased_str)
print_crlf(serial_hw_data)
print_string(serial_hw_data, verifying_str)
print_crlf(serial_hw_data)

led = 1
-- ----------------------------------------------------------
--control, if all data is 0xFF after erase
-- ----------------------------------------------------------
led = 0
print_crlf(serial_hw_data)
print_string(serial_hw_data,progress_str)
print_crlf(serial_hw_data)
for ((chip_max_address + 1) / 2) using iii loop   -- veryfy that whole chip is
   test = sst25vf_read_word(iii*2)                -- after erasing filled with 0xFF
   if iii % ((chip_max_address + 1)/64) == 0 then -- as it can take a lot of time with
      serial_hw_data = "#"                        -- big chips, lets inform user about progress
   end if
   if test != 0xFFFF then
      error_counter = error_counter + 1           -- count errors
   end if
end loop
print_crlf(serial_hw_data)
print_string(serial_hw_data,result_str)           -- print verifying result
print_dword_dec(serial_hw_data, error_counter)
test = 0
error_counter = 0
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
led = 1
delay_1ms(2000)                                   -- wait, for reading from screen



-- ----------------------------------------------------------
-- test 4. Read_by word. Reading first 4096 bytes and print to serial
-- ----------------------------------------------------------
print_string(serial_hw_data, test_str)
serial_hw_data = "3"
print_crlf(serial_hw_data)
print_string(serial_hw_data, reading_str)
print_crlf(serial_hw_data)
led = 0
for 2048 using iii loop
   test = sst25vf_read_word(iii*2)
   if (iii%16 == 0) then
      print_crlf(serial_hw_data)
   end if
   print_word_hex(serial_hw_data, test)
   delay_1ms(1)
end loop
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
-- ----------------------------------------------------------
-- Fill 4kB with 0xAA
-- ----------------------------------------------------------
print_string(serial_hw_data, test_str)
serial_hw_data = "4"
print_crlf(serial_hw_data)
led = 0
for 2048 using iii loop
   sst25vf_write_word(iii*2,0xAAAA)
end loop
print_string(serial_hw_data, filled_str)
print_crlf(serial_hw_data)
led = 1
delay_1ms(1000)
-- ----------------------------------------------------------
-- Read and verify 4kB with 0xAA
-- ----------------------------------------------------------
led = 0
print_string(serial_hw_data, reading_str)

print_crlf(serial_hw_data)
for 2048 using iii loop
   test = sst25vf_read_word(iii*2)
   if (iii%16 == 0) then
      print_crlf(serial_hw_data)
   end if
   print_word_hex(serial_hw_data, test)
   if test != 0xAAAA then
      error_counter = error_counter + 1
   end if
end loop
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
print_string(serial_hw_data,result_str)
print_dword_dec(serial_hw_data, error_counter)
test = 0
error_counter = 0
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
delay_1ms(1)
led = 1
-- ----------------------------------------------------------
-- erase 4kB sector
-- ----------------------------------------------------------
print_string(serial_hw_data, test_str)
serial_hw_data = "5"
print_crlf(serial_hw_data)
sst25vf_erase_4kb_sector(0x00000000)
print_string(serial_hw_data, erased2_str)
print_crlf(serial_hw_data)
-- ----------------------------------------------------------
--controlling 4kB sector
-- ----------------------------------------------------------

for 1024 using iii loop
   test2 = sst25vf_read_dword(iii*4)
   if (iii%8 == 0) then
      print_crlf(serial_hw_data)
   end if
   print_dword_hex(serial_hw_data, test2)
   if test2 != 0xFFFFFFFF then
      error_counter = error_counter + 1
   end if
end loop
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
print_string(serial_hw_data,result_str)
print_dword_dec(serial_hw_data, error_counter)
test = 0
error_counter = 0
print_crlf(serial_hw_data)
-- ----------------------------------------------------------
-- Fill 4kB with 0x00000000 using sst25vf_write_dword()
-- ----------------------------------------------------------
led = 0
for 1024 using iii loop
   sst25vf_write_dword(iii*4,0x00000000)
end loop
print_string(serial_hw_data, filled2_str)
print_crlf(serial_hw_data)
led = 1
delay_1ms(1000)
-- ----------------------------------------------------------
-- Read and verify 4kB with 0x00000000
-- ----------------------------------------------------------
led = 0
print_string(serial_hw_data, reading_str)

print_crlf(serial_hw_data)
for 1024 using iii loop
   test2 = sst25vf_read_dword(iii*4)
   if (iii%8 == 0) then
      print_crlf(serial_hw_data)
   end if
   print_dword_hex(serial_hw_data, test2)
   if test2 != 0x00000000 then
      error_counter = error_counter + 1
   end if
end loop
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
print_string(serial_hw_data,result_str)
print_dword_dec(serial_hw_data, error_counter)
test = 0
error_counter = 0
print_crlf(serial_hw_data)
delay_1ms(1)
led = 1
-- ----------------------------------------------------------
-- All tests done
-- ----------------------------------------------------------
print_string(serial_hw_data, end_str)
print_crlf(serial_hw_data)
