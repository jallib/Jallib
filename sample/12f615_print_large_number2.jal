-- ------------------------------------------------------
-- Title:  12f615_print.jal
--
-- Author: Oliver "Kiste" Seitz
--
-- Adapted-by:
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Demo program for print.jal library using Microchip PIC12f615.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
include 12f615                    -- target PICmicro
--
pragma target clock 4_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC INTOSC_NOCLKOUT   -- internal oscillaor
pragma target IOSCFS f4mhz        -- set to 4MHz
pragma target WDT    DISABLED     -- no watchdog
pragma target MCLR   internal     -- no external reset
pragma target BROWNOUT  enabled   -- stay in reset until power good
pragma target PWRTE  enabled      -- wait a bit more on startup

-- These configuration bit settings are only a selection, sufficient for
-- this program, but other programs may need more or different settings.
--
enable_digital_io()                -- make all pins digital I/O
--

alias serial_sw_tx_pin is Pin_GP2   -- serial tx pin is pin #5 (in hardware numbering)
var bit serial_sw_rx_pin      -- rx pin is not used

const serial_sw_baudrate=9600

include serial_software

alias serial_data is serial_sw_data

const var_size=3        -- set the maximum variable size

const PRINT_MAX_VAR_SIZE=var_size   -- use this size also for print.jal

include print
--include print_deprecated    -- print_deprecated will probably not compile while shared memory is still not used for variables.
               -- Use 12f617 chip, it has lots more ram.

_usec_delay(150_000)  -- This looks a bit odd, but it saves ram space (and costs program memory)
_usec_delay(150_000)  -- some seconds initial delay to move eyes from power plug to computer screen ;-)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)
_usec_delay(150_000)


Pin_GP2_direction=output      -- set serial tx pin to output

var byte*var_size runner      -- this variable holds the results of the computations

var byte*var_size carry       -- some auxiliary variable

var byte counter

var bit overflow



overflow=false
runner=1
counter=0

const byte title1[]="Factorials:"
print_string(serial_data,title1) -- print a nice header
print_crlf(serial_data)

repeat

  print_word_dec(serial_data,counter)
  serial_data="!"
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

         -- 0! = 1 ; n! = (n-1)! * n
         -- We do not use multiplication here, as it uses way more ram than additions.
         -- Besides, overflow detection is easy and cheap when only using additions.
         -- Execution time is no real problem, as the loop will not repeat very often,
         -- 70! (=2485 loop runs altogether) will already result in more than 100 decimal digits.

  carry=runner
  for counter loop
    runner=runner+carry
    if runner<=carry then
      overflow=true
    end if
  end loop
  counter=counter+1

until overflow

print_crlf(serial_data)

const byte title2[]="Powers of two:"
print_string(serial_data,title2) -- print a nice header
print_crlf(serial_data)

counter=0
runner=1

repeat
  serial_data="2"
  serial_data="^"
  print_word_dec(serial_data,counter)
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

  counter=counter+1
  runner=runner<<1

until runner==0

const byte title3[]="That's it!"
print_string(serial_data,title3) -- say goodbye
print_crlf(serial_data)

asm sleep            -- switch off :-)

forever loop
end loop
--
