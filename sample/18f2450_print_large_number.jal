-- ------------------------------------------------------
-- Title:  test file for printing large numbers
--
-- Author: Oliver "Kiste" Seitz
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Demo program for print.jal library using Microchip PIC12f615.
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--                                                              
-- This file has been generated by jallib.py from:
--    * board: board_18f2450_af.jal
--    * test : test_print_large_number.jal
--


;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz since pragma target CPUDIV is P1
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 (20 MHz)
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL      -- hs + pll, usb hs
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog scaler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          INTERNAL    -- no master reset
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

enable_digital_io()                -- make all pins digital I/O

-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

serial_hw_init()

alias serial_data is serial_hw_data

const VAR_SIZE=32       -- set the maximum variable size

const PRINT_MAX_VAR_SIZE=VAR_SIZE   -- use this size also for print.jal

include print

include delay

delay_1s(5)          -- some seconds initial delay to move eyes from power plug to computer screen ;-)


var byte*VAR_SIZE runner      -- this variable holds the results of the computations

var byte*VAR_SIZE carry       -- some auxiliary variable

var word counter

var bit overflow


const byte title11[]="The largest printable number=\r\n2^"

print_string(serial_data,title11)

print_word_dec(serial_data,8*VAR_SIZE)

serial_data="-"
serial_data="1"
serial_data="="

runner=0
runner=runner-1

print_maxvar_dec(serial_data,runner)
print_crlf(serial_data)
print_crlf(serial_data)




overflow=false
runner=1
counter=0

const byte title1[]="Factorials:"
print_string(serial_data,title1) -- print a nice header
print_crlf(serial_data)

repeat

  print_word_dec(serial_data,counter)
  serial_data="!"
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

         -- 0! = 1 ; n! = (n-1)! * n
         -- We do not use multiplication here, as it uses way more ram than additions.
         -- Besides, overflow detection is easy and cheap when only using additions.
         -- Execution time is no real problem, as the loop will not repeat very often,
         -- 70! (=2485 loop runs altogether) will already result in more than 100 decimal digits.

  carry=runner
  for counter loop
    runner=runner+carry
    if runner<=carry then
      overflow=true
    end if
  end loop
  counter=counter+1

until overflow

print_crlf(serial_data)

const byte title2[]="Powers of two:"
print_string(serial_data,title2) -- print a nice header
print_crlf(serial_data)

counter=0
runner=1

repeat
  serial_data="2"
  serial_data="^"
  print_word_dec(serial_data,counter)
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

  counter=counter+1
  runner=runner<<1

until runner==0

const byte title3[]="That's it!"
print_string(serial_data,title3) -- say goodbye
print_crlf(serial_data)
print_crlf(serial_data)
delay_1ms(3)            -- wait for the last 2 bytes to be transmitted
asm sleep            -- switch off :-)

forever loop
end loop
--
