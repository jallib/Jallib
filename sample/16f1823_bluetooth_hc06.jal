-- -----------------------------------------------------------------------------
-- Title: Sample program for the Bluetooth HC-06 module
--
-- Author: Rob Jansen, Copyright (c) 2021..2021 all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.5r4
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demonstrates the features of the Bluetooth HC06 slave module.
--              With this program LEDs can be controlled remotely from a host
--              and when a key is pressed it will be sent to the host. The HC-06
--              can be reprogrammed by making the 'program' pin active low. 
--                 
-- Sources:     Bluetooth HC-06 Module Datasheet revision 2.2 (2011/04/06)
--              Guangzhou HC Information Technology Co., Ltd.
--
-- Notes:       The HC-06 module uses a serial interface so at least one of the 
--              JAL serial hardware libraries must be included by the main program.       
--
--              PIC USART connections to module (14 pin DIP):
--              *) TX: pin 6 of the USART1 of the PIC to the RX pin of the Module.
--              *) RX: pin 5 of the USART1 of the PIC to the TX pin of the Module.
--
include 16f1823                 

-- ------------------------------- Pragmas -------------------------------------

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all ports. 
WPUA = 0b0011_1111       
WPUC = 0b0011_1111       
OPTION_REG_WPUEN = FALSE 

enable_digital_io()
-- Give the hardware some time to stabilize.
_usec_delay(100_000)

-- -------------------------------- Pins ---------------------------------------

-- Setup the serial hardware interface for communication with the module.
alias pin_RX_direction is pin_RX_RC5_direction -- Pin 5 of 14 pin DIP.
alias pin_TX_direction is pin_TX_RC4_direction -- Pin 6 of 14 pin DIP.
const serial_hw_baudrate = 9600                -- Default baudrate of module.

-- Programming pin.
alias program_pin is pin_C3                    -- Active LOW. 
pin_C3_direction = input                       -- Pin 7  for 14 pin DIP.  

-- Aliases for keys.
alias key_red is pin_C0                        -- Active LOW. 
pin_C0_direction = input                       -- Pin 10 of 14 pin DIP.
alias key_green is pin_A2                      -- Active LOW. 
pin_A2_direction = input                       -- Pin 11 of 14 pin DIP.

-- Aliases for leds.
alias led_amber is pin_A5                      -- On when connected.  
pin_A5_direction = output                      -- Pin 2 of 14 pin DIP.
alias led_red is pin_C2                     
pin_C2_direction = output                      -- Pin 8 of 14 pin DIP.
alias led_green is pin_C1
pin_C1_direction = output                      -- Pin 9 of 14 pin DIP.

-- ------------------------- Constant declarations -----------------------------

-- It is best to use the interrupt based serial routines to prevent data loss
-- when data is received. Adjust the buffer size.
const SERIAL_XMTBUFSIZE = 15 -- size of transmit buffer
const SERIAL_RCVBUFSIZE = 15 -- size of receive buffer

-- Optional. Wait at most 1 second for a character from the module.
-- const word BLUETOOTH_HC06_READ_TIMEOUT = 10_000 -- 10.000 times 100 us, see library.

-- -------------------------- Includes go here ---------------------------------
include serial_hw_int_cts
include bluetooth_hc06  -- It will use the above included serial interface.

-- Some constants for reprogramming the HC-06. Change to your needs.
const byte DEVICE_PINCODE[] = "1111"                       -- Default is "1234"  
const byte DEVICE_NAME[]    = "My HC-06"
const byte DEVICE_BAUDRATE  = BLUETOOTH_HC06_BAUDRATE_9600 -- This is the default. 

-- ------------------------- Variable declarations -----------------------------
var byte character
var bit  all_ok

-- -----------------------  Main program starts here ---------------------------

-- Initialize the libraries
serial_hw_init()
bluetooth_hc06_init()

-- LEDs off.
led_amber = LOW
led_red = LOW
led_green = LOW

-- Let's see if the module is available for programming.
all_ok = bluetooth_hc06_available()  

-- Check the program pin, if low we will change some default values of the
-- HC-06 module but only if the module is available.
if all_ok & !program_pin then

   -- Change the pincode of the module.
   all_ok = all_ok & bluetooth_hc06_set_device_pin(DEVICE_PINCODE)

   -- Change the name of the module.
   all_ok = all_ok & bluetooth_hc06_set_device_name(DEVICE_NAME)

   -- Change the baudrate. Note that the baudrate changes after a new power up 
   -- of the module. Make sure that the PIC also uses this new baudrate after power up.
   all_ok = all_ok &  bluetooth_hc06_set_baudrate(DEVICE_BAUDRATE)
   
   -- If all went OK, flash the green LED, else flash the red LED.
   if all_ok then
      -- In order to take effect we need to reset the device.
      bluetooth_hc06_reset()
      led_green = HIGH
      _usec_delay(3_000_000)
      led_green = LOW
   else
      led_red = HIGH
      _usec_delay(3_000_000)
      led_red = LOW
   end if

end if

-- We will wait for the device to be connected, that is it will no longer indicate
-- that it is available. Note that if the module is not working it will also
-- not indicate that it is available so this is not 100%. Blink the amber lED
-- while waiting. This step is just for information and can be removed since 
-- there is also a LED blinking on the device that shows if the module is 
-- connected or not.                                         
while bluetooth_hc06_available() loop
   led_amber = !led_amber
   _usec_delay(500_000)
end loop

-- No longer responding may mean that we are connected.
led_amber = HIGH

-- Main loop.
forever loop

  -- Check if data is received from the Bluetooth Module to control the LEDs. 
  if bluetooth_hc06_data_available() then
     character = bluetooth_hc06_data
     if (character == "R") | (character == "r") then
        led_red = !led_red
     elsif (character == "G") | (character == "g") then  
        led_green = !led_green
     end if
   end if
  
   -- Check if we need to send a pressed key.
   if !key_red then
      bluetooth_hc06_data = "R"
     _usec_delay(50_000) -- Key debounce & repeat.
   end if
   if !key_green then
      bluetooth_hc06_data = "G"
     _usec_delay(50_000) -- Key debounce & repeat.
   end if
 
end loop



