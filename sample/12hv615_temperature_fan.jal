-- ---------------------------------------------------------------------
-- Title: Temperature controlled PC case-fan with 12V brushless DC motor
--
-- Author: Rob Hamerling, Copyright (c) 2008..2012, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4n
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Temperature controlled fan for PC enclosure (case-fan).
-- Uses single supply voltage (12 VDC) and high voltage
-- PIC (12HV615) with builtin voltage regulator.
-- The PIC-regulated voltage is also used to power the
-- temperature sensor (TC77 or LM74).
-- The measured temperature value is converted to
-- a PWM duty cycle. With higher temperature the fan
-- should run faster within certain limits:
-- Temperature boundaries (values in degrees Centigrade):
--        t <= 25  - stop
--   25 < t <= 30  - hysteresis region: keep previous speed
--                   (when running: keep minimum speed,
--                    when stopped: remain stopped)
--   30 < t <= 55  - lineairly interpolated between
--                   minimum and maximum dutycycle
--        t >  55  - max dutycycle
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes: - change dd nov 2012: adapted to changed PWM libraries
--
-- ---------------------------------------------------------------------
--
-- Global schematics:
--
--                       --+
--                 +------||-----+ 10uF
--                 |     --+     |
--                 |             |
--                 +-----|<|-----+ 1N4148
--                 |             |
--                 |  \-------/  |
--                 |  |\     /|  |  +-------+
-- +12V DC -------++--|  FAN  |--+--|  18   |-------+
--                |   |/     \|     +-------+       |
--               +++  /-------\                    |<|--+ BS170
--               | |                                |   |
--            330| |                                |   |
--               | |                                |   |
--               +++          +---------------+     |   |
--                |           |     100nF     |     |   |
--       (5V) +---+-+---------+---||--------+ |     |   |
--            |     |         |             +-|-----|---|---o 1
--            |    +++        | +---\/---+  | +-----|---|---o
--            |    | |        +-|1       |--  |  +--|---|---o
--            | 33K| |      +---|        |-+--|--|--|---|---o Wisp648 connector
--            |    +++      | +-|12HV615 |-|--|--+  |   |   o
--            |     +----+--|-|-|        |-|--|-----|---+   |
--            |          |  | | +--------+ |  |     |       |
--            |          +--|-|------------|--|-----|-------+
--            |          |  | |            |  |     |
--      10uF| - |        |  | |            |  |     |
--          +---+       --- | |  +------+  |  |     |
--            |         --- +-|--|1     |--|--+     |
--            |     100nF|    +--|      |--+        |
--            |          |     --| TC77 |-          |
--            |          |  +----|      |-          |
--            |          |  |    +------+           |
--            |          |  |                       |
--            |          |  |                       |
--   GND -----+----------+--+-----------------------+
--
--  A fan with brushless DC motor is sensitive to PWM frequency.
--  Without filters: the higher the frequency the worse it works
--  and produces mechanical noise (hum..scream).
--  At a PWM frequency of about 15 Hz and without filter the
--  fan works fine. With filter the fan works better at higher
--  frequencies. The higher the frequency the smaller the filter
--  can be. This sample uses a PWM frequency of 31 KHz.
--
-- =========================================================================

include 12hv615                                 -- target chip

pragma  target   clock     8_000_000            -- 8 MHz

pragma  target   OSC       INTOSC_NOCLKOUT      -- internal oscillator
pragma  target   WDT       DISABLED             -- no watchdog timer
pragma  target   PWRTE     DISABLED             -- no power-up delay
pragma  target   MCLR      EXTERNAL             -- MCLR pin is active
pragma  target   CP        DISABLED             -- code memory may be read/written
pragma  target   IOSCFS    F8MHZ                -- oscillator speed
pragma  target   BROWNOUT  DISABLED             -- no brownout detection

                                                -- (OSCTUNE left alone)

enable_digital_io()                             -- all pins digital

-- ---------------------------------------------------------------------------

include delay

-- ---------------------------------------------------------------------------
-- setup for temperature_tc77 library

alias   CS       is  pin_A0                     -- chip select
alias   SCK      is  pin_A4                     -- clock (out)
alias   SIO      is  pin_A5                     -- data (in)

pin_A0_direction = output                       -- chip select
pin_A4_direction = output                       -- TC77 clock
pin_A5_direction = input                        -- TC77 data

CS = TRUE                                       -- deselect TC77
include temperature_tc77                        -- TC77 support library

-- --------------------------------------------------------------------
-- setup for pwm library

include pwm_hardware                            -- PWM library

pwm_set_frequency(31000)                        -- high freq. for 8 MHz osc!!


pin_CCP1_direction = output                     -- PWM output pin

-- --------------------------------------------------------------------

const  sbyte     TEMPZEROSPEED  = 25            -- stop below this temp
const  sbyte     TEMPMINSPEED   = 30            -- start above this temp
const  sbyte     TEMPMAXSPEED   = 50            -- temp for max speed
                                                -- Note: (MAX - MIN) must be 20

const   byte     PWMMAX         = 100           -- dutycycle (%) for full speed
const   byte     PWMMIN         = 20            --                   min speed
const   byte     PWMZERO        = 0             --                   zero speed

var    sbyte     temperature                    -- measured temperature
var     byte     pwmspeed       = PWMMAX        -- PWM duty cycle (default)

INTCON           = 0b0000_0000                  -- no interrupts
OPTION_REG_NGPPU = 1                            -- disable weak pull-ups

forever loop                                    -- main loop

  CS = FALSE
  tc77_read_celsius_sbyte(temperature)          -- get current temperature
  CS = TRUE

  if (temperature >= TEMPMAXSPEED) then         -- above max temp
    pwmspeed = PWMMAX                           -- set fan to full speed

  elsif (temperature <= TEMPZEROSPEED) then     -- below stop temperature
    pwmspeed = PWMZERO                          -- stop the fan

  elsif (temperature < TEMPMINSPEED) then       -- between stop and min speed
    -- (nothing)                                -- keep speed (hysteresis!)

  else                                          -- interpolate betw. min and max
    pwmspeed = PWMMIN + ((temperature - TEMPMINSPEED) * 4)
                                                -- (scale to range 20..100)

  end if

  pwm1_set_dutycycle_percent(pwmspeed)          -- set duty cycle (20..100%)

  delay_100ms(5)                                -- pause between cycles

end loop


