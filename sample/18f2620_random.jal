-- ----------------------------------------------------------------------------
-- Title: Test program for random.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Test program
-- 
-- Sources:
-- 
-- Notes: as output, this sample produces characters on a serial link. First 
--        run serial tests to make sure serial comms works okay.
-- 
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2620_js.jal
--    * test : test_random.jal
--

;@jallib section chipdef
-- chip setup
include 18f2620

pragma target  clock 20_000_000
pragma target  OSC        hs
pragma target  LVP enabled                            -- allow LVP
pragma target  WDT CONTROL                            -- watchdog software controlled

WDTCON_SWDTEN = OFF                                   -- disable watchdog
;@jallib section led
-- LED IO definition
alias led             is pin_c5
alias led_direction   is pin_c5_direction
led_direction = output

include delay

-- set all IO as digital
enable_digital_io()


-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

include print

-- RANDOM --
-- The random provides a decent random function.
-- If you don't need proper random and need to save on memory
-- or cpu cycles, you could uncomment the line below. It will
-- save you 4 bytes of ram and about 80 bytes of program memory.
-- But: the random output will be of a much less quality!
;const random_downgrade = 1   -- if this constant exists (even with value 0), 
                              -- the random functions are downgraded

-- include random lib
include random

var word tmp_word
 
forever loop
   delay_100ms( 5 )
   LED = high
   delay_100ms( 5 )
   LED = low

   for 100 loop     
      -- print 100 random words
      tmp_word = random_word()  -- get 16-bit random number
      print_word_dec(serial_hw_data, tmp_word)   
   end loop
      
   print_crlf(serial_hw_data)                      -- empty line
   print_byte_dec(serial_hw_data, random_byte())   -- get 8-bit random number and output it.
   print_crlf(serial_hw_data)          
   
end loop

