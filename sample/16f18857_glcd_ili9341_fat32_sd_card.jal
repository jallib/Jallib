-- -----------------------------------------------------------------------------
-- Title: GLCD ILI9341 demo showing showing pictures from an SD card on the ILI9341
-- Author: Rob Jansen, Copyright (c) 2022..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6 
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demo program showing how to show pictures on the ILI9341 which 
--              are stored on an SD Card with a FAT32 file system. By pressing
--              the file number on the keyboard the image will be copied from the
--              SD card to the ILI9341 display.
--
--              Pictures stored must be in .bmp format using RGB 5-6-5 format.
--              You can find samples of bmp images in the project folder under:
--              jallib/project/ili9341.
--
-- Sources:     This sample program is based on the FAT32 SD Card sample program of
--              Matthew Schinkel.
--
-- Notes:       A way to generate the bitmap from a png or jpg file: 
--              Converter: https://online-converting.com/image/convert2bmp/
--              Choose: 16 (5:6:5 RGB Hi-Color), rows direction Top - Bottom
--
--

include 16f18857
-- When using a crytal of 20 MHz
-- pragma target clock 20_000_000      -- oscillator frequency
-- pragma target OSC      HS           -- crystal or resonator
-- pragma target RSTOSC   EXT1X        -- power-up clock select: OSC
-- pragma target CLKOUTEN DISABLED     -- no clock output
-- pragma target WDT      DISABLED     -- watchdog
-- pragma target BROWNOUT DISABLED     -- no brownout reset
-- pragma target FCMEN    DISABLED     -- no clock monitoring
-- pragma target CSWEN    ENABLED      -- allow writing OSCCON1 NOSC and NDIV
-- pragma target LVP      ENABLED      -- use low voltage programming
-- pragma target MCLR     EXTERNAL     -- external reset 

-- When using internal oscillator at 16 MHz (PIC running at 3.3 Volt).
pragma target clock    16_000_000       -- oscillator frequency
pragma target OSC      OFF              -- internal oscillator
pragma target RSTOSC   HFINT32          -- select 32 MHz
pragma target CLKOUTEN DISABLED         -- no clock output
pragma target WDT      DISABLED         -- watchdog
pragma target BROWNOUT DISABLED         -- no brownout reset
pragma target FCMEN    DISABLED         -- no clock monitoring
pragma target CSWEN    ENABLED          -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED          -- low voltage programming
pragma target MCLR     EXTERNAL         -- external reset
OSCFRQ_HFFRQ = 0b101                    -- Fosc 16 MHz


enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(100_000)

-- -----------------------------------------------------------------
-- Configure Remappable Pins on MSSP2 to match SPI/SD-Card wiring,
-- configure MSSP2 and initialize SD-card library
-- Also map pins for serial hardware.
-- Do not map the pins if ILI9341_SPI_SW is used.
-- -----------------------------------------------------------------
include pps
pps_control_lock(FALSE)
-- SPI 1 used by ili9341 and SD card.
RC3PPS = PPS_SCK1 -- SPI clock 
RC4PPS = PPS_SDA1 -- SPI data in
RC5PPS = PPS_SDO1 -- SPI data out
-- Serial pins.
RC6PPS = PPS_TX   -- TX1 re-assigned to C6  (default)             
RXPPS  = PPS_RC7  -- C7 re-assigned to RX1  (default)            
pps_control_lock(TRUE)  

-- Define the SPI pins and other used pins to control the display and
-- initiaize the pin direction.
alias ili9341_sck is pin_C3   -- PIC SCK to pin 7 of the module (SCK).
alias ili9341_sck_direction is pin_C3_direction -- Pin 14 of 28 pin DIP.
ili9341_sck_direction = output
alias ili9341_sdi is pin_C4   -- PIC SDI to pin 9 of the module (SDO - MISO).
alias ili9341_sdi_direction is pin_C4_direction -- Pin 15 of 28 pin DIP. 
ili9341_sdi_direction = input
alias ili9341_sdo is pin_C5   -- PIC SDO to pin 6 of the module (SDI - MOSI).
alias ili9341_sdo_direction is pin_C5_direction -- Pin 16 of 28 pin DIP. 
ili9341_sdo_direction = output
-- Extra needed for SPI.
alias ili9341_csn is pin_C2   -- PIC CS to pin 3 of the module (CS). 
alias ili9341_csn_direction is pin_C2_direction  -- Pin 13 of 28 pin DIP. 
ili9341_csn = high
ili9341_csn_direction = output
alias ili9341_dc_rs is pin_C1 -- PIC DC/RS to pin 5 of the module (DC/RS). 
alias ili9341_dc_rs_direction is pin_C1_direction -- Pin 12 of 28 pin DIP. 
ili9341_dc_rs_direction = output
-- Optional hardware reset pin. If not defined, software reset will be used. 
alias ili9341_rst is pin_C0   -- PIC RES to pin 4 of the module (RESET).
alias ili9341_rst_direction is pin_C0_direction  -- Pin 11 of 28 pin DIP. 
ili9341_rst_direction = output

-- Setup the sd card pins.
alias sd_chip_select is pin_b1
alias sd_chip_select_direction is pin_b1_direction -- Pin 22 of 28 pin DIP.
sd_chip_select = high
sd_chip_select_direction = output
alias pin_sck is pin_c3 -- PIC SCK to SD_SCK
alias pin_sdo is pin_c4 -- PIC SDO to SD_MOSI
alias pin_sdi is pin_c5 -- PIC SDI to SD_MISO

-- Setup SPI library.
include spi_master_hw
-- init spi, choose mode and speed. SD card uses mode 11.
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) 
-- Interface aliases for sd card.
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange
alias spi_master_set_mode is spi_master_hw_set_mode
alias spi_master_set_speed is spi_master_hw_set_speed
-- Interface alias for the ILI9341.
alias ili9341_spi_host is spi_master_hw

-- -----------------------------------------------------------------
-- Most of the rest of this program comes from the fat32_sd_card 
-- sample program of Matthew Schinkel with some modifications for
-- this PIC and leaving out parts that are not needed. 
-- -----------------------------------------------------------------
-- Setup uart for communication
alias pin_RX_direction is pin_C7_direction -- Pin 18
alias pin_TX_direction is pin_C6_direction -- Pin 17
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- include print
const PRINT_MAX_VAR_SIZE = 6
include print
include format
include delay

-- Include and initialize the GLCD lib. Clear the screen.
include glcd_ili9341
ili9341_init()
ili9341_fill_screen(ILI9341_GREEN)

-- Show that we are starting up. 
print_string(serial_data,"Jallib Sample Started...")
print_crlf(serial_data)

-- Setup the sd card library.
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
const bit SD_DELAY_AFTER_WRITE = TRUE ;Try this if you are having troulbe with your card.
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

if sd_has_error == TRUE then
   print_string(serial_data, "ERROR - SD CARD FAILED\r\n")
else
   if sd_card_type == SD_STANDARD_CAPACITY then
      print_string(serial_data, "Standard capacity ")
   elsif sd_card_type == SD_HIGH_CAPACITY then
      print_string(serial_data, "High capacity ")
   end if
   print_string(serial_data, "SD card successfully loaded!\r\n")
end if

-- Setup fat32. Change these vaues to save memory
const bit FAT32_WRITE_LONG_FILE_NAMES = FALSE -- Support writing of long file names.
const word FAT32_FILES_MAX = 20               -- The max number of files allowed in a directory.
const byte FAT32_FILE_NAME_SIZE = 80          -- Choose max file_name size. If a file_name is longer the this, 
                                              -- beginning chars will be cut. short file_names are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 5        -- Uses 6 bytes memory per fragment allowed (0 not allowed).
                                              -- Windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 5       -- Uses 8 bytes memory per fragment allowed (0 not allowed).

-- Experts may change the following values.
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535

-- Setup a large array for storing sector data, This is where file_name locations are stored.
const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
include large_array_2                    -- include the array library
alias fat32_entry_location is large_array_2
include fat32  

-- CHOOSE FILE ATTRIBUTES TO FILTER OUT.
fat32_filter_is_read_only  = FALSE
fat32_filter_is_hidden     = FALSE
fat32_filter_is_system     = FALSE
fat32_filter_is_volume_id  = FALSE
fat32_filter_is_directory  = FALSE
fat32_filter_is_archive    = FALSE

fat32_init(1) -- initialize fat32, go to 1st primary partition's root dir "\"
if fat32_init_ok == TRUE then
   print_string(serial_data,"FAT32 READY!!!")
else
    print_string(serial_data,"FAT32 FAILED!!!")
end if
print_crlf(serial_data)

-- Procedure for sending 80 "-----------------" via serial port
procedure separator() is
   serial_data = 13
   serial_data = 10
   const byte str3[] = "--------------------------------------------------------------------------------"
   print_string(serial_data, str3)
   print_crlf(serial_data)
end procedure

-- Use a temporary buffer, size must be <= bytes 80 for 
-- PIC14(H) and use a value that fits in 512 bytes.
const IMAGE_BUFFER_SIZE = 32 -- In words so 64 bytes.

-- Variables.
var dword image_size, image_size_counter, data_location, data_counter
var word data 
var byte data_low at data
var byte data_high at data+1
var byte index
var dword step1
var word step2, x_coord, y_coord, width, height, odd_even
var word image_buffer[IMAGE_BUFFER_SIZE]
var byte file_number2 = 0

-- Main program starts here.

-- If you want to test the display rotation feature, add this:
-- ili9341_set_display_rotation(ILI9341_ROTATE_90_DEGREES)
 

forever loop

   separator()
   ------------------------------------------------------------ 
   -- list a directory, send it via serial port
   ------------------------------------------------------------
   fat32_print_directory(serial_data, FAT32_PRINT_ALL) -- see the procedure, sends dir listing via serial port
   separator()

   print_crlf(serial_data)
   print_string(serial_data, "Press the file number on the keyboard to start.\r\n")
   -- Serial_data_available doesn't exist on serial sw.
   if defined(serial_data_available) then
      while !serial_data_available loop
      end loop
      -- Indicate that there is any activity.
      print_string(serial_data, "Opening file ...\r\n")
      glcd_clear_screen()
   end if
   -- Read character. We get ASCII from the keyboard so make it binary.
   file_number2 = serial_data - "0"

   -- Choose a file for reading or dir for opening.
   if fat32_cd(file_number2) then             -- if change directory is successful
      fat32_print_directory(serial_data, FAT32_PRINT_ALL) -- sends dir listing via serial port (with file numbers)
   elsif fat32_file_open(file_number2) then   -- if go into file is successful

      print_string(serial_data, "File is open.\r\n")
      -- Calculate number of sectors in file.
      var dword sectors_available
      if (fat32_file_size) == (fat32_file_size / 512) * 512 then
         sectors_available = (fat32_file_size / 512)
      else
         sectors_available = (fat32_file_size / 512) + 1
      end if
 
      -- Read from any sector number in the file
      data_counter = 0
      for sectors_available using step1 loop
         -- Read one sector from the disk.
         fat32_read_file_sector_number(step1)
         -- Read all data from one sector.
         step2 = 0 
         while (step2 < 512) loop
            -- See if we need to get some BMP specific info.
            if (data_counter == 0x0A) then
               -- Get the location of the data, 4 bytes.
               data_low = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_high = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_location = dword(data)
               data_low = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_high = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_location = data_location | (dword(data) << 16)
               data_counter = data_counter + 4
               print_string(serial_data, "Data is located at: ")
               print_dword_hex(serial_data, data_location)
               print_crlf(serial_data)
            elsif (data_counter == 0x12) then
               -- Get the width. Left to right order.
               data_low = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_high = fat32_sector_buffer[step2]
               step2 = step2 + 1
               width = data
               -- Skip the other two bytes.
               step2 = step2 + 2
               -- Another calculation is used when nr of pixels > 255.
               if (width > 255) then 
                  width = (0xFFFF - width) + 1
               end if 
               -- Get the height.
               data_low = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_high = fat32_sector_buffer[step2]
               step2 = step2 + 1
               height = data
               -- Skip the other two bytes.
               step2 = step2 + 2
               -- Another calculation is used when nr of pixels > 255.
               if (height > 255) then 
                  height = (0xFFFF - height) + 1
               end if 
               image_size = dword(width) * dword(height)
               data_counter = data_counter + 8
               print_string(serial_data, "Image width is: ")
               print_word_dec(serial_data, width)
               serial_data = " "
               print_string(serial_data, "Image height is: ")
               print_word_dec(serial_data, height)
               serial_data = " "
               print_string(serial_data, "Image size is: ")
               print_dword_dec(serial_data, image_size)
               print_crlf(serial_data)
               -- Reset some values for the next phase.
               x_coord = 0
               y_coord = 0
               index = 0
               image_size_counter = 0
               -- We have to do a correction when the width is odd.
               if (width % 2) > 0 then
                  odd_even = 1
               else
                  odd_even = 0
               end if 
            elsif (data_counter >= data_location) &
                  (image_size_counter < image_size) then
               -- Data reception. Send it to the display.
               data_low = fat32_sector_buffer[step2]
               step2 = step2 + 1
               data_high = fat32_sector_buffer[step2]
               step2 = step2 + 1
               -- Fill the image buffer and send it to the display when full.
               image_buffer[index] = data
               image_size_counter = image_size_counter + 1
               index = index + 1
               -- If we are done for the width or buffer full, send it.
               if (index == IMAGE_BUFFER_SIZE) then
                  -- Buffer full, send to display and adjust coordinates.
                  ili9341_draw_image(image_buffer, x_coord, y_coord, 
                                     index, 1)
                  index = 0
                  x_coord = x_coord + IMAGE_BUFFER_SIZE
               elsif ((word(index) + x_coord) == (width + odd_even)) then
                  -- Bufer not full but width reached.
                  ili9341_draw_image(image_buffer, x_coord, y_coord, 
                                     index, 1)
                  index = 0
                  x_coord = 0
                  y_coord = y_coord + 1
              end if 
            else
               -- Next.
               data_counter = data_counter + 1
               step2 = step2 + 1
            end if 
         end loop
      end loop
      fat32_file_close()
      print_string(serial_data, "Done!\r\n")
   end if

end loop
