-- -----------------------------------------------------------------------------
-- Title: Demo of usb_serial library
-- Author: Albert Faber, Copyright (c) 2009..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r4
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: This application demonstratesest USB Serial library, this application 
-- will emulate a RS-232 terminal device. Once the USB device has been detected by the 
-- host operating system, it will create a virtual COM port. When opening this COM
-- on the host computer, using a standard terminal application, it should show a
-- welcome message, after the welcome message all input characters are echoed back
-- to the terminal application
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: There are two options to use the USB driver:
--        1) Without interrupts by frequently calling 'usb_serial_flush()' 
--           frequently in the main loop.
--        2) Using interrupts to make timing less critical. In that case no 
--           calls to 'usb_serial_flush()' are needed. 
--           This can be activated by defining: const USB_INTERRUPT_DRIVEN = TRUE    
--
-- Some instructions for use:
-- -
-- 1. Make sure you logon as administrator, or with administrator privileges,
--    on Windows XP.
-- 2. If needed convert to the correct PIC device (change include file), 
--    adapt fuses fuses and speed
-- 3. Create a basic board with USB PIC device
-- 4. Compile the this file and program the hex file into the PIC.
-- 5. After a (short) while you'll get the "new hardware found" message for
--    "JALLIB Serial". Point Windows manually to the driver in the
--    driver directory xp_drivers The drivers can be found at:
--    http://groups.google.com/group/jallib/ (usb_cdc_drivers_winxp32.zip)
--    Ignore the warning that this driver doesn't have a certificate. 
--    Wait for the installation to complete.
-- 6. Open the Windows Device Manager and check out the "ports" section. A new
--    communications port will be there, with a COM number.
-- 7. Open a terminal program (for example HyperTerminal) and select the COM
--    port you found in the previous step. Pick any baudrate, Windows will
--    accommodate automatically, and use 8-N-1-no for the other settings.
-- 8. Press enter and read the message. Now everything you type will be echoed
--    back.
-- 9. Have fun, adapt to your needs
--
-- ------------------------------------------------------
--
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2550_js.jal
--    * test : test_usb_serial.jal
--    Note: It was manually adapted to include the interrupt option.
--

;@jallib section chipdef
-- chip setup
include 18f2550

-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2, and USB active.
-- But PIC will be running at 48MHz.
pragma target clock 48_000_000      -- oscillator frequency
--
pragma target OSC      HS_PLL                    -- HS osc + PLL
pragma target PLLDIV   P5                        -- 20 MHz
pragma target CPUDIV   P1                        -- Fosc divisor
pragma target USBDIV   P2                        -- USB clock selection
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- do not use extended instructionset
pragma target DEBUG    DISABLED                  -- no debugging
pragma target BROWNOUT DISABLED                  -- no brownout reset
pragma target FCMEN    DISABLED                  -- no clock monitoring
pragma target IESO     DISABLED                  -- no int/ext osc switching
pragma target VREGEN   ENABLED                   -- voltage regulator used
pragma target LVP      ENABLED                   -- low voltage programming
pragma target MCLR     EXTERNAL                  -- external reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator

-- Use this setting to use the USB driver on an interrupt basis. This makes it 
-- possible to use delays in the main loop since timing becomes less critical.
-- If not used then the usb_serial_flush() has to be called frequenty from the
-- main loop.
-- const USB_INTERRUPT_DRIVEN = TRUE
include usb_serial
include print

-- constants
const  byte str_welcome[] = "JALLIB USB Serial Demo app\n"

-- setup the USB serial library
usb_serial_init()

-- variables
var bit has_shown_welcome_msg = true
var byte ch

-- main loop
forever loop

   if !defined(USB_INTERRUPT_DRIVEN) then
      -- When the interrupt mode is not used we need to poll the usb ISR function 
      -- on a regular base, in order to serve the USB requests otherwise
      -- this call can be removed.
      usb_serial_flush()
   end if

    
   -- check if USB device has been configured by the HOST
   if ( usb_cdc_line_status() !=  0x00 )  then
      if !has_shown_welcome_msg then
         has_shown_welcome_msg = true
         print_string( usb_serial_data, str_welcome )
      end if	
   else
      has_shown_welcome_msg = false
   end if

   -- check for input character
   if usb_serial_read( ch ) then
      -- echo input character
      usb_serial_data = ch
   end if
	        
end loop
