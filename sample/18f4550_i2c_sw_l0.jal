-- ----------------------------------------------------------------------------
-- Title: Test program for i2c_software.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
--  
-- Compiler: >=2.4q2
--   
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Level 0 i2c test program
--    interact with an i2c eeprom using the i2c primitives
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--  
-- Sources:
--   
-- Notes: 
--    setup: 
--         an 24lc256 i2c eeprom, connected to the test board i2c pins.
--         a serial connection to a terminal
--  
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f4550_af.jal
--    * test : test_i2c_sw_l0.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           ENABLED     -- allow low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
enable_digital_io()                -- make all pins digital I/O
;@jallib section i2c
-- I2C io definition, using hardware I2C, currently mutual exlusive with display
-- this will be fixed in next board
alias i2c_scl            is pin_b1
alias i2c_scl_direction  is pin_b1_direction
alias i2c_sda            is pin_b0
alias i2c_sda_direction  is pin_b0_direction


-- generic setup (see releated examples for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
include print
include delay

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)

include i2c_software
;include i2c_hardware

i2c_initialize()

-- we're alive
const byte str1[] = "Test.\r\n" 
print_string(serial_hw_data, str1)

var bit r
var byte i
forever loop

   -- read first 3 bytes from an 24lc256 eeprom and output these to the serial port
   -- then, increment the last one (write one byte)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x00) -- memory address low  byte
   
   i2c_restart()
   r = r & i2c_transmit_byte(0xA1) -- i2c address for read (of memory from eeprom)
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(false)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i2c_stop()

   -- write part (relies on var i, we just read!)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x02) -- memory address low  byte
   r = r & i2c_transmit_byte(i+1)  -- data byte
   i2c_stop()
   
   print_crlf(serial_hw_data)
   
   delay_100ms(10)
end loop
