-- Title: Test program for Large Array. 
--
-- Author: Rob Jansen, copyright (c) 2019..2020, all rights reserved.
--
-- Adapted-by: 
---
-- Compiler: >=2.5r4
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This is an example large array for creating an array that can
--              take up more than 80 bytes of data memory. 
--              It creates two large byte arrays and one large word array and
--              one large dword array, fills the arrays and prints the contents 
--              to the serial port.
--
-- Sources: Orignal test program from Matt Schinkel.
--
-- Notes: Uses the latest version of the large array library.
--        See large_array_1.jal..large_array_4.jal on how to use the library
--
-- Important: There is no range check on the index in the array.
--

include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      ENABLED         -- Use low voltage programming
pragma target MCLR     INTERNAL        -- Reset internal
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all ports.
WPUA = 0b0011_1111      
WPUC = 0b0011_1111       
OPTION_REG_WPUEN = FALSE 

enable_digital_io()
alias pin_RX_direction  is pin_C5_direction  -- Pin 5 for 14 pin DIP
alias pin_TX_direction  is pin_C4_direction  -- Pin 6 for 14 pin DIP.

-- setup uart for communication
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
alias serial is serial_hw_data
include print

-- Setup a large byte array.
const LARGE_ARRAY_1_SIZE = 120            -- choose number of array variables
const LARGE_ARRAY_1_VARIABLE_SIZE = 1     -- choose size of variables (byte*1)
include large_array_1                     -- include the array library
-- Setup a large word array.
const LARGE_ARRAY_2_SIZE = 160            -- choose number of array variables
const LARGE_ARRAY_2_VARIABLE_SIZE = 2     -- choose size of variables (byte*2)
include large_array_2                     -- include the array library
-- Setup a large dword array.
const LARGE_ARRAY_3_SIZE = 100            -- choose number of array variables
const LARGE_ARRAY_3_VARIABLE_SIZE = 4     -- choose size of variables (byte*4)
include large_array_3                     -- include the array library
-- Setup another large byte array.
const LARGE_ARRAY_4_SIZE = 100            -- choose number of array variables
const LARGE_ARRAY_4_VARIABLE_SIZE = 1     -- choose size of variables (byte*1)
include large_array_4                     -- include the array library

-- Make aliases.
alias byte_array is large_array_1         -- rename/alias the array to byte_array
alias dword_array is large_array_3        -- rename/alias the array to dword_array
alias word_array is large_array_2         -- rename/alias the array to word_array
alias another_byte_array is large_array_4 -- rename/alias the array to byte_array

var word counter
_usec_delay(100_000)

-- The main loop starts here.
forever loop
   print_string(serial,"Start large array test.\r\n")
   print_string(serial,"Filling 4 arrays... ")
   
   for LARGE_ARRAY_1_SIZE using counter loop
      byte_array[counter] = byte(counter)
   end loop
   for LARGE_ARRAY_2_SIZE using counter loop
      word_array[counter] = counter + 1_000
   end loop
   for LARGE_ARRAY_3_SIZE using counter loop
      dword_array[counter] = dword(counter)  + 100_000
   end loop
   for LARGE_ARRAY_4_SIZE using counter loop
      another_byte_array[counter] = byte(counter)+ 100
   end loop
   print_string(serial, "done.\r\n")
   print_crlf(serial)
 
   -- Read the values from the byte array.
   print_string(serial, "Byte array must contain 0x00-0x77.\r\n")
   _usec_delay(3_000_000)
   for LARGE_ARRAY_1_SIZE using counter loop
      print_byte_hex(serial, byte(byte_array[counter]))
      print_string(serial," ")
      if (counter % 9) == 8 then
        print_crlf(serial)
      end if 
      _usec_delay(10_000)
   end loop
   print_crlf(serial)
   print_crlf(serial)
   
  -- Read the values from the word array.
   print_string(serial, "Word array must contain 0x03e8-0x0487.\r\n")
   _usec_delay(3_000_000)
   for LARGE_ARRAY_2_SIZE using counter loop
      print_word_hex(serial, word_array[counter])
      print_string(serial," ")
      if (counter % 9) == 8 then
        print_crlf(serial)
      end if 
      _usec_delay(10_000)
   end loop
   print_crlf(serial)
   print_crlf(serial)

  -- Read the values from the dword array.
   print_string(serial, "Dword array must contain 0x000186A0-0x00018703.\r\n")
   _usec_delay(3_000_000)
   for LARGE_ARRAY_3_SIZE using counter loop
      print_dword_hex(serial, dword_array[counter])
      print_string(serial," ")
      if (counter % 9) == 8 then
        print_crlf(serial)
      end if 
      _usec_delay(10_000)
   end loop
   print_crlf(serial)
   print_crlf(serial)

   -- Read the values from the second byte array.
   print_string(serial, "Another byte array must contain 0x64-0xC7.\r\n")
   _usec_delay(3_000_000)
   for LARGE_ARRAY_4_SIZE using counter loop
      print_byte_hex(serial, byte(another_byte_array[counter]))
      print_string(serial," ")
      if (counter % 9) == 8 then
        print_crlf(serial)
      end if 
      _usec_delay(10_000)
   end loop
   print_crlf(serial)
   print_crlf(serial)
   print_string(serial, "Done!\r\n\r\n")

   _usec_delay(5_000_000)
   
end loop

