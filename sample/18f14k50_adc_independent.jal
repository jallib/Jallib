-- -----------------------------------------------------------------------------
-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008..2021, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Jansen
-- Compiler: 2.5r5
-- Revision: $Revision$
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: this program shows how to use adc_hardware library. 
-- It regurlarly performs an Analog-to-Digital Conversion, on channel AN4
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
-- 
-- Few words about diagram: this program performs ADC on channels AN4, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
-- 		
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN4-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--
--	- R1=1K, R2=1K: you should get ~127/~512 as ADC value (low/high)
-- - R1=1K, R2=2.2K: you should get ~175/~704 as ADC value (low/high)
--
-- Actual output with the above given resistor values (10% tolerance on resistors):
-- 1k/1k Channel  (low) 4: 132
-- 1k/1k Channel  (high) 4: 530
-- 1k/2k2 Channel  (low) 4: 186
-- 1k/2k2 Channel  (high) 4: 745
--
-- This file was originally a generated version but was changed by hand 
-- (and manually maintained) for use with the updated adc library.
-- 
-- Sources:
--
-- Notes:
--
-- -----------------------------------------------------------------------------
--

include 18f14k50

-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           ENABLED         -- allow low-voltage programming
pragma target XINST         DISABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off

-- set all IO as digital, will turn ADC on later 
enable_digital_io()

include print
include delay
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- Configure ADC
-- Step 1: ADC input pin setup we wil use channel 4
ANSEL_ANS4 = TRUE                               
pin_AN4_direction = input
const byte channel = 4
-- Step 2: Set VDD and VSS as Vref
ADCON1_PVCFG0 = FALSE                            -- Vref+ is VDD
ADCON1_PVCFG1 = FALSE                            
ADCON1_NVCFG0 = FALSE                            -- Vref- is VSS
ADCON1_NVCFG1 = FALSE                            
-- Step 3: Use Fosc/64 as ADC clock for 48 MHz, see datasheet
ADCON2_ADCS = 0b110 
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 2_000
-- Now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var word measure
var byte lowmeasure
const byte prefix[] = "Channel "
const byte highstr[] = " (high) "
const byte lowstr[] = " (low) "
const byte suffix[] = ": "

forever loop

	  -- get ADC result, high resolution
	  measure = adc_read_high_res(channel)
	  -- send it back through serial
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,highstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_word_dec(serial_hw_data,measure) 
	  print_crlf(serial_hw_data)
	  -- and sleep a litte...
	  delay_1ms(100)

	  -- Even if we set high resolution, we can still access results
	  -- in low resolution (the 2 LSb will be removed)
	  lowmeasure = adc_read_low_res(channel)
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,lowstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_byte_dec(serial_hw_data,lowmeasure) 
	  print_crlf(serial_hw_data)
	  -- and sleep a little...
	  delay_1ms(100)

end loop
