-- ------------------------------------------------------
-- Title: Test a chain of 8x8 LED matrices with MAX7219 chips
--
-- Author: Rob Hamerling, Copyright (c) 2014..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Simple program to test the MAX7219_N library.
-- It can use the SPI hardware or the SPI software library,
-- selected by a constant (see max7219_common.jal)
-- Most available procedures and functions are called at least once,
-- with different arguments to show the capabilities of
-- a chain of 3 ready-built PCBs with 8x8 led matrix display.
--
-- Sources:
--
-- Notes: See also samples for a single MAX7219 module
--
-- ------------------------------------------------------
--
-- chip setup
include 12f1840

-- This program uses the Internal oscillator at 8 MHz with PLL enabled
pragma target clock    32_000_000   -- oscillator frequency

pragma target OSC      INTOSC_NOCLKOUT  -- internal oscillator
pragma target WDT      DISABLED     -- watchdog
pragma target PWRTE    ENABLED      -- powerup delay
pragma target MCLR     EXTERNAL     -- reset externally
pragma target BROWNOUT DISABLED     -- no brownout
pragma target IESO     DISABLED     -- no osc switchover
pragma target PLLEN    ENABLED      -- PLL enabled
pragma target LVP      ENABLED      -- allow LVP

-- setup internal oscillator

OSCCON_IRCF = 0b1110                -- 8 MHz
OSCCON_SCS = 0b00                   -- Clock determined by fuses

enable_digital_io()

-- --- setup MAX7219 -------------------------------------

const byte MAX7219_NUM   = 3        -- 3 chained MAX7219 modules
const bit MAX7219_SPI_HW = TRUE     -- use hardware SPI

if (MAX7219_SPI_HW == TRUE) then
   if (defined(APFCON_SDOSEL)) then
      apfcon_sdosel = 0             -- configure SDO on pin RA0
      alias pin_SDO_direction is pin_SDO_RA0_direction
   end if
   pin_SDO_direction = OUTPUT       -- SDO = pin_A0
   pin_SCK_direction = OUTPUT       -- CLK = pin_A1
else
   alias max7219_din is pin_A0
   alias max7219_clk is pin_A1
   pin_A0_direction  =  OUTPUT
   pin_A1_direction  =  OUTPUT
end if

alias max7219_cs  is pin_A2
pin_A2_direction  = OUTPUT

const bit MAX7219_DISPLAY_CACHE = TRUE   -- use cache

include max7219_n                    -- multimodule library
delay_100ms(1)                       -- power up delay before init
max7219_init()                       -- initalize the MAX7219s

-- ------------------------------------------------------

var byte i,j

forever loop

   max7219_display_clear()
   max7219_display_test(5)
   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   for MAX7219_NUM using i loop
      for 8 using j loop
         max7219_display_col(i, j, TRUE)
         delay_100ms(2)
         max7219_display_col(i, j, FALSE)
      end loop
   end loop

   for 8 using i loop
      for MAX7219_NUM using j loop
         max7219_display_row(j, i, TRUE)
      end loop
      delay_100ms(2)
      for MAX7219_NUM using j loop
         max7219_display_row(j, i, FALSE)
      end loop
   end loop

   for 8 using i loop
      max7219_display_bit(0, i, i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop
      max7219_display_bit(1, i, 7 - i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop
      max7219_display_bit(2, i, i, TRUE)
      delay_100ms(1)
   end loop

   max7219_display_blink(3,3)             -- blink

   for 16 using i loop                    -- intensity range
      max7219_display_intensity(i)
      delay_100ms(2)
   end loop

   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   const byte v[] = {24,60,126,255}
   const byte h[] = {24,36,66,129}
   for 4 using i loop                     -- big bang
      for 4 using j loop
         if j < i then
            max7219_display_byte_bin(1, 3 - j, h[i])
            max7219_display_byte_bin(1, 4 + j, h[i])
         elsif j == i then
            max7219_display_byte_bin(1, 3 - j, v[i])
            max7219_display_byte_bin(1, 4 + j, v[i])
         else
            max7219_display_byte_bin(1, 3 - j, 0)
            max7219_display_byte_bin(1, 4 + j, 0)
         end if
      end loop
      delay_100ms(3)
   end loop
   delay_100ms(5)

   const byte s[] = {60,66,165,141,141,165,66,60}
   for 8 using i loop
      max7219_display_byte_bin(1, i, s[i])
   end loop
   for 3 using i loop
      delay_100ms(5)
      max7219_display_bit(1, 5, 5, FALSE)
      delay_100ms(2)
      max7219_display_bit(1, 5, 5, TRUE)
   end loop
   delay_100ms(5)

end loop

