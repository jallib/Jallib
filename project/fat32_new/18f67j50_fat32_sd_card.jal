-- Title: FAT32 library for reading fat32 filesystem
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this example reads files & folders from a fat32 formatted sd card
--              using the fat32 library.
--
-- Sources:
-- http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
-- http://www.pjrc.com/tech/8051/ide/fat32.html
-- http://en.wikipedia.org/wiki/File_Allocation_Table
--

include 18f67j50                    -- target PICmicro
-- include chip
pragma target clock 24_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target WDT  disabled        -- no watchdog
pragma target PLLDIV        P2     -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P2     -- no cpu system clock divide
pragma target OSC  INTOSC_NOCLKOUT_PLL           -- HS crystal or resonator
pragma target IESO  DISABLED
pragma target FCMEN DISABLED
OSCTUNE_PLLEN = 1                  -- set 96mhz pll
OSCCON_SCS = 0b00
_usec_delay(1_000)                 -- wait for OSC PLL to settle

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()

include print

-- setup spi for the sd card
-- spi chip select pin
ALIAS sd_chip_select_direction   is pin_SS_direction
ALIAS sd_chip_select             is pin_SS
sd_chip_select_direction = output    -- chip select/slave select pin
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
sd_chip_select = high  -- disable the sd card
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed

-- setup the sd card
--
-- select weather or not to switch SPI modes before every read/write
-- needed if using more then one component on the SPI bus.
const byte SD_ALWAYS_SET_SPI_MODE = TRUE
--
;const bit SD_EXTRA_SPEED = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

-- setup fat32 --
-- include the required files
;include pic_data_eeprom
include format  -- include format library (required by some fat32 procedures)
-- change these vaues to save memory
const word FAT32_FILES_MAX = 25            -- the max number of files allowed in a directory
const byte FAT32_FILENAME_SIZE = 100        -- choose max filename size. if a filename is longer the this, beginning chars will be cut. short filenames are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 10     -- (0 = you must have a defragmented media), usually directories are fragmented.
--                                          -- uses 6 bytes memory per fragment allowed
--                                          -- windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 10    -- (0 = you must have a defragmented media)
--                                          -- uses 8 bytes memory per fragment allowed
--
-- experts may change the following values
;const byte FAT32_ENTRIES_MAX = 1           -- highest file entry address can be 256
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535
--
-- choose a memory source for the file list
const bit FAT32_USE_INTERNAL_MEMORY = TRUE -- Use internal memory for file location list
IF FAT32_USE_INTERNAL_MEMORY == TRUE THEN
   -- Setup a large array for storing sector data, This is where filename locations are stored
   const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
   const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
   include large_array_2                    -- include the array library
   ALIAS fat32_entry_location is large_array_2
elsif FAT32_USE_INTERNAL_MEMORY == FALSE THEN
   -- put your own code here if you wish to allow massive amounts of files per directory

   -- example usage of 23k256 for external memory

   -- if we are using an sd card, we already initilized the SPI bus, so skip this.
   if defined(sd_init) == false then  -- if we are using an sd card, we already did this step
      include spi_master_hw        -- includes the spi library
      -- define spi inputs/outputs
      pin_sdi_direction = input    -- spi input
      pin_sdo_direction = output   -- spi output
      pin_sck_direction = output   -- spi clock
      --
      spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
   end if

   -- setup 23k256 for external memory
   -- setup chip select pin
   ALIAS sram_23k256_chip_select             is pin_c2
   ALIAS sram_23k256_chip_select_direction   is pin_c2_direction
   -- initial settings
   sram_23k256_chip_select_direction = output    -- chip select/slave select pin
   sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
   -- initalize 23k256 in byte mode
   const byte SRAM_23K256_ALWAYS_SET_SPI_MODE = TRUE
   include sram_23k256 -- setup Microchip 23k256 sram
   sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode

  -- alias the 23k256 device word array
  ;alias entry_location is sram_23k256_byte  -- highest file entry address can be 256
   alias fat32_entry_location is sram_23k256_word   -- highest file entry address can be 65535
END IF
--
include fat32   -- include fat32 library -- include fat32

-- CHOOSE FILE ATTRIBUTES TO FILTER OUT
fat32_filter_is_read_only  = FALSE
fat32_filter_is_hidden     = FALSE
fat32_filter_is_system     = FALSE
fat32_filter_is_volume_id  = FALSE
fat32_filter_is_directory  = FALSE
fat32_filter_is_archive    = FALSE

-- procedure for sending 80 "-----------------" via serial port
procedure seperator() is
   serial_hw_data = 13
   serial_hw_data = 10
   const byte str3[] = "--------------------------------------------------------------------------------"
   print_string(serial_hw_data, str3)
end procedure

-- start of main program
seperator()-- send "----"

fat32_init(1) -- initialize fat32, go to 1st primary partition's root dir "\"

------------------------------------------------------------
-- list a directory, send it via serial port
------------------------------------------------------------
fat32_print_directory(serial_hw_data,TRUE) -- see the procedure, sends dir listing via serial port

seperator() -- send "-----" and go to next example

---------------------------------------------------------------------------------------------------------------
-- example read filename, send it via serial port
------------------------------------------------------------

-- we are still in the root dir of the 1st partition

;fat32_read_file_info(3) -- read 3rd file's name, location, size, attributes into memory

-- now send the filename via the serial port
;fat32_print_filename(serial_hw_data)

------------------------------------------------------------
-- example user interaction,
-- send file/dir number via serial port to go into it
--
-- if volume id selected, list the current dir (root dir)
-- if directory selected go into it and list it
-- if file selected go into file and read it
------------------------------------------------------------

var byte data
var dword step1
var word step2

var byte file_number2 = 0
forever loop
   seperator() -- send "-----" then loop and wait for user input

   while !serial_hw_data_available loop
   end loop

   var byte x
   x = serial_hw_read(file_number2)

   -- choose a file for reading or dir for opening
   if fat32_cd(file_number2) then             -- if change directory is successful
      fat32_print_directory(serial_hw_data, TRUE) -- sends dir listing via serial port
   elsif fat32_file_open(file_number2) then   -- if go into file is successful

;      -- EXAMPLE 1 READ (slowest and user friendly)
;      -- Read any byte number in the file, in any order you wish.
;      for fat32_file_size using step1 loop
;          data = fat32_read_file_byte_address(step1)
;          serial_hw_data = data
;      end loop
;
      -- EXAMPLE 2 READ (slow, not so user friendly)
      -- You must start reading from the beginning of the file, and
      -- read sectors in order.
;      fat32_start_file_read ()
;      for fat32_file_size loop
;          data = fat32_read_file_byte()
;          serial_hw_data = data
;      end loop
;      fat32_stop_file_read()

;      -- EXAMPLE 3 WRITE (fast and user friendly)
;      -- Read from any sector number in the file, in any order you wish.
;      for ((fat32_file_size / 512) + 1) using step1 loop
;
;         -- set the data to be written
;         for 512 using step2 loop
;            fat32_sector_buffer[step2] = "F"
;         end loop
;
;         -- write one sector to the disk
;         fat32_write_file_sector_number(step1)
;      end loop
;      --
;      --

      -- EXAMPLE 3 READ (fast and user friendly)
      -- Read from any sector number in the file, in any order you wish.
      for ((fat32_file_size / 512) + 1) using step1 loop
         -- read one sector from the disk
         fat32_read_file_sector_number(step1)
         -- send the sector via serial port
         for 512 using step2 loop
            serial_hw_data = fat32_sector_buffer[step2]
         end loop
      end loop
;
;
;      -- EXAMPLE 4 WRITE (fastest, not so user friendly)
;      -- Read sectors from a file. You must start reading from
;      -- the beginning of the file, and read sectors in order.
;      fat32_start_file_write ()  -- go in the file, get ready to read
;      for ((fat32_file_size / 512) + 1) using step1 loop
;         -- set the data to be written
;         for 512 using step2 loop
;            fat32_sector_buffer[step2] = "D"
;         end loop
;         -- write one sector to the disk
;         fat32_write_file_sector()
;         -- send the sector via serial port
;      end loop
;      fat32_stop_file_write() -- end of file, set media idle
;      --
;      --
;      -- EXAMPLE 4 READ (fastest, not so user friendly)
;      -- Read sectors from a file. You must start reading from
;      -- the beginning of the file, and read sectors in order.
;      fat32_start_file_read ()  -- go in the file, get ready to read
;      for ((fat32_file_size / 512) + 1) using step1 loop
;         -- read one sector from the disk
;         fat32_read_file_sector()
;         -- send the sector via serial port
;         for 512 using step2 loop
;            serial_hw_data = fat32_sector_buffer[step2]
;         end loop
;      end loop

      fat32_file_close()
   end if
end loop
