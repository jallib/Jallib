-- Title: FAT32-small sample for reading fat32 filesystem
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This example reads files & folders from a fat32 formatted sd card
--              using the fat32-small library. This small version only supports
--              the first partition, and only one file.
--
-- Sources:
-- http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
-- http://www.pjrc.com/tech/8051/ide/fat32.html
-- http://en.wikipedia.org/wiki/File_Allocation_Table
--
-- Notes:
-- 1. First format your device with fat32 before using this library.
-- 2. Do not put other files onto the storage device. This sample will
--    overwrite and erase existing files on the storage device because
--    only one file is supported, and no fragments are supported.
--

include 18f67j50                    -- target PICmicro
-- include chip
pragma target clock 48_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target WDT  disabled        -- no watchdog
pragma target PLLDIV        P2     -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1     -- no cpu system clock divide
pragma target OSC  INTOSC_NOCLKOUT_PLL           -- HS crystal or resonator
pragma target IESO  DISABLED
pragma target FCMEN DISABLED
OSCTUNE_PLLEN = 1                  -- set 96mhz pll
OSCCON_SCS = 0b00
_usec_delay(1_000)                 -- wait for OSC PLL to settle

enable_digital_io() -- disable all analog pins if any

include format  -- include format library (required by some fat32 procedures)
include print

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()

-- setup spi for the sd card
-- spi chip select pin
ALIAS sd_chip_select_direction   is pin_SS_direction
ALIAS sd_chip_select             is pin_SS
sd_chip_select_direction = output    -- chip select/slave select pin
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
sd_chip_select = high  -- disable the sd card
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed

-- setup the sd card
--
-- select weather or not to switch SPI modes before every read/write
-- needed if using more then one component on the SPI bus.
const byte SD_ALWAYS_SET_SPI_MODE = TRUE
--
const bit SD_DELAY_AFTER_WRITE = FALSE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

-- setup fat32 --
const FAT32_SMALL_SMALL_VERSION  = TRUE          -- use the small version of fat32
const FAT32_SMALL_VOL_ID[11]     = "Vol_ID     " -- 11 byte volume id (name of partition)
const FAT32_SMALL_FILE_NAME[8]   = "DATA    "    -- 8 byte file name (name of the 1 file allowed)
const FAT32_SMALL_FILE_EXT[3]    = "DAT"         -- 3 byte file extension (extension of the 1 file allowed)
const FAT32_SMALL_MAX_FILE_SIZE  = 50000        -- max file size
const byte FAT32_SMALL_ATTRIBUTE = 0x20          -- the file attributes
--
include fat32_small   -- include small fat32 library

------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------
_usec_delay(100_000)                  -- wait for power to settle


fat32_small_init() -- initalize data media

-- WRITE TO THE FILE
var dword new_file_size_count -- count how many bytes you have written
-- open the file, at file sector number 0 (the beginning of the file)
fat32_small_file_open(0)
for 1000 using new_file_size_count loop             -- loop 200 times
   fat32_small_file_write("I") -- write each data byte
end loop
fat32_small_file_close() -- close the file

-- update the file size on the storage device
fat32_small_set_file_size(new_file_size_count)

-- READ THE FILE
var byte x
fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
   fat32_small_file_read(x)    -- get one byte of data
   serial_hw_data = x          -- send it to the serial port
end loop
fat32_small_file_close()       -- close the file

