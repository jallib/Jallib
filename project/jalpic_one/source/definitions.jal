-- -----------------------------------------------------------------------------
-- Title: Definitions for the Jaluino One
--
-- Author: Rob Jansen, Copyright (c) 2019..2019, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: Defines all global definitions for the JALPIC One.
--
-- Sources: 
-- 
-- Notes: 
-- 
-- -------------------------------- Pins ---------------------------------------

alias spi_sck_direction is pin_c0_direction  -- Pin 10,
alias spi_sdi_direction is pin_c1_direction  -- Pin 9.
alias spi_sdo_direction is pin_c2_direction  -- Pin 8. 
alias pic2_reset  is pin_c3                  -- Pin 7. Reset and LVP power.
pin_c3_direction =  output

-- ------------------------- Constant declarations -----------------------------
const LED_ON  = TRUE
const LED_OFF = FALSE

-- Buffer size.  We did not save on buffer space.
const byte MAX_ASCII_BUFFER = 50 -- Holds ASCII character.
const byte MAX_BYTE_BUFFER  = 25 -- Converted to bytes only half the size. 

-- Special character declarations.
const byte CARRIAGE_RETURN = 0x0D
const byte LINE_FEED       = 0x0A  
const byte COMMA           = 0x2C
const byte ESCAPE          = 0x1B
const byte CTRL_C          = 0x03
const byte COLON           = 0x3A
const byte SPACE           = 0x20
 
-- Return values for parsing the Intel Hex file.
const byte IHEX_DATA  = 1
const byte IHEX_END   = 2
const byte IHEX_ERROR = 3

-- Response values to be sent back. Will be converted to ASCII.
const byte RESPONSE_OK      = 0x00 
const byte RESPONSE_ERROR   = 0x01 
const byte RESPONSE_TIMEOUT = 0x02
const byte RESPONSE_UNKNOWN = 0x03 
const byte RESPONSE_NONE    = 0xFF 


-- ------------------------- Variable declarations -----------------------------
-- The USB buffer holds the bytes received via the USB connection.
var byte usb_buffer[MAX_ASCII_BUFFER]
var byte bytes_in_usb_buffer

-- The line item buffer holds the data of one line, ended by CR + LF
var byte line_item_buffer[MAX_ASCII_BUFFER]
var byte bytes_in_line_item_buffer

-- The parse bufer holds the address and the data extracted from Intel Hex
-- formatted data that was present in the line item buffer.
var byte parse_buffer[MAX_BYTE_BUFFER]
var byte bytes_in_parse_buffer

-- The program buffer is the actual buffer that is used during programming.
-- It will be copied from the internal program buffers when needed (see
-- programmer). The internal buffer are needed to be able to deal with the slow
-- word programming of the EEPROM data. 
var byte program_buffer[MAX_BYTE_BUFFER]
var byte bytes_in_program_buffer

-- The read buffer holds the data read from the second PIC.
var byte read_buffer[MAX_BYTE_BUFFER]
var byte bytes_in_read_buffer

-- Used for debugging. When on writes debug data to the serial port.
var bit debug_on


