-- -----------------------------------------------------------------------------
-- Title: delay_calibrate.jal 
-- Author: Joep Suijs, Copyright (c) 2009..2009, all rights reserved.
-- Adapted-by: 
-- Compiler:  >=2.4g
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description:     
--    This program calls delays and uses timer1 to measure how long they take.
--    The target clock can be changed to any desired value, without the need 
--    to change the real clock of the target. This works since both the timer
--    (used for measuring) and the cpu (executing the delay) use the same clock.
--    the constant hacked_target_clock must be set at the real clock rate to 
--    calculate the proper baudrate of the serial port.        
-- 
-- -----------------------------------------------------------------------------

include 16f88

;-- 
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       disabled       -- no low-voltage programming
pragma target CCP1MUX   RB3            -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- HS crystal or resonator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   RB3               -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)


;@jallib section serial
const serial_hw_baudrate = 115_200
const hacked_target_clock = 20_000_000

-- setup serial (see echo.jal for more details);@jallib section serial
include serial_hardware_hacked
serial_hw_init()

include print
include delay

t1con = 0x01 ; TMR1ON, prescaler 1 (1 tick = 0.2 us)

const byte m1[] = "Test "
const byte m2[] = " us, measured "
const byte m3[] = " us" 
                                          
procedure report_delay( word in setpoint, word in interval) is      
   
   if (interval > 32768) then
      interval = 0 - interval
   end if

   ; calculate tick time in 1ns steps
   var dword tick = target_clock
   tick = 4000_000_000 / tick     
   case ((t1con & 0x30) / 0x10) of
      1 : block
         tick = tick * 2
      end block
   
      2 : block
         tick = tick * 4
      end block
   
      3 : block
         tick = tick * 8
      end block
   
   end case

   print_string(serial_hw_data, m1) 

   print_dword_dec(serial_hw_data, setpoint)

   print_string(serial_hw_data, m2) 
   print_word_dec(serial_hw_data, (interval * tick) / 1000)
   serial_hw_data = "."
   print_word_dec(serial_hw_data, (interval * tick) % 1000)


   print_string(serial_hw_data, m3) 
   
;   print_byte_dec(serial_hw_data, tick)

   print_crlf(serial_hw_data) 

end procedure
                                          
                                          
                                          
var word pre_timer 
var word post_timer
forever loop

   const byte str0[] = "Target clock: "
   print_string(serial_hw_data, str0) 

   print_dword_dec(serial_hw_data, target_clock)

   const byte str1[] = " ----------------------------\r\nTest us delays\r\n"
   print_string(serial_hw_data, str1) 
   
   t1con = 0x00 ; TMR1 off, prescaler 1 (1 tick = 0.2 us @ 20 MHz, 32k = 6,5 ms )
   
   pre_timer = TMR1    
   T1CON_TMR1ON = true
   -- no delay  
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(0, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1us()
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(1, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_2us()
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(2, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_5us()
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(5, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_9us()
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(9, post_timer - pre_timer)

   const byte str2[] = "Test 10us delays\r\n"
   print_string(serial_hw_data, str2) 

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(1)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(10, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(2)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(20, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(5)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(50, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(10)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(100, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(20)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(200, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(50)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(500, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(100)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(1000, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_10us(200)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(2000, post_timer - pre_timer)

   const byte str3[] = "Test 1ms delays\r\n"
   print_string(serial_hw_data, str3) 

   t1con = 0x30 ; TMR1 off, prescaler 8 (1 tick = 1.6 us @ 20 MHz, 32k = 52 ms )

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1ms(1)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(1_000, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1ms(2)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(2_000, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1ms(5)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(5_000, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1ms(10)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(10_000, post_timer - pre_timer)

   pre_timer = TMR1
   T1CON_TMR1ON = true
   delay_1ms(20)
   T1CON_TMR1ON = false
   post_timer = TMR1
   report_delay(20_000, post_timer - pre_timer)
   
   delay_100ms(10)
   
end loop
