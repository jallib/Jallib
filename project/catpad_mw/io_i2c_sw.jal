-- Title: io_i2c_sw
-- Author: Wouter van Ooijen, Copyright (C) 1998, 1999 Wouter van Ooijen
-- Adapted-by: Joep Suijs, Michael Watterson
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Software implementation of I2C (single) master.
-- --  19th March 2010. Added Mutex and variable runtime bus speed
-- -- Define i2c pins like:
-- alias i2c_scl            is pin_c3
-- alias i2c_scl_direction  is pin_c3_direction
-- alias i2c_sda            is pin_c4
-- alias i2c_sda_direction  is pin_c4_direction
-- --
-- const word _i2c_bus_speed = 100_000 ; * 100kHz
-- TODO:
--
var dword _i2c_bus_speed = 100_000
var  bit _i2c_level = true   ; i2c levels (not SMB)
var byte  _i2c_inUse = 0
include delay

const _I2C_TIMEOUT_MILLISEC_AT_1MHZ = 40       -- max 42 with 100MHz CPU
      -- at 1kHz I2C it will be 40 seconds.
const I2C_TIMEOUT_INIT = _I2C_TIMEOUT_MILLISEC_AT_1MHZ * 20 *(target_clock/32768)
      --  with _I2C_TIMEOUT_MULT = 1
      --  1 at 32.768kHz, 610 @ 20MHz, 1464 @ 48MHz  " 1Mhz bus"
      --
      --  approximately 50us with _I2C_TIMEOUT_MULT = 1 and 1MHz bus
var dword _i2c_init_timeout_loop = 10_0000

-- prototypes                   
procedure  _i2c_wait()
procedure _i2c_bit_in(bit out x)
procedure _i2c_bit_out(bit in x)                  
procedure i2c_start() 
procedure i2c_stop() 

-- ------------------------------------------------------------------------
-- i2c_initialize - initialize the software i2c bus
-- ------------------------------------------------------------------------
-- The output latch values are always low,
-- the lines are switched open-collector fashion by 
-- manipulating the direction registers.
-- ------------------------------------------------------------------------
procedure _i2c_Init () is  --  private
   i2c_scl              = low
   i2c_sda              = low
   i2c_scl_direction    = high
   i2c_sda_direction    = high

   -- Clear the bus, regardless the state it is in.
   --
   -- This code is based on atmel AT24C32C datasheet, page 6
   -- http://www.atmel.com/dyn/resources/prod_documents/doc5298.pdf
   --
   i2c_start()
   for 9 loop
      _i2c_bit_out(1);
   end loop
   i2c_start()
   i2c_stop()
end procedure

function i2c_Seize(dword in i2cBusSpeed, bit in i2cBusMode) return bit is
   if _i2c_inUse > 0 then
       return (false)  -- fail
    else

       _i2c_inUse = 1
       _i2c_level = i2cBusMode
       if i2cBusSpeed >  1_000_0000 then
          _i2c_bus_speed  = 1_000_0000
       else
           _i2c_bus_speed = i2cBusSpeed
       end if
       _i2c_init_timeout_loop = I2C_TIMEOUT_INIT * (1_000_0000/ _i2c_bus_speed)
       _i2c_Init()
    end if
    return (true)
end function

procedure i2c_Release() is
-- don't call this unless either i2c_Seize in a while loop with timer
--       detects a failure
--       or you have successfully seized and used the bus
       _i2c_Init()
       _i2c_inUse = 0
end procedure
-- ------------------------------------------------------------------------
-- i2c_start - output a start condition
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
procedure i2c_start() is 
   _i2c_wait()
   i2c_sda_direction = high       -- data high
   _i2c_wait() 
   i2c_scl_direction = high       -- clock high
   _i2c_wait()
   i2c_sda_direction = low        -- data low
   _i2c_wait()
   i2c_scl_direction = low        -- clock low
   _i2c_wait()
end procedure

-- ------------------------------------------------------------------------
-- i2c_restart - output a (re)start condition
-- ------------------------------------------------------------------------
-- A restart is a start without a previous stop.
-- This procedure is provided as part of the API to maintain compatibility 
-- with the i2c hardware master lib.
-- ------------------------------------------------------------------------
procedure i2c_restart() is 
   i2c_start()
end procedure

-- ------------------------------------------------------------------------
-- i2c_stop - output a stop condition
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
procedure i2c_stop() is
   _i2c_wait()
   i2c_sda_direction   = low        -- data low
   _i2c_wait()
   i2c_scl_direction   = low        -- clock low
   _i2c_wait()
   i2c_scl_direction   = high       -- clock high
   _i2c_wait()
   i2c_sda_direction   = high       -- data high
   _i2c_wait()
end procedure

-- ------------------------------------------------------------------------
-- i2c_transmit_byte - output one byte
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
function i2c_transmit_byte( byte in x ) return bit is
var dword timeout = _i2c_init_timeout_loop
   var bit b at x : 7
   var bit r
   
   for 8 loop
      _i2c_bit_out( b )
      x = x << 1   
   end loop
   
   -- wait for an ack condition   
   ;procedure  _i2c_wait()_ack is
   _i2c_wait()
   i2c_sda_direction    = high       -- data open
   _i2c_wait()
   i2c_scl_direction    = high       -- clock high
   _i2c_wait()   
   timeout = _i2c_init_timeout_loop
   while (i2c_scl == low) & (timeout > 0) loop
       timeout = timeout -1
   end loop                     -- wait for slow slave
   if timeout > 0 then
       -- check for the slave's acknowledge
       r = ! i2c_sda
       _i2c_wait()
       i2c_scl_direction    = low        -- clock low
       _i2c_wait()
   else
       -- bug in slave software or bus is shorted to 0V
       r = false
   end if
   return r -- true = okay, false = no ack received
end function

-- ------------------------------------------------------------------------
-- i2c_receive_byte - read one byte
-- ------------------------------------------------------------------------
-- The ACK flag indicated if the byte read must be acked.
--
-- In general, all bytes read by the master are acked, except the last one.
-- Failing to NACK the last byte read will give unpredictable results.
-- (Often it will provide repeatable sequences, where one out of 2 to 4 of 
-- the reads from a specific device is correct. You are warned!)
-- ------------------------------------------------------------------------
function i2c_receive_byte( bit in ack) return byte is
   var byte ret
   
   var bit b at ret : 0
   for 8 loop 
      ret = ret << 1
      _i2c_bit_in( b )
   end loop
   
   if (ack) then
      _i2c_bit_out( low ) -- ack
   else
      _i2c_bit_out( high ) -- nack
   end if
   
   return ret
   
end function

-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- internal 
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------

-- ------------------------------------------------------------------------
-- _i2c_wait - wait for a change to settle (for internal use only)
-- ------------------------------------------------------------------------
-- The delay is determined by i2c_bus_speed and is 1/4 of the cycle time.
-- Given the delay resolution of 1 us and all actions required by 
-- i2c_software routines, the actual bus speed will be lower then the
-- configured maximum.
-- ------------------------------------------------------------------------
procedure  _i2c_wait() is
   
   if _i2c_bus_speed >= 1000_000 then
      ; i2c_1MHz
      delay_1us()
   elsif _i2c_bus_speed >= 400_000  then
      ; i2c_400kHz
      delay_2us()
   elsif _i2c_bus_speed >= 100_000  then
      ; i2c_100kHz
      delay_5us()
   elsif _i2c_bus_speed >= 32_000  then
       _usec_delay(15)
   elsif _i2c_bus_speed >= 10_000  then
       _usec_delay(50)
   elsif _i2c_bus_speed >= 1_000  then
      _usec_delay(500)
   elsif _i2c_bus_speed >= 600  then
      _usec_delay(833)
   else
      delay_5us()
   end if
   return
end procedure

-- ------------------------------------------------------------------------
-- _i2c_bit_out- output a single bit (for internal use only)
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
procedure _i2c_bit_out(bit in x) is
var dword timeout = _i2c_init_timeout_loop

   i2c_sda_direction   = x          -- high data bit
   _i2c_wait()
   i2c_scl_direction  = high        -- clock high
   _i2c_wait()
   timeout = _i2c_init_timeout_loop
   while (i2c_scl == low) & (timeout > 0) loop
       timeout = timeout -1     -- check for bus or SW failure
   end loop                     -- wait for slow slave
   if timeout > 0 then
       _i2c_wait()
       i2c_scl_direction  = low         -- clock low
       _i2c_wait()
   end if
end procedure

-- ------------------------------------------------------------------------
-- _i2c_bit_in- input a single bit (for internal use only)
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
procedure _i2c_bit_in(bit out x) is
var dword timeout = _i2c_init_timeout_loop
;   _i2c_wait()
   i2c_sda_direction   = high -- data open
   _i2c_wait()
   i2c_scl_direction  = high  -- clock high
   _i2c_wait()
   timeout = _i2c_init_timeout_loop
   while (i2c_scl == low) & (timeout > 0) loop
       timeout = timeout -1     -- check for bus or SW failure
   end loop                     -- wait for slow slave
   if timeout > 0 then
       _i2c_wait()
       x = i2c_sda                -- sample data
       _i2c_wait()
       i2c_scl_direction  = low   -- clock low
       _i2c_wait()
   end if
end procedure
