-- Title: dev_glcd_ks0108 - Library for KS0108 compatible LCD
-- Author: Serkan Ayyldz Copyright (c) 2006..2009, all rights reserved.
-- Adapted-by: Joep Suijs, Michael Watterson (c)2010
-- Compiler: >=2.4
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
-- 
-- Description: Library for KS0108 / KS0107 graphic lcd with 128x64 resolution.
-- 
-- Notes:
--  This panel uses 2 off 64 x64 sharing drivers on one axis
-- if CSI and CS1 both active then both halves can written simultaneously.

-- ******************************

--     Default port usage, all D, most B and one E

--     using port E allows sharing D & B with a Keyboard.
--  *****************************
if (defined(GLCD_RW )== false) then
    alias  GLCD_CS2           is pin_b2
    alias  GLCD_CS2_direction is pin_b2_direction
    alias  GLCD_CS1           is pin_b3
    alias  GLCD_CS1_direction is pin_b3_direction
    alias  GLCD_RW            is pin_b6
    alias  GLCD_RW_direction  is pin_b6_direction
    alias  GLCD_DI            is pin_b7 -- LCD command/data select.
    alias  GLCD_DI_direction  is pin_b7_direction
    alias  GLCD_E             is pin_E2
    alias  GLCD_E_direction   is pin_E2_direction
    alias  GLCD_LED           is pin_E1
    alias  GLCD_LED_direction is pin_E1_direction
    alias GLCD_dataprt        is portd    -- LCD data
    alias GLCD_DATAPRT_DIR    is portd_direction
end if




-- ******************************

--            PUBLIC

--  *****************************
const SCREEN_ROWS = 64
const SCREEN_COLS = 128
const SCREEN_MAX_X = SCREEN_COLS -1
const SCREEN_SUB_X = 63
const SCREEN_MAX_Y = SCREEN_ROWS -1
const SCREEN_BLIT_PIXELS = 8

-- *******************************

--             Private

-- *******************************




const _KS0108_LEFT = 0
const _KS0108_RIGHT = 1
const _KS0108_BOTH = 3
const _KS0108_CMD_ON = 0x3F
const _KS0108_CMD_OFF = 0x3E
const _KS0108_CMD_PAGE = 0xB8
const _KS0108_CMD_COLUMN = 0x40
const _KS0108_CMD_TOP_RAM = 0xC0



-- Purpose: Write a byte of data to the specified chip
-- Inputs: 1) chipSelect - which chip to write the data to
-- 2) data - the byte of data to write
procedure _ks0108_write(byte in side, byte in data) is
    if side ==  _KS0108_RIGHT then -- Choose which side to write to
        GLCD_CS2 = high
    elsif side ==  _KS0108_LEFT then
        GLCD_CS1 = high
    else
        GLCD_CS1 = high
        GLCD_CS2 = high
    end if
    GLCD_RW = low -- Set for writing
    GLCD_DATAPRT = data -- Put the data on the port
    GLCD_DATAPRT_DIR = all_output
    _usec_delay (1)
    GLCD_E = high -- Pulse the enable pin
    _usec_delay (2)
    --delay2_us
    GLCD_E = low
    GLCD_CS1 = low -- Reset the chip select lines
    GLCD_CS2 = low
    --delay_2us()
    _usec_delay (2)
end procedure

-- Purpose: Reads a byte of data from the specified chip
-- Ouputs: A byte of data read from the chip
function _ks0108_read(byte in side) return byte is
var byte data -- Stores the data read from the LCD
    GLCD_DATAPRT_DIR = all_input -- Set port d to input
    if side ==  _KS0108_RIGHT then -- Choose which side to write to
       GLCD_CS2 = high
    elsif side ==  _KS0108_LEFT  then
        GLCD_CS1 = high
    else   -- can only read one side at a time
        GLCD_CS1 = low
        GLCD_CS2 = low
        return (0)     -- exit
    end if
    GLCD_RW = high -- Set for reading
    _usec_delay (1) -- delay_cycles(1)
    GLCD_E = high -- Pulse the enable pin
    _usec_delay (2)
    data = GLCD_DATAPRT -- Get the data from the display's output register
    GLCD_E = low
    GLCD_CS1 = low -- Reset the chip select lines
    GLCD_CS2 = low
    _usec_delay (2)

    return data -- Return the read data
end function

-- Purpose: Turn the display on
procedure _ks0108_on() is
    _ks0108_write(_KS0108_LEFT, _KS0108_CMD_ON)
    _ks0108_write(_KS0108_RIGHT, _KS0108_CMD_ON)
end procedure

-- Purpose: Turn the display off
procedure _ks0108_off() is
    _ks0108_write(_KS0108_LEFT, _KS0108_CMD_OFF)
    _ks0108_write(_KS0108_RIGHT, _KS0108_CMD_OFF)
end procedure

-- Purpose: Set the page number
-- Inputs: A page number (0 - 7)
procedure _ks0108_page(byte in side , byte in page) is
   _ks0108_write(side, _KS0108_CMD_PAGE | page)
end procedure

-- Purpose: Set the column address
-- Inputs: The column address (0 - SCREEN_SUB_X)
procedure _ks0108_column(byte in side, byte in column) is
    _ks0108_write(side, _KS0108_CMD_COLUMN | column)
end procedure

-- Purpose: Specify reads and writes are instructions
procedure _ks0108_inst() is
    GLCD_DI = low
end procedure

-- Purpose: Specify reads and writes are data
procedure _ks0108_data() is
    GLCD_DI = high
end procedure


procedure _ks0108_write_byte(byte in x, byte in y, byte in veri) is
var byte side = _KS0108_LEFT -- Stores which chip to use on the LCD
    if x > 127 then
       x = x -128
    end if
    if (x > SCREEN_SUB_X)then -- Check for first or second display area
        x = x - (SCREEN_SUB_X +1)
        side = _KS0108_RIGHT
    end if
    if y > 191 then
         y = y -192
    elsif y > 127 then
         y = y - 128
    elsif y > SCREEN_MAX_Y then
         y = y -SCREEN_ROWS
    end if
    _ks0108_inst() -- Set for instruction
    _ks0108_column(side,x) -- Set the horizontal address
    _ks0108_page(side,(y / SCREEN_BLIT_PIXELS)) -- Set the page address
    _ks0108_data() -- Set for data
    _ks0108_write(side, ! veri) -- Write the pixel data
end procedure


-- Purpose: Fill the LCD screen with the passed in color
-- Inputs: ON - turn all the pixels on
-- OFF - turn all the pixels off
procedure _ks0108_fill(byte in data) is
var byte i, j
    i = 0 -- Loop through the vertical pages
    for (SCREEN_ROWS / SCREEN_BLIT_PIXELS) loop
        _ks0108_inst() -- Set for instruction
        _ks0108_page(_KS0108_LEFT,i) -- Set page address
        _ks0108_page(_KS0108_RIGHT,i)
        _ks0108_column(_KS0108_LEFT,0) -- Set horizontal address to 0
        _ks0108_column(_KS0108_RIGHT,0)
        _ks0108_data() -- Set for data
        -- Loop through the horizontal sections
        for SCREEN_SUB_X +1 loop
            _ks0108_write(_KS0108_LEFT ,data) -- Write the byte of data
            _ks0108_write(_KS0108_RIGHT,data)
        end loop
        i = i + 1
    end loop
end procedure

-- Purpose: Initialize the LCD.
-- Call before using any other LCD function.
procedure _ks0108_init() is
    -- Initialze some pins
    GLCD_DATAPRT = 0x00
    GLCD_DATAPRT_DIR = all_output
    GLCD_RW_DIRECTION = output
    GLCD_CS1_DIRECTION = output
    GLCD_E_DIRECTION = output
    GLCD_DI_DIRECTION = output
    --GLCD_RST_DIRECTION = output
    GLCD_CS2_DIRECTION = output
    --GLCD_RST = high
    GLCD_E = low
    GLCD_CS1 = low
    GLCD_LED = off
    GLCD_LED_direction = output
    
    _ks0108_inst() -- Set for instruction
    _ks0108_write(_KS0108_LEFT, _KS0108_CMD_TOP_RAM | 0) -- First RAM line at the top of the screen
    _ks0108_write(_KS0108_RIGHT, _KS0108_CMD_TOP_RAM | 0) -- First RAM line at the top of the screen
    _ks0108_page (_KS0108_LEFT ,0) -- Set the page address to 0
    _ks0108_page (_KS0108_RIGHT,0)
    _ks0108_column(_KS0108_LEFT ,0) -- Set the column address to 0
    _ks0108_column(_KS0108_RIGHT,0)
    _ks0108_on() -- Turn the display on
    _ks0108_fill(0) -- Clear the display
end procedure

var byte _ks0108_lastLcdCmd = 0    -- private current state of LCD panel
-- *******************************

--             PUBLIC

-- *******************************
const byte PANEL_VIRGIN = 0
const byte PANEL_BUSY = 1
const byte PANEL_LAMP_OFF = 2
const byte PANEL_LAMP_ON = 4
const byte PANEL_OFF = 8
const byte PANEL_ON = 16
const byte PANEL_CLEAR = 32
const byte PANEL_FILL = 64
const byte PANEL_INIT = 128

procedure LCD_Cmd'Put(byte in cmd) is
   if (cmd & PANEL_INIT) > 0 then
       _ks0108_init()
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_INIT
    end if
   if (cmd & PANEL_ON) > 0   then
      _ks0108_on()
      _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_ON
      _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_OFF)
   elsif (cmd & PANEL_OFF) > 0 then
       _ks0108_off()
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_OFF
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_ON)
   end if
   if (cmd & (PANEL_FILL + PANEL_CLEAR)) == (PANEL_FILL + PANEL_CLEAR)   then
       _ks0108_fill(0b0101_0101)
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | (PANEL_FILL + PANEL_CLEAR)
   elsif (cmd & PANEL_FILL) > 0   then
       _ks0108_fill(255)
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_FILL
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_CLEAR)
   elsif (cmd & PANEL_CLEAR) > 0   then
       _ks0108_fill(0)
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_CLEAR
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_FILL)
   end if
   if (cmd & PANEL_LAMP_ON) > 0   then
       GLCD_LED = on
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_LAMP_ON
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_LAMP_OFF)
   elsif (cmd & PANEL_LAMP_OFF) > 0   then
       GLCD_LED = off
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd | PANEL_LAMP_OFF
       _ks0108_lastLcdCmd = _ks0108_lastLcdCmd & (! PANEL_LAMP_ON)
   end if

--   case cmd of
--   PANEL_OFF: _ks0108_on()
--   PANEL_ON:  _ks0108_on()
--   PANEL_INIT: _ks0108_init()
--   PANEL_FILL: _ks0108_fill(255)
--   PANEL_CLEAR: _ks0108_fill(0)
--   PANEL_LAMP_ON: GLCD_LED = on
--   PANEL_LAMP_OFF: GLCD_LED = off
--   end case
end procedure

function LCD_Cmd'Get()return byte is
     return (_ks0108_lastLcdCmd)
end function


-- Purpose: Turn a pixel on a graphic LCD on or off
-- Inputs: 1) x - the x coordinate of the pixel
-- 2) y - the y coordinate of the pixel
-- 3) color - ON or OFF
procedure PlotPixel(byte in x, byte in y, bit in onoff) is
var byte data , yy
var byte side = _KS0108_LEFT -- Stores which chip to use on the LCD
    if x > 127 then
       x = x -128
    end if
    if x > SCREEN_SUB_X then -- Check for first or second display area
        x = x - (SCREEN_SUB_X +1)
        side = _KS0108_RIGHT
    end if
    if y > 191 then
         y = y -192
    elsif y > 127 then
         y = y - 128
    elsif y > SCREEN_MAX_Y then
         y = y -SCREEN_ROWS
    end if
    _ks0108_inst() -- Set for instruction
    _ks0108_column(side,x) -- Set the horizontal address
    _ks0108_page(side,(y / 8)) -- Set the page address
    _ks0108_data() -- Set for data
    data = _ks0108_read(side) -- Need two reads to get data at new address
    data = _ks0108_read(side) -- DO NOT REMOVE 2nd Read!
    -- add XOR code
    if onoff == 1 then
        -- bit_set(data, y%SCREEN_BLIT_PIXELS) -- Turn the pixel on
        yy = y % SCREEN_BLIT_PIXELS
        data = data | ( 1 << yy )
    else -- or
        -- bit_clear(data, y%SCREEN_BLIT_PIXELS) -- turn the pixel off
        yy = y % SCREEN_BLIT_PIXELS
        data = data & !( 1 << yy )
    end if
    _ks0108_inst() -- Set for instruction
    _ks0108_column(side,x) -- Set the horizontal address
    _ks0108_data() -- Set for data
    _ks0108_write(side, data) -- Write the pixel data
end procedure



-- use for sprites or fonts that are multiple of 8 high
procedure BlitColumn (byte in x, byte in y,  byte in column ) is
    _ks0108_inst() -- Set for instruction
    if (x > 128) then
       x = x -128
    end if
        if y > 191 then
         y = y -192
    elsif y > 127 then
         y = y - 128
    elsif y > SCREEN_MAX_Y then
         y = y -SCREEN_ROWS
    end if
    if (x > SCREEN_SUB_X ) then
        _ks0108_column(_KS0108_RIGHT, x-(SCREEN_SUB_X +1)) -- Set the horizontal address
        _ks0108_page(_KS0108_RIGHT, (y / 8)) -- Set the page address
        _ks0108_data() -- Set for data
        _ks0108_write(_KS0108_RIGHT, column) -- Write the pixel data
        
    else
        _ks0108_column(_KS0108_LEFT,x) -- Set the horizontal address
        _ks0108_page(_KS0108_LEFT, (y / 8)) -- Set the page address
        _ks0108_data() -- Set for data
        _ks0108_write(_KS0108_LEFT, column) -- Write the pixel data

    end if
end procedure

procedure PlotColumn(byte in x, byte in y, byte in column, bit in ink, bit in replace) is
-- if ink is false, invert column data
-- if replace is true, plot 0 and 1 ink, else plot only only ink value ink
var byte data
var byte side = _KS0108_LEFT -- Stores which chip to use on the LCD
    if x > 127 then
       x = x -128
    end if
    if x > SCREEN_SUB_X then -- Check for first or second display area
        x = x - (SCREEN_SUB_X +1)
        side = _KS0108_RIGHT
    end if
    if y > 191 then
         y = y -192
    elsif y > 127 then
         y = y - 128
    elsif y > SCREEN_MAX_Y then
         y = y -SCREEN_ROWS
    end if
    if replace then
       if ink then
          data = column
       else
          data = ! column
        end if
    else
        _ks0108_inst() -- Set for instruction
        _ks0108_column(side,x) -- Set the horizontal address
        _ks0108_page(side,(y / 8)) -- Set the page address
        _ks0108_data() -- Set for data
        data = _ks0108_read(side) -- Need two reads to get data at new address
        data = _ks0108_read(side) -- DO NOT REMOVE 2nd Read!
       if ink then
           data = data | column
       else
           data = data & (! column)
       end if
    end if
    _ks0108_inst() -- Set for instruction
    _ks0108_column(side,x) -- Set the horizontal address
    _ks0108_page(side,(y / 8)) -- Set the page address
    _ks0108_data() -- Set for data
    _ks0108_write(side, data) -- Write the pixel data
end procedure



