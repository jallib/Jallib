-- -----------------------------------------------------------------------------
-- Title: LCD library for HD44780 compatible LCDs, with 4 bits wide datatransfer
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: Eur van Andel, Joep Suijs (refactoring),Richard Zengerink (lcd_init)
-- Compiler:  >=2.4g
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description:
--    Nibble interface for HD44780 compatible alphanumeric LCD screens.
-- .
--    Expects: - 2 pins for handshake: 'lcd_rs' and 'lcd_en'
--         and
--             - 1 port nibble for data: 'lcd_dataport'
--         or
--             - 4 lines for data: 'lcd_d4' .. 'lcd_d7'
--    note:    a 'port nibble' - the lower or higher 4 bits of a port - give
--             faster and more compact code then random selected data lines.
-- .
--    Directions for use of this library in application programs
--    (in this sequence):
--    1. Declare the following constants:
--          const byte LCD_ROWS     = 2              -- 1, 2 or 4 lines
--          const byte LCD_CHARS    = 16             -- 8, 16 or 20 chars per line
--       and variables (aliases):
--          var   bit  lcd_en        is  pin_A4      -- trigger
--          var   bit  lcd_rs        is  pin_A5      -- cmd/data select
--       and variables (aliases):
--          var   byte lcd_dataport  is  portA_low   -- 4 data pins
--       or
--          var   bit  lcd_d4        is  pin_A3      -- databit d4 pin
--          var   bit  lcd_d5        is  pin_A1      -- databit d5 pin
--          var   bit  lcd_d6        is  pin_C0      -- databit d6 pin
--          var   bit  lcd_d7        is  pin_C2      -- databit d7 pin
-- .
--    2. Set the chosen LCD dataport and handshake pins to output:
--          pin_A4_direction    = output
--          pin_A5_direction    = output
--       and
--          portA_low_direction = all_output
--       or
--          pin_A3_direction    = output            -- set data pin as output
--          pin_A1_direction    = output            -- set data pin as output
--          pin_C0_direction    = output            -- set data pin as output
--          pin_C2_direction    = output            -- set data pin as output
-- .
--    3. Include this library.
-- .
--    4. Call lcd_init() to initialize the lcd controller.
-- .
--    Above is an example for a 2x16 LCD.
-- .
--    See hd_44780_common for the LCD API.
--
-- Dependencies: delay.jal
--               lcd_hd44780_common.jal
--
-- -----------------------------------------------------------------------------

include delay

-- ----------------------------------------------------------------------------
-- Sends low nibble in <value> to LCD
-- Can be used for both commands and data
-- (requires no wait cycli inbetween upper and lower nibble)
-- (this routine is only used inside this file)
-- ----------------------------------------------------------------------------
procedure __lcd_write_nibble( byte in value ) is
   ;pragma inline

   if (defined(lcd_dataport) == TRUE) then
      -- write nibble at once
      lcd_dataport = value                      -- replace low nibble
   else
      -- write nibble bit by bit
      var bit bit0 at value : 0
      var bit bit1 at value : 1
      var bit bit2 at value : 2
      var bit bit3 at value : 3

      -- setup databits
      lcd_d4 = bit0
      lcd_d5 = bit1
      lcd_d6 = bit2
      lcd_d7 = bit3
   end if

   -- generate clockpuls
   lcd_en = HIGH                                -- trigger on
   _usec_delay(1)                               -- delay (> 400 ns)
   lcd_en = LOW                                 -- trigger off

end procedure


-- ----------------------------------------------------------------------------
-- Sends byte in <value> to LCD
-- (this procedure is only used inside this library)
-- ----------------------------------------------------------------------------
procedure __lcd_write( byte in value ) is
   __lcd_write_nibble(value >> 4)               -- write high nibble
   __lcd_write_nibble(value)                    -- write low nibble
   delay_10us(4)                                -- > 37 us
end procedure


-- ----------------------------------------------------------------------------
-- Sends data byte in <value> to LCD
-- ----------------------------------------------------------------------------
procedure _lcd_write_data(byte in value) is
   lcd_rs = high                                -- select instruction
   __lcd_write( value )                         -- output byte
end procedure


-- ----------------------------------------------------------------------------
-- Sends command byte in <value> to LCD
-- For slow commands an extra delay should be added
-- ----------------------------------------------------------------------------
procedure _lcd_write_command(byte in value) is
;   pragma inline
   lcd_rs = low                              -- select instruction
   __lcd_write( value )                      -- output byte

end procedure


-- now we defined the interface, add the API
include dev_lcd_hd44780_common

-- ----------------------------------------------------------------------------
-- Initialize LCD controller to 4-bit mode
-- ----------------------------------------------------------------------------
procedure lcd_init() is

   -- first, init the interface
   lcd_rs = LOW                                 -- set to control char mode
   delay_1ms(25)                                -- power-up delay (> 15 ms)
   __lcd_write_nibble(0b0000_0011)              -- function set
   delay_1ms(5)                                 -- > 4.1 milliseconds
   __lcd_write_nibble(0b0000_0011)              -- function set
   delay_10us(10)                               -- > 100 us
   __lcd_write_nibble(0b0000_0011)              -- function set
   delay_10us(4)                                -- > 37 us
   __lcd_write_nibble(0b0000_0010)              -- to 4-bit mode
   delay_10us(4)                                -- > 37 us
   _lcd_write_command(0b_0010_1000)             -- 2 lines, 5x7 pattern
   _lcd_write_command(0b_0001_1100)             -- cursor move right
   _lcd_write_command(0b_0000_1100)             -- display on, cursor,blink off
   _lcd_write_command(0b_0000_0110)             -- cursor->right, no shift
   lcd_clear_screen()                           -- clear screen
                                                -- (incl switch to data char mode)
end procedure



