-- Title: terminal.  Various text display libraries for Graphic panel
-- Author:  Michael Watterson (c) 2010
-- Sources:
-- adapted from jallib libraries by
-- Joep Suijs, Copyright (c) 2007..2008, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)

-- 
         
const byte ASCII_NULL = 00
const byte ASCII_SOH  = 01
const byte ASCII_STX  = 02
const byte ASCII_ETX  = 03
const byte ASCII_EOT  = 04
const byte ASCII_ENQ  = 05
const byte ASCII_ACK  = 06
const byte ASCII_BEL  = 07
const byte ASCII_BS   = 08
const byte ASCII_HT   = 09
const byte ASCII_LF   = 10
const byte ASCII_VT   = 11
const byte ASCII_FF   = 12
const byte ASCII_CR   = 13
const byte ASCII_SO   = 14
const byte ASCII_SI   = 15
const byte ASCII_DLE  = 16
const byte ASCII_DC1  = 17
const byte ASCII_DC2  = 18
const byte ASCII_DC3  = 19
const byte ASCII_DC4  = 20
const byte ASCII_NAK  = 21
const byte ASCII_SYN  = 22
const byte ASCII_ETB  = 23
const byte ASCII_CAN  = 24
const byte ASCII_EM   = 25
const byte ASCII_SUB  = 26
const byte ASCII_ESC  = 27
const byte ASCII_FS   = 28
const byte ASCII_GS   = 29
const byte ASCII_RS   = 30
const byte ASCII_US   = 31
const byte ASCII_SP   = 32

const byte ASCII_DEL  = 127


-- ----------------------------------------------------------------------------
-- toupper - convert byte to upper case
-- ----------------------------------------------------------------------------
procedure toupper(byte in out char) is

   if (char >= "a") & (char <= "z") then
      char = char - "a" + "A"
   end if

end procedure


-- ----------------------------------------------------------------------------
-- tolower - convert byte to lower case
-- ----------------------------------------------------------------------------
procedure tolower(byte in out char) is

   if (char >= "A") & (char <= "Z") then
      char = char - "A" + "a"
   end if

end procedure


-- ----------------------------------------------------------------------------
-- ******************
-- DECIMAL      ATARI    IBM <----> ATARI     ASCII
--    -HEX  NAME KEY    GRAPHICS CHARACTER    FUNCTION
-- =======  ==== ===  ======================  ========
--   0  00  NUL  ^,   none        heart       Null
--   1  01  SOH  ^A   smiley      |-          Start of header
--   2  02  STX  ^B   [smiley]    right |     Start of text
--   3  03  ETX  ^C   heart       (9:00)      End of last text
--   4  04  EOT  ^D   diamond     -|          End of transmission
--   5  05  ENQ  ^E   club        (9:30)      Enquiry
--   6  06  ACK  ^F   spade       /           Acknowledge (handshake)
--   7  07  BEL  ^G   rain dot    \           Bell
--   8  08  BS   ^H   doorbell    L triangle  Backspace
--   9  09  HT   ^I   o           low-R-sq.   Horizontal tab
--  10  0A  LF   ^J   [doorbell]  R triangle  Line feed
--  11  0B  VT   ^K   Mars        hi-R-sq.    Vertical tab
--  12  0C  FF   ^L   Venus       hi-L-sq.    Form feed
--  13  0D  CR   ^M   note        high bar    Carriage return
--  14  0E  SO   ^N   2 notes     low bar     Shift out
--  15  0F  SI   ^O   sun         low-L-sq.   Shift in
--  16  10  DLE  ^P   R pennant   club        Data link escape (break)
--  17  11  DC1  ^Q   L pennant   (3:30)      Device #1 (P:)
--  18  12  DC2  ^R   V arrows    --          Device #2
--  19  13  DC3  ^S   !!          cross       Device #3 (deselects P:)
--  20  14  DC4  ^T   paragraph   cloudy      Device #4 (stop)
--  21  15  NAK  ^U   section     low block   Negative acknowl. (error)
--  22  16  SYN  ^V   short -     left |      Synchronous idle
--  23  17  ETB  ^W   base-V-arrs.low T       End of block
--  24  18  CAN  ^X   up arrow    hi perp.    Cancel memory (in buffer)
--  25  19  EM   ^Y   DN arrow    left half   End medium (tape drive)
--  26  1A  SUB  ^Z   R arrow     (3:00)      Substitute
--  27  1B  ESC  EE   L arrow     escape      Escape
--  28  1C  FS   E^-  (3:00)      up arrow    File separator
--  29  1D  GS   E^=  ice needles DN arrow    Group separator
--  30  1E  RS   E^+  up triangle L arrow     Record separator
--  31  1F  US   E^*  DN triangle R arrow     Unit separator
--  32  20  SPC  bar  space       space       Space
--
-- Read more: http://www.faqs.org/faqs/atari-8-bit/faq/section-61.html#ixzz0dtsL4raA

-- short hand for passing to Terminal
Const HE  = 1   -- home Goto 1,1
--Const BL = 7    -- Bell
Const BS = 8   -- Destructive backspace
Const HT = 9    -- Hor Tab  Move next 4th column
Const LF = 10  -- Next line same column, same as DN, down
-- Const VT = 11  -- Vert Tab Move next even row
Const CL = 12 -- Clear to End of Line
Const CR = 13  -- Start of  line
Const BD = 14  -- Bold = SO
Const NL = 15 -- Normal = SI cancels Wide/double/bold
Const CB = 17 --  ETB clear screen black, and reset to home
Const CW = 18 --  CAN clear screen white, and reset to home
Const WD = 23 -- ctrl W wide / double size
Const IN = 26 -- subs invert ink
Const UP = 28
Const DN = 29 -- down
Const LT = 30 -- left
Const RT = 31 -- right
Const DL = 127 -- DEL  destructive forward


-- ----------------------------------------------------------
var volatile bit CharStyleBold = false
var volatile bit _charStyleDouble = false
var volatile bit CharInk = true
var volatile byte _charLineSpacing = 8
var volatile byte _charSpacing = 6
-- ----------------------------------------------------------



procedure CharStyleDouble'put (bit in isWide) is
    if _charStyleDouble != isWide then
        if isWide then
            _charSpacing = _charSpacing *2
            _charLineSpacing = _charLineSpacing *2
        else
            _charSpacing = _charSpacing /2
            _charLineSpacing = _charLineSpacing /2
        end if
        _charStyleDouble = isWide
    end if
end procedure

function CharStyleDouble'get ()return bit is
    return _charStyleDouble
end function




var byte screenCharX = 0;
var byte screenCharY = 0;


-- ----------------------------------------------------------
-- Pseudo variable 'lcd' as alternative for lcd_writechar(<byte>)
-- ----------------------------------------------------------


-- Terminal stuff
-- ------------------------------------------------------------
-- Clear screen
-- (and set the cursor to the upper left corner: column 0, row 0)
-- ------------------------------------------------------------
procedure  ScreenClear() is
if (defined(GLCD_RW )== true) then
   if CharInk then
      LCD_Cmd = PANEL_CLEAR           -- Clear the display
   else
       LCD_Cmd = PANEL_FILL
   end if
   screenCharX = 0;
   screenCharY = 0;
   CharStyleBold = false
   _charStyleDouble = false
   CharInk = true
   _charLineSpacing = 8
   _charSpacing = 6
else
   pragma inline
   lcd_clear_screen()
end if
end procedure

-- ------------------------------------------------------------
-- Set cursor position
-- Specify colum and row in base-0 notation (first line is 0).
-- ------------------------------------------------------------
procedure  ScreenCharXY(byte in col, byte in row)  is
if (defined(GLCD_RW )== true) then
   screenCharX = col * _charSpacing -- up to 21 cols
   if screenCharX > 127 then
      screenCharX = 0
      screenCharY = screenCharY + _charLineSpacing
   end if
   screenCharY = row * _charLineSpacing -- up to 8 rows
   if screenCharY > 63 Then
      screenCharY =  0
   end if
else
   pragma inline
   lcd_setcursor(col,row)
end if
end procedure

procedure ScreenHome()  is
if (defined(GLCD_RW )== true) then
   screenCharY = 0
   screenCharX = 0
else
    pragma inline
    lcd_home()
end if
end procedure

if (defined(GLCD_RW )== true) then

    procedure DrawButton (byte in px , byte in py , byte in wx , byte in wy, byte in str[], bit in ink ) is
    var bit saveInk
    var byte cX, cY, chI
        saveInk = CharInk
        CharInk = ink
        cY = py+2
        cX = px+2
        chI = 0
        while (((cX +_charSpacing ) < (px + wx)) & (chI < count(str))) loop
            PlotChar (cX,cY,str[chI],CharInk, _charStyleDouble, CharStyleBold)
            chI = chI +1
            if (_charStyleDouble) then
               cX = cX +(_charSpacing *2)
            else
               cX = cX + _charSpacing
            end if
        end loop
        DrawShadowBox(px , py , wx , wy, ink )
        CharInk = saveInk
    end procedure


    procedure ScreenCharClearEOL() is
    var byte col, fill
         if CharInk then fill = 0 else fill = 255 end if
         col = screenCharX
         while screenCharX < 128 loop
             BlitColumn (screenCharX, screenCharY,fill)
             screenCharX = screenCharX +1
         end loop
         screenCharX = col
         if _charStyleDouble then
             col = screenCharX
             screenCharY = screenCharY+ 8
             while screenCharX < 128 loop
                 BlitColumn (screenCharX, screenCharY,fill)
                 screenCharX = screenCharX +1
             end loop
             screenCharY = screenCharY - 8
             screenCharX = col
         end if
    end procedure
end if

procedure ScreenChar'put(byte in char) is
    if (defined(GLCD_RW )== true) then
        if char < 127 then
            if (char < 32) | (_charSpacing < 5) then
                PlotDigit(screenCharX, screenCharY, char, CharInk)
            else
                PlotChar(screenCharX, screenCharY, char, CharInk, _charStyleDouble, CharStyleBold)
            end if
            screenCharX = screenCharX + _charSpacing
            if screenCharX > 127 then
               screenCharX = 0
               screenCharY = screenCharY + _charLineSpacing
               if  screenCharY > 63 then
                   screenCharY = 0
               end if
            end if
        end if
    else
       _lcd_write_data(char)
    end if
end procedure


-- ----------------------------------------------------------
-- Send byte to the LCD and automatically set the cursor one
-- position right.
-- There is now check on line overflow.
-- ----------------------------------------------------------
procedure  WriteScreenChar(byte in c) is
       ScreenChar = c
end procedure

var byte _terminal_CharX = 0;
var byte _terminal_CharY = 0;

procedure  TerminalXY(byte in col, byte in row)  is
 if (defined(GLCD_RW )== true) then
   _terminal_CharX = col * _charSpacing -- up to 21 cols
   if _terminal_CharX > 127 then
      _terminal_CharX = 0
      _terminal_CharY = _terminal_CharY + _charLineSpacing
   end if
   _terminal_CharY = row * _charLineSpacing -- up to 8 rows
   if _terminal_CharY > 63 Then
      _terminal_CharY =  0
   end if
else
   pragma inline
   lcd_setcursor(col,row)
end if

end procedure

procedure Terminal'Put (byte in char) is
var byte col
 if (defined(GLCD_RW )== true) then
    if (char > 31)& !(char == 127) then

            PlotChar(_terminal_CharX, _terminal_CharY, char, CharInk, _charStyleDouble, CharStyleBold)
        _terminal_CharX = _terminal_CharX + _charSpacing
        if _terminal_CharX > 127 then
           _terminal_CharX = _terminal_CharX - 128
           _terminal_CharY = _terminal_CharY + _charLineSpacing
           if  _terminal_CharY > 63 then
               _terminal_CharY = _terminal_CharY -64
           end if
        end if
    else
        char = 0
        case char of
        HE : ScreenHome()
        BS : block
              if _terminal_CharX >= _charSpacing then
                 _terminal_CharX = _terminal_CharX - _charSpacing
                 PlotChar(_terminal_CharX, _terminal_CharY, " ", CharInk, _charStyleDouble, CharStyleBold)
                end if
            end block
        CR : _terminal_CharX = 0
        LF : block
               _terminal_CharY = _terminal_CharY + _charLineSpacing
               if  _terminal_CharY > 63 then
                   _terminal_CharY =  0
               end if
             end block
        DN : block
               if  _terminal_CharY + _charLineSpacing < 64 then
                  _terminal_CharY = _terminal_CharY + _charLineSpacing
               end if
           end block
        UP : block
               if  _terminal_CharY >  _charLineSpacing then
                   _terminal_CharY = _terminal_CharY - _charLineSpacing
               end if
           end block
        LT:  block
              if _terminal_CharX >= _charSpacing then
                  _terminal_CharX = _terminal_CharX - _charSpacing
               end if
            end block
        RT:  block
              if (_terminal_CharX + _charSpacing < 128) then
                  _terminal_CharX = _terminal_CharX+ _charSpacing
               end if
            end block

        HT : block
              _terminal_CharX = _terminal_CharX + (4 * _charSpacing)
              if _terminal_CharX > 127 then
                  _terminal_CharX = _terminal_CharX - 128
                  _terminal_CharY = _terminal_CharY + _charLineSpacing
               end if
                -- up to 8 rows
               if _terminal_CharY > 63 Then
                  _terminal_CharY = _terminal_CharY - 64
               end if
             end block
         CL: block
             col = _terminal_CharX
             while col < 127 loop
                 PlotChar(col, _terminal_CharY, " ", CharInk, _charStyleDouble, CharStyleBold)
                 col = col +1
             end loop
             end   block
          NL: block
              CharStyleDouble = off
              CharStyleBold = off
              CharInk = on
              end block
          WD: CharStyleDouble = on
          BD: CharStyleBold = on
          IN: CharInk = off
          DL: block
              if (_terminal_CharX + _charSpacing) < 128  then
                 PlotChar(_terminal_CharX + _charSpacing - _charSpacing, _terminal_CharY, " ", CharInk, _charStyleDouble, CharStyleBold)
              end if
              end block
        end case
    end if
    else
        _lcd_write_data(char)
    end if
end procedure


; prototypes
procedure _print_universal_dec(volatile byte out device, dword in data, sdword in digit_divisor, byte in digit_number)
procedure _print_suniversal_dec(volatile byte out device, sdword in data, sdword in digit_divisor, byte in digit_number)
procedure print_byte_binary(volatile byte out device, byte in data)

const byte nibble2hex[] = "0123456789ABCDEF" -- conversion string

var bit print_prefix = false

procedure print_crlf(volatile byte out device) is
device = ASCII_CR -- cariage return
device = ASCII_LF -- line feed
end procedure

procedure print_string(volatile byte out device, byte in str[]) is
var word len = count(str)
var byte i

for len using i loop
device = str[i]
end loop

end procedure

procedure print_bit_truefalse(volatile byte out device, bit in data) is

const byte str1[] = "true"
const byte str0[] = "false"

if (data) then
print_string(device, str1)
else
print_string(device, str0)
end if

end procedure

procedure print_bit_highlow(volatile byte out device, bit in data) is

const byte str1[] = "high"
const byte str0[] = "low"

if (data) then
print_string(device, str1)
else
print_string(device, str0)
end if

end procedure

procedure print_bit_10(volatile byte out device, bit in data) is

if (data) then
device = "1"
else
device = "0"
end if

end procedure

procedure print_dword_binary(volatile byte out device, dword in data) is

if (print_prefix) then
device = "0"
device = "b"
end if

print_byte_binary(device, byte(data>>24))
print_byte_binary(device, byte(data>>16))
print_byte_binary(device, byte(data>>8))
print_byte_binary(device, byte(data))

end procedure

procedure print_word_binary(volatile byte out device, word in data) is

if (print_prefix) then
device = "0"
device = "b"
end if

print_byte_binary(device, byte(data>>8))
print_byte_binary(device, byte(data))

end procedure


procedure print_byte_binary(volatile byte out device, byte in data) is

if (print_prefix) then
device = "0"
device = "b"
end if

for 8 loop
if ((data & 0x80) != 0) then
device = "1"
else
device = "0"
end if
data = data * 2
end loop

end procedure


procedure print_nibble_binary(volatile byte out device, byte in data) is

for 4 loop
if ((data & 0x08) != 0) then
device = "1"
else
device = "0"
end if
data = data << 1
end loop

end procedure



procedure print_dword_hex(volatile byte out device, dword in data) is

if (print_prefix) then
device = "0"
device = "x"
end if

device = nibble2hex[0x0F & (data>>28)]
device = nibble2hex[0x0F & (data>>24)]
device = nibble2hex[0x0F & (data>>20)]
device = nibble2hex[0x0F & (data>>16)]
device = nibble2hex[0x0F & (data>>12)]
device = nibble2hex[0x0F & (data>>8)]
device = nibble2hex[0x0F & (data>>4)]
device = nibble2hex[0x0F & (data)]

end procedure

procedure print_sdword_hex(volatile byte out device, sdword in data) is

if (print_prefix) then
device = "0"
device = "x"
end if

device = nibble2hex[0x0F & (data>>28)]
device = nibble2hex[0x0F & (data>>24)]
device = nibble2hex[0x0F & (data>>20)]
device = nibble2hex[0x0F & (data>>16)]
device = nibble2hex[0x0F & (data>>12)]
device = nibble2hex[0x0F & (data>>8)]
device = nibble2hex[0x0F & (data>>4)]
device = nibble2hex[0x0F & (data)]

end procedure


procedure print_word_hex(volatile byte out device, word in data) is

if (print_prefix) then
device = "0"
device = "x"
end if

device = nibble2hex[0x0F & (data>>12)]
device = nibble2hex[0x0F & (data>>8)]
device = nibble2hex[0x0F & (data>>4)]
device = nibble2hex[0x0F & (data)]

end procedure


procedure print_byte_hex(volatile byte out device, byte in data) is

if (print_prefix) then
device = "0"
device = "x"
end if

device = nibble2hex[0x0F & (data>>4)]
device = nibble2hex[0x0F & (data)]

end procedure

procedure print_sdword_dec(volatile byte out device, sdword in data) is

_print_suniversal_dec(device, data, 1000000000, 10)

end procedure

procedure print_sword_dec(volatile byte out device, sword in data) is

_print_suniversal_dec(device, data, 10000, 5)

end procedure

-- 8 bit fixed point integer math
procedure print_sword_fp_dec(volatile byte out device, sword in data) is
   _print_suniversal_dec(device, (data >> 8), 100, 3) -- whole part
   device = "."
   _print_universal_dec(device, byte(data & 0xFF), 100, 3) -- decimal part
end procedure

procedure print_sbyte_dec(volatile byte out device, sbyte in data) is

   _print_suniversal_dec(device, data, 100, 3)

end procedure

procedure print_dword_dec(volatile byte out device, dword in data) is

   _print_universal_dec(device, data, 1000000000, 10)

end procedure

procedure print_word_dec(volatile byte out device, word in data) is

   _print_universal_dec(device, data, 10000, 5)

end procedure

procedure print_byte_dec(volatile byte out device, byte in data) is

   _print_universal_dec(device, data, 100, 3)

end procedure




procedure _print_suniversal_dec(volatile byte out device, sdword in data, sdword in digit_divisor, byte in digit_number) is

   if (data < 0) then
      data = -data
      device = "-"
   end if

   _print_universal_dec(device, dword( data ), digit_divisor, digit_number)

end procedure


procedure _print_universal_dec(volatile byte out device, dword in data, sdword in digit_divisor, byte in digit_number) is
   var byte digit
   var bit  no_digits_printed_yet;

   if (data == 0) then
      device = "0"
      return
   end if

   no_digits_printed_yet = true
   while (digit_divisor > 0) loop
      digit = byte ( data / digit_divisor )
      data = data % digit_divisor
      digit_divisor = digit_divisor / 10

      if ((digit != 0) | (no_digits_printed_yet == false)) then
         device = digit | "0"
         no_digits_printed_yet = false
      end if
      digit_number = digit_number - 1
   end loop

end procedure
