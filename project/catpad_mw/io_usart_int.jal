-- ----------------------------------------------------------------------
-- Title: io_usart_int Interrupt driven buffered serial interface with flow control.
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: Joep Suijs, Michael Watterson
-- Compiler: =2.4h
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- Serial communications:
--   - receive and transmit data transfer is interrupt driven
--   - receive and transmit data transfer uses circular buffers
--   - automatic CTS flow control with spare free space for FiFo buffer
--
-- This library supports:
--   - Data format: 8 bits data, 1 start-bit, 1 stop bit
--   - Acceptable baud rate depends on the resonator frequency
--
--  -- To Do: Implement parity, stopbits, variable baud rate
--
--     (see BAUD RATES tables in the datasheet with BRGH=1).
--   - Interrupt bits used: TXIE, RCIE, PEIE and GIE.
--
-- Available procedures/functions for application programs:
--
--   - serial_setup()                            -- initialise communications
--                                               -- (called automatically)
--   - serial_send_byte(byte out <byte>)         -- send byte
--                                               -- returns the transmitted byte
--   - serial_hw_read(byte out <byte>) return bit  -- receive byte
--                                               -- returns TRUE with data,
--                                               -- FALSE when no data available
--   - serial_hw_write(byte in <byte>)           -- send byte (wait if queue full)
--
--   - serial_hw_data = <byte>                   -- send byte, wait if queue full
--
--   - <byte> = serial_hw_data                   -- receive byte, wait if queue empty
--
-- Directions for use of this library in application programs
-- (in this sequence):
--
-- 1. Declare the following constant:
--
--      const   serial_hw_baudrate = 19200      -- line speed
--
--    and variables:
--
--      alias serial_ctsinv  is  pin_B4         -- incoming data flow control
--      var  bit serial_overflow_discard        -- With transmit buffer overflow:
--                                              --   TRUE: discard data (non-blocking)
--                                              --   FALSE: wait for free space (blocking)
--                                              -- With receive buffer overflow
--                                              -- data is always discarded
--                                              -- without notification, but
--                                              -- this is prevented with CTS.
--
--    and optional, you could define one or more of the constants below.
--    You should do so if you want different value's then the ones shown.
--    If any of these constants is not defined, the value shown is used:
--
--      const   SERIAL_XMTBUFSIZE  = 32         -- size of transmit buffer
--      const   SERIAL_RCVBUFSIZE  = 64         -- size of receive buffer
--      const   SERIAL_DELTA       = 17         -- spare space receive buffer
--      (if possible keep SERIAL_DELTA = 17).
--
-- 2. Include this library.
--
-- and somewhere before actually using serial communications:
--
-- 3. Set the chosen CTS pin to output:
--       pin_B4_direction = OUTPUT              -- incoming data flow control
--       serial_overflow_discard = FALSE        -- do not disard output
--
-- 4. Call serial_init() to initialize serial communications.
--
-- Some background information:
--
-- The PIC ports use positive logic: '1' is positive voltage, '0' is ground.
--
-- In the RS232 standard:
-- - Negative voltage ('mark') means OFF for control signals, and
--   indicates 1 (one) for data signals (start-, data-, stop-bits).
-- - Positive voltage ('space') means ON for control signals and
--   0 (zero) for start-, data- and stop-bits.
-- - Signal levels: 'mark' = -3V to -15V,  'space' = +3V to +15V
--
-- Between PIC and RS232 normally an interface chip is used, such as a
-- Maxim/Dallas MAX232 or MAX202. These are not only voltage level CONverters
-- but also signal INverters. You should be aware of the following:
-- - The inversion of PIC data-in and data-out by the MAX2x2 is required
--   to convert data-, start- and stop-bits to/from the corresponding
--   RS232 polarity. So nothing special has to be done in the program
--   because the USART of the PIC uses 'inverted' signal levels!
-- - For CTS the inversion by the MAX2x2 is NOT desired.
--   Therefore the program has to use inverted signalling for CTS:
--   'FALSE' is used for CTS ON and 'TRUE' for CTS OFF!
--   As a reminder for this 'inverted' logic the signal is called
--   serial_ctsinv (serial_ctsinv = TRUE means CTS is FALSE!).
--
-- Remember also: RxD of RS232-plug connects to TX of PIC via MAX2x2
--                TxD of RS232-plug connects to RX of PIC via MAX2x2
--
-- Sources:
--
-- Notes:
--  - For data transmit and receive the pins TX and RX are used
--    automatically, these have not to be assigned by the application.
--  - The selection of the CTS pin above is an example, any other pin
--    which is configurable for output can be used.
--  - When CTS flow control is not desired then assign serial_ctsinv
--    to a dummy bit, for example:
--        var  bit  dummy_cts_bit
--        alias serial_ctsinv  is  dummy_cts_bit
--  - The serial_overflow_discard flag may be dynamically changed
--    (depending on how important the data is for the receiving party).
--  - Do not touch the following interrupt bits: TXIE, RCIE, PEIE and GIE
--
-- ----------------------------------------------------------------------

const USART_FLOW_NONE = 0   -- poll only
const USART_FLOW_INT = 1    -- interupts enabled
const USART_FLOW_RTS_CTS = 2   -- interupts enabled and CTS/RTS

const USART_PARITY_NONE = 0
const USART_PARITY_ODD = 1
const USART_PARITY_EVEN = 2
const USART_PARITY_SPACE = 3
const USART_PARITY_MARK = 4
--
-- setup defaults if no value is specified
--
if (defined(SERIAL_XMTBUFSIZE) == false) then
   const   SERIAL_XMTBUFSIZE  = 5  -- was 32 default size of transmit buffer
end if

if (defined(SERIAL_RCVBUFSIZE) == false) then
   const   SERIAL_RCVBUFSIZE  = 8  -- was 64 default size of receive buffer
end if

if (defined(SERIAL_DELTA) == false) then
   const   SERIAL_DELTA   = 1     -- was  17 default spare space receive buffer
end if

if (defined(serial_hw_baudrate) == false) then
      pragma error -- no baudrate defined
end if

if (defined(serial_ctsinv) == false) then
    var bit  serial_ctsinv = false
end if

--if (defined(serial_rtsinv) == false) then
--    var bit  serial_rtsinv = false
-- end if


include io_usart_common
var bit serial_overflow_discard = false
var bit _ctsEnable = off

-- Local circular transmit buffer
var  byte  _serial_xmtbuf[SERIAL_XMTBUFSIZE]    -- circular output buffer

-- Local circular receive buffer
var  byte  _serial_rcvbuf[SERIAL_RCVBUFSIZE]    -- circular input buffer

-- Declaration of local offsets in circular buffers:

-- variable keeping track of next free position in transmit buffer
var  byte  _serial_offsetxmthead                -- offset next byte from appl

-- variable keeping track of next byte to be transmitted by interrupt handler
var  byte  _serial_offsetxmttail                -- offset next byte to port

-- variable keeping track of next free byte in receive buffer
var  byte  _serial_offsetrcvhead                -- offset next byte from port

-- variable keeping track of next byte available to application program
var  byte  _serial_offsetrcvtail                -- offset next byte to appl

-- Flag indicating if transmission was successful
var bit serial_send_success   -- serial_send_success is used internally
                              -- to pass information from serial_send_byte
                              -- to serial_hw_write and serial_hw_data'put
                              -- without breaking the serial_send_byte API.

-- ----------------------------------------------------------------------
--  USART serial transmit interrupt handler
-- ----------------------------------------------------------------------
procedure  _serial_transmit_interrupt_handler() is

   pragma interrupt

   var  byte  x

   if ((PIR1_TXIF == TRUE) & (PIE1_TXIE == TRUE)) then          -- UART xmit interrupt
      if (_serial_offsetxmttail != _serial_offsetxmthead) then  -- data in xmit buffer
         x = _serial_xmtbuf[_serial_offsetxmttail]              -- next byte to xmit
         _serial_offsetxmttail = _serial_offsetxmttail + 1      -- next position
         if (_serial_offsetxmttail >= SERIAL_XMTBUFSIZE) then   -- beyond buffer
            _serial_offsetxmttail = 0           -- wrap to begin
         end if
         if (_serial_offsetxmttail == _serial_offsetxmthead) then  -- last byte xmt'd
            PIE1_TXIE = FALSE                   -- disable xmit interrupts
         end if
         TXREG = x                              -- actually xmit byte
      end if
   end if

end procedure


-- ----------------------------------------------------------------------
--  USART serial receive interrupt handler
--
--  notes: - Sets CTS low when receive buffer has less than <SERIAL_DELTA>
--           bytes free space.
--
-- ----------------------------------------------------------------------
procedure  _serial_receive_interrupt_handler() is

   pragma interrupt

   var  byte  x

   if  (PIR1_RCIF == TRUE)  then                -- UART receive interrupt

      if ((RCSTA_OERR == TRUE) | (RCSTA_FERR == TRUE)) then  -- frame/overr error
         x = RCREG                              -- flush hardware buffer
         while RCSTA_OERR == TRUE loop          -- overrun state
            RCSTA_CREN = FALSE                  -- disable UART
            RCSTA_CREN = TRUE                   -- re-enable UART
            x = RCREG                           -- \  flush hardware buffers
            x = RCREG                           -- /
         end loop                               -- until no more overrun
         _serial_offsetrcvtail = 0              -- \  flush circular buffer
         _serial_offsetrcvhead = 0              -- /
         if  _ctsEnable then
            serial_ctsinv = FALSE                  -- ensure CTS true
         end if
      else                                      -- data without errors
         _serial_rcvbuf[_serial_offsetrcvhead] = RCREG      -- move byte to rcv buffer

         if (defined(serial_receive_wedge) == true) then
            -- receive wedge - a user program can define this procedure.
            --    procedure serial_receive_wedge(byte in char)
            -- If this procedure exisits, it will be called from the
            -- isr for each received char.
            -- CAUTION: the wedge is part of the ISR and should be designed
            -- to behave accordingly. If you are not sure you need this, you
            -- probably don't!
            serial_receive_wedge(_serial_rcvbuf[_serial_offsetrcvhead])
         end if

         x = _serial_offsetrcvhead + 1          -- update offset
         if x >= SERIAL_RCVBUFSIZE then         -- buffer overflow
            x = 0                               -- wrap
         end if
         if (x != _serial_offsetrcvtail) then   -- buffer not yet full
            _serial_offsetrcvhead = x           -- update offset
         end if                                 -- (else discard byte,
                                                --  CTS flow control has failed)

         if  _ctsEnable & (serial_ctsinv == FALSE) then       -- CTS is TRUE
            if _serial_offsetrcvhead > _serial_offsetrcvtail then  -- offset difference
               x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
            else
               x = _serial_offsetrcvtail - _serial_offsetrcvhead
            end if
            if (x < SERIAL_DELTA) then          -- circular buffer almost full
               serial_ctsinv = TRUE             -- set CTS FALSE
            end if
         end if

      end if

   end if

end procedure

procedure serial_twostop_bits ( bit in twoBits) is
   if twoBits then
       RCSTA_RX9 = on
       RCSTA_RX9D = on
       TXSTA_TX9 = on
       RCSTA_RX9D = on
   else
       RCSTA_RX9 = off
       RCSTA_RX9D = off
       TXSTA_TX9 = off
       RCSTA_RX9D = off
   end if
end procedure

-- ----------------------------------------------------------------------
--  Return byte (if any) from circular receive buffer for UART
--
--  input:   nothing
--
--  output:  received byte (if any)
--
--  returns: TRUE  when byte returned
--           FALSE if no byte available
--
--  notes: - Sets CTS high when receive buffer has more than <SERIAL_DELTA>
--           bytes free space after delivering byte to caller.
--
-- ----------------------------------------------------------------------
function serial_hw_read(byte out data) return bit is

   var  byte  x                                 -- for buffer management

   if (_serial_offsetrcvtail == _serial_offsetrcvhead) then  -- receive buffer empty
      return false                              -- no data available
   end if

   data = _serial_rcvbuf[_serial_offsetrcvtail]  -- first available byte
   _serial_offsetrcvtail = _serial_offsetrcvtail + 1
   if (_serial_offsetrcvtail >= SERIAL_RCVBUFSIZE) then  -- buffer overflow
      _serial_offsetrcvtail = 0                 -- wrap
   end if
   if  _ctsEnable &(serial_ctsinv == TRUE) then              -- CTS is FALSE
      if (_serial_offsetrcvhead > _serial_offsetrcvtail) then
         x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
      else
         x = _serial_offsetrcvtail - _serial_offsetrcvhead  -- offset difference
      end if
      if (x >= SERIAL_DELTA) then               -- enough free space now
         serial_ctsinv = FALSE                  -- make CTS TRUE
      end if
   end if

   return true                                  -- byte available

end function


-- ----------------------------------------------------------------------
--  Put a single byte in circular transmit buffer for UART
--
--  input:   byte to transmit
--
--  returns: transmitted byte (or 0x00 when data discarded)
--
--  notes: - Activates transmit interrupt handler when data buffered
--         - When buffer full act as indicated in 'serial_overflow_discard'
--           * TRUE:  discard data
--                    (and return 0x00 as data byte)
--           * FALSE: wait for free buffer space
--                    (returns only after data has been stored in buffer)
--
-- ----------------------------------------------------------------------
function  serial_send_byte(byte in data) return byte is

   var  byte  newxmthead                        -- offset in circular buffer

   serial_send_success = true                   -- indicate byte sent

   if (_serial_offsetxmthead == _serial_offsetxmttail  &  -- nothing buffered
       PIR1_TXIF == true) then                  -- and UART not busy
      PIE1_TXIE = FALSE                         -- disable xmt interrupt
      TXREG = data                              -- transmit byte immediately
   else                                         -- use circular buffer
      _serial_xmtbuf[_serial_offsetxmthead] = data  -- put byte in buffer
      newxmthead = _serial_offsetxmthead + 1    -- offset next char
      if (newxmthead >= SERIAL_XMTBUFSIZE) then  -- beyond buffer end
         newxmthead = 0                         -- wrap to begin
      end if
      if (newxmthead != _serial_offsetxmttail) then  -- buffer not full
         _serial_offsetxmthead = newxmthead     -- update offset
      else                                      -- buffer full!
         if (serial_overflow_discard == FALSE) then  -- do not discard data!
            while (newxmthead == _serial_offsetxmttail) loop   -- buffer full
               -- nothing                       -- spin until something xmit'd
            end loop
            _serial_offsetxmthead = newxmthead  -- update offset
         else
            serial_send_success = false         -- indicate byte discarded
            data = 0x00                         -- indicate byte discarded
         end if
      end if
      PIE1_TXIE = TRUE                          -- (re-)enable xmit interrupts
   end if

   return data                                  -- transmitted byte!

end function


-- ----------------------------------------------------------------------
-- serial_init - procedure to initialize library functionality
-- baudrate,n,8,2,flow
-- ----------------------------------------------------------------------
procedure serial_hw_init(dword in baudrate, byte in  parity, byte in databits, byte in stopbits, byte in flowControl) is

-- common RS232 baud rates
    -- 50, 75, 110, 150, 300, 600, 1200, 2400, 4800, 9600, 19_200, 38_400, 56_700, 115_200
    -- Midi is 31.25 Kbits/sec
    -- IR remotes use Manchester Encoding on 30kHz to 50kHz carrier, typ. 38kHz
    -- alternate 0b1010_1010 is 0_1010_1010_1 on a serial TX and can be used as
    -- carrier for ASK/OOK Manchester on IR LED

   _serial_offsetxmthead  = 0                   -- offset next byte from appl
   _serial_offsetxmttail  = 0                   -- offset next byte to port
   _serial_offsetrcvhead  = 0                   -- offset next byte from port
   _serial_offsetrcvtail  = 0                   -- offset next byte to appl

   _ctsEnable = (flowControl == USART_FLOW_RTS_CTS)

   RCSTA                  = 0b0000_0000         -- reset
   RCSTA_SPEN             = enabled             -- serial port enable
   RCSTA_CREN             = enabled             -- continuous receive enable

   TXSTA                  = 0b0000_0000         -- reset (8 bit, asyn)
   TXSTA_TXEN             = enabled             -- UART transmit enabled
--   TXSTA_BRGH             = true                -- high baud rate
--   SPBRG                  = (target_clock / 16 / serial_hw_baudrate * 10 - 5) / 10
   _calculate_and_set_baudrate()                -- set baudrate

   PIE1_RCIE              = (flowControl > 0)             -- UART receive int. enable
                                                -- (PIE1_TXIE dynamically)
   if (flowControl > 0) then    -- other sw may be turning on interrpts
     INTCON_PEIE            = enabled             -- peripheral
     INTCON_GIE             = enabled             -- general
   end if
   -- allowed modes  1 stop bit
   --   8 bit any parity inc none
   --   7 bit any parity except none
   -- allowed modes  2 stop bit
   --   8 bit no parity
   --   7 bit any parity inc none
   --   6 bit all parity except none

    -- Even parity
    --     Basically, the parity bit can be calculated in two ways.
    --      When even parity is used, the number of information bits sent will
    --      always contain an even number of logical 1's. If the number of high
    --      data bits is odd, a high value parity bit is added, otherwise a low
    --      bit will be used.

    --  Odd parity
    --      The odd parity system is quite similar to the even parity system,
    --      but in this situation, the number of high bits will always be odd.

   if  (stopbits == 2) & (databits == 8) & (flowControl == USART_PARITY_NONE) then
        RCSTA_RX9 = on
        RCSTA_RX9D = on
        TXSTA_TX9 = on
        RCSTA_RX9D = on
    elsif  (stopbits == 1) & (databits == 8) & (flowControl == USART_PARITY_MARK) then
        RCSTA_RX9 = on
        RCSTA_RX9D = on
        TXSTA_TX9 = on
        RCSTA_RX9D = on
    elsif  (stopbits == 1) & (databits == 8) & (flowControl == USART_PARITY_SPACE) then
         RCSTA_RX9 = on
        RCSTA_RX9D = off
        TXSTA_TX9 = on
        RCSTA_RX9D = off
    end if
   if  _ctsEnable then
       serial_ctsinv          = false               -- CTS true: accept PC data
   end if
end procedure



-- ----------------------------------------------------------------------
-- serial_hardware compatible interface
-- ----------------------------------------------------------------------

-- Transmit byte
procedure serial_hw_data'put(byte in data) is

   var byte dummy

   serial_send_success = false
   while (serial_send_success == false) loop
      dummy = serial_send_byte(data)
   end loop

end procedure


-- Transmit byte
procedure serial_hw_write(byte in data) is
   var byte dummy

   serial_send_success = false
   while (serial_send_success == false) loop
      dummy = serial_send_byte(data)
   end loop

end procedure


-- Return next received byte
function serial_hw_data'get() return byte is
   var byte data
   while !serial_hw_read(data) loop
   -- nothing
   end loop
   return data
end function

-- bare metal export
function serial_hw_data_available'get() return bit is
   return (_serial_offsetrcvtail != _serial_offsetrcvhead)
end function

-- alias serial_hw_data_ready is PIR1_TXIF
