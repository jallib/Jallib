-- Title: ADC block configuration
-- Author: Sebastien Lelong, Copyright (c) 2009, all rights reserved.
-- Adapted-by: Sebastien Lelong.
-- Compiler: >=2.4k
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library provides a procedure to configure
-- ADC clock according to ADC constraints about Tad values and PIC's clock speed
-- 

-- Default min/max Tad value
-- Expressed as usecs * 10: if you want 1.6usecs, say 16
-- See adc_init for details


var byte tad_value

if defined(ADC_MIN_TAD) == false then
   -- So this is 1.6usecs
   const byte ADC_MIN_TAD = 16
end if
if defined(ADC_MAX_TAD) == false then
   -- And this is 6usecs
   const byte ADC_MAX_TAD = 60
end if
	  

function _adc_eval_tad(word in factor) return bit is
   -- Tad value are float (eg. 1.6usecs) but compiler can't handle them
   -- we'll multiply this by 10 so we have intergers

   -- factor is typically 64 to 1. Why a word ?
   -- Compiler says about promotion during multiplication:
   --    "If both operands have the same signedness and width,
   --     the result is that of the operands."
   -- So, byte * 10 will give a byte. Ex: 32 * 10 = 64 ...
   -- That's we use a word, so the result can fit in a word (320)

   var bit tad_ok = false
   tad_value = byte((factor * 10) / (target_clock / 1_000_000))
   if tad_value >= ADC_MIN_TAD & tad_value < ADC_MAX_TAD then
	  tad_ok = true
   end if
   return tad_ok
end function


procedure _adc_init_clock() is
   -- Seb: selecting the appropriate clock bits
   -- is a real nightmare, yet critical.
   -- Strictly speaking, all PICs don't have the same 
   -- value in min/max Tad. And some PICs can go higher than
   -- 20MHz, like 18F. And, LF PICs don't follow the same rules as
   -- F PICs (see 18F4550 and 18LF4550 for instance)
   -- How to get a general rule of thumb ?...
   --
   -- Well... I got an idea ! 
   -- For 16F88, and for many other PICs: 1.6usec < Tad < 6.4usec
   -- For 18F4550 (and other 18F PICs ?): 0.7usec < Tad < 25usec
   -- So, honoring 16F88 values should do the trick for 18F4550, right ?
   -- We then just need to compute Tad from the highest possible clock value, 
   -- and decreasing until Tad interval gives a match.

   -- Oh, I forgot ! clock selection bits can *2 or *3:
   --   - when bit*2: factor is 2, 8 or 32
   --   - when bit*3: factor is 2, 4, 8, 16, 32 or 64
   -- (and bit*3 can be a combination or bit*2 + 1. Ex: bit*2 ADCON0_ADCS, and bit ADCON1_ADCS2
   -- How ADCS bits are distributed in device files ?
   --   - grep ADCON0_ADCS[[:space:]] * | awk '{print $3}' | sort -u
   --		=> gives "bit*2". So if ADCON0_ADCS exists, then it's 2-bits long
   --   - grep _ADCS[[:digit:]] * | awk '{print $3,$4}' | sort -u
   --       => gives "bit ADCON1_ADCS2". So if ADCON1_ADCS2 exists, then this is the 3rd bit
   --   - grep _ADCS * | grep bit.2 | awk '{print $4}' | sort -u
   --       => gives "ADCON0_ADCS". So all other are bit*3 ...
   --   - grep _ADCS * | grep bit.3 | awk '{print $4}' | sort -u
   --       => ... and these are: ADCON1_ADCS, ADCON2_ADCS, ANSEL_ADCS
   --   - for p in `grep ADCON1_ADCS2 * | sed "s#:var.*##"`; do grep _ADCS[[:space:]] $p | awk '{print $3,$4}';done | sort -u
   --       => gives "bit*2 ADCON0_ADCS" so extra 3rd bit exists when ADCON0_ADCS is defined
   -- Final note before code: when a third extra bit exists, clock factor is multiplied by 2.
   -- This means without this 3rd bit, we have exactly the same distribution as for PICs with 
   -- only 2-bits long ADCS.

   -- Normalize ADCS bits
   if defined(ADCON0_ADCS) == true then
	  alias jallib_adcs_lsb is ADCON0_ADCS
	  if defined(ADCON1_ADCS2) == true then
		 const byte ADC_ADCS_BIT_LONG = 3
		 const bit ADC_ADCS_BIT_SPLIT = true
		 alias jallib_adcs_msb is ADCON1_ADCS2
	  else
		 const byte ADC_ADCS_BIT_LONG = 2
		 const bit ADC_ADCS_BIT_SPLIT = false
		 var volatile bit jallib_adcs_msb	 -- float in the air
	  end if
   end if
   if defined(ADCON1_ADCS) == true then
	  alias jallib_adcs is ADCON1_ADCS
	  const byte ADC_ADCS_BIT_LONG = 3
	  const bit ADC_ADCS_BIT_SPLIT = false
   end if
   if defined(ADCON2_ADCS) == true then
	  alias jallib_adcs is ADCON2_ADCS
	  const byte ADC_ADCS_BIT_LONG = 3
	  const bit ADC_ADCS_BIT_SPLIT = false
   end if
   if defined(ANSEL_ADCS) == true then
	  alias jallib_adcs is ANSEL_ADCS
	  const byte ADC_ADCS_BIT_LONG = 3
	  const bit ADC_ADCS_BIT_SPLIT = false
   end if

   var volatile bit*3 adcs = 0b_000
   -- This is an horrible implementation...
   if ADC_ADCS_BIT_LONG == 3 then
	  -- Compute from 64 to 2
	  if _adc_eval_tad(64) == true then
		 adcs = 0b_110
	  elsif _adc_eval_tad(32) == true then
		 adcs = 0b_010
	  elsif _adc_eval_tad(16) == true then
		 adcs = 0b_101
	  elsif _adc_eval_tad(8) == true then
		 adcs = 0b_001
	  elsif _adc_eval_tad(4) == true then
		 adcs = 0b_100
	  elsif _adc_eval_tad(2) == true then
		 adcs = 0b_000
	  end if
   else
	  -- Compute from 32 to 2
	  if _adc_eval_tad(32) == true then
		 adcs = 0b_010
	  elsif _adc_eval_tad(8) == true then
		 adcs = 0b_001
	  elsif _adc_eval_tad(2) == true then
		 adcs = 0b_000
	  end if
   end if

   var bit*2 adcs_lsb at adcs : 0
   var bit   adcs_msb at adcs : 2
   if ADC_ADCS_BIT_LONG == 3 then
	  if ADC_ADCS_BIT_SPLIT == true then
		 jallib_adcs_lsb = adcs_lsb
		 jallib_adcs_msb = adcs_msb
	  else
		 jallib_adcs = adcs
	  end if
   else
	  jallib_adcs_lsb = adcs_lsb
   end if

end procedure



