-- Title: ADC channel configuration.
-- Author: Sebastien Lelong, Copyright (C) 2009, all rights reserved. 
-- Adapted-by: 
-- Compiler: >=2.4k
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library acts as a wrapper. When included, it'll define ways to
-- configure the number ADC channels. There are 3 different cases:
--    1. the number of channels is specified setting/clearing PCFG bits
--       => a combination of PCFG bits selects a given number of ADC channels.
--          It is not possible to independently select which pins as ADC pins.
--          If available, Vref+ and Vref- are part of these combinations.
--          PCFG bits are in ADCON1, as ADCON1_PCFG
--    2. the number of channels is specified clearing PCFG bits (case only found in 18F, I think)
--       => pins can be configured independently (you can decide which pin will act as
--          an analog pin, and define your own combination
--          Vref+/Vref- are configured using VCFG bits.
--          PCFG bits are in ADCON0 and ADCON1, and are numbered (eg. ADCON_PCFG5)
--    3. the number of channels is set using ANS bits (18F and non-18F)
--       => same as case 2., channels can be configured independently
--          Vref+/Vref- are configured using VCFG bits.
--
-- Notes: this file is generated, don't modify it directly...
--






-- Configure Voltage reference using VCFG bits
procedure adc_vcfg() is
   pragma inline
   -- Configure Voltage Reference, Vref bits
   -- This is only valid for PICs where Vref isn't part of PCFG bits combination

   var byte vcfg_shadow = ADC_NVREF
   if ADC_NVREF == 2 then
      vcfg_shadow = 3   -- 0b_10 | 0b_01 => 0b_11 => one bit per VCFG bit*2
   end if
   
   if defined(ADCON0_VCFG) == true then
      ADCON0_VCFG = vcfg_shadow
   elsif defined(ADCON1_VCFG) == true then
      ADCON1_VCFG = vcfg_shadow

   -- VCFG0 bit can be found in ADCON0 or ADCON1 register
   elsif defined(ADCON1_VCFG0) == true then
      if ADC_NVREF == 1 then
         ADCON1_VCFG0 = true
      elsif ADC_NVREF == 2 then
         ADCON1_VCFG0 = true
         ADCON1_VCFG1 = true
      end if
   elsif defined(ADCON0_VCFG0) == true then
      if ADC_NVREF == 1 then
         ADCON0_PVCFG0 = true
      elsif ADC_NVREF == 2 then
         ADCON0_VCFG0 = true
         ADCON0_VCFG1 = true
      end if
   -- Special case for PVCFG
   elsif defined(ADCON1_PVCFG0) == true then
      if ADC_NVREF > 0 then
         -- PVCFG = 0b_01
         ADCON1_PVCFG0 = false
         ADCON1_PVCFG1 = true
      elsif ADC_NVREF == 2 then
         -- NVCFG = 0b_01
         ADCON1_NVCFG0 = false
         ADCON1_NVCFG1 = true
      end if
   else
      if defined(ADC_NVREF) == true & ADC_NVREF != 0 then
         _error "You've specified ADC_NVREF, but I can't find VCFG bits. There should be VCFG bits, except if I've made a mistake..."
      end if
   end if
end procedure



-- Configure Voltage reference using ADREF bits
-- Found in PICs: 16f722, 16f723, 16f724, 16f726, 16f727, 16lf722, 
--                16lf723, 16lf724, 16lf726, 16lf727,
-- Same family, DS 41341B
procedure adc_adref() is

   if defined(ADCON1_ADREF) == true then
      if ADC_NVREF == 1 then
         ADCON1_ADREF = 0b_10
      elsif ADC_NVREF != 0 then
         _error "ADC_NVREF must be 0 or 1"
      end if
   end if

end procedure




-- -----------------------------------------
-- FIRST CASE: 
--  - PCFG bits exist, 
--  - analog are dependent from each other
--  - Vref config is done via PCFG bits
--    combination
-- -----------------------------------------

if target_chip == PIC_18F2550 | target_chip == PIC_18F4550 | target_chip == PIC_18F4455 | target_chip == PIC_18F2455 | target_chip == PIC_18F6680 | target_chip == PIC_18F6585 | target_chip == PIC_18F8585 | target_chip == PIC_18F8680 | target_chip == PIC_16F870 | target_chip == PIC_16F871 | target_chip == PIC_16F73 | target_chip == PIC_16F74 | target_chip == PIC_16F77 | target_chip == PIC_16F76 | target_chip == PIC_18F4450 | target_chip == PIC_18F2450 | target_chip == PIC_18F2553 | target_chip == PIC_18F4553 | target_chip == PIC_18F2458 | target_chip == PIC_18F4458 | target_chip == PIC_18F66J93 | target_chip == PIC_18F67J93 | target_chip == PIC_18F86J93 | target_chip == PIC_18F87J93 | target_chip == PIC_16F767 | target_chip == PIC_16F737 | target_chip == PIC_16F747 | target_chip == PIC_16F777 | target_chip == PIC_16F72 | target_chip == PIC_16F876A | target_chip == PIC_16F874A | target_chip == PIC_16F877A | target_chip == PIC_16F873A | target_chip == PIC_16F716 | target_chip == PIC_18F4439 | target_chip == PIC_18F4539 | target_chip == PIC_18F2539 | target_chip == PIC_18F2439 | target_chip == PIC_16F873 | target_chip == PIC_16F874 | target_chip == PIC_16F876 | target_chip == PIC_16F877 | target_chip == PIC_16F872 | target_chip == PIC_16F818 | target_chip == PIC_16F819 then

   _debug "ADC channels config: dependent pins, via PCFG bits"


   -- Datasheet: 39632D
   if target_chip == PIC_18F2550 | target_chip == PIC_18F2455 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

   end if


   -- Datasheet: 39632D
   if target_chip == PIC_18F4550 | target_chip == PIC_18F4455 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

   end if




   -- Datasheet: 30491C
   if target_chip == PIC_18F8585 | target_chip == PIC_18F8680 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [51] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0001, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 14 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 15 then
            asm nop
         elsif (ADC_NCHANNEL) == 16 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN15_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN14_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

   end if


   -- Datasheet: 30491C
   if target_chip == PIC_18F6680 | target_chip == PIC_18F6585 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [39] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

   end if




   -- Datasheet: 30569B
   if target_chip == PIC_16F870 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30569B
   if target_chip == PIC_16F871 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN5_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if




   -- Datasheet: 30325B
   if target_chip == PIC_16F73 | target_chip == PIC_16F76 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

   end if


   -- Datasheet: 30325B
   if target_chip == PIC_16F74 | target_chip == PIC_16F77 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_010, 0b_011, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            asm nop
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

   end if




   -- Datasheet: 39582B
   if target_chip == PIC_16F876A | target_chip == PIC_16F873A then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_1111, 0b_0, 0b_0101, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 39582B
   if target_chip == PIC_16F874A | target_chip == PIC_16F877A then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_1111, 0b_0, 0b_0101, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if




   -- Datasheet: 39948A
   if target_chip == PIC_18F66J93 | target_chip == PIC_18F67J93 | target_chip == PIC_18F86J93 | target_chip == PIC_18F87J93 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [39] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

   end if




   -- Datasheet: 30498C
   if target_chip == PIC_16F747 | target_chip == PIC_16F777 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [45] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 14 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

   end if


   -- Datasheet: 30498C
   if target_chip == PIC_16F767 | target_chip == PIC_16F737 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [36] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN13_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

   end if




   -- Datasheet: 39597C
   if target_chip == PIC_16F72 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_111, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

   end if




   -- Datasheet: 30292C
   if target_chip == PIC_16F873 | target_chip == PIC_16F876 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30292C
   if target_chip == PIC_16F874 | target_chip == PIC_16F877 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN5_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if




   -- Datasheet: 39887B
   if target_chip == PIC_18F2553 | target_chip == PIC_18F2458 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

   end if


   -- Datasheet: 39887B
   if target_chip == PIC_18F4553 | target_chip == PIC_18F4458 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

   end if




   -- Datasheet: 41206B
   if target_chip == PIC_16F716 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [15] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

   end if




   -- Datasheet: 30485A
   if target_chip == PIC_18F2539 | target_chip == PIC_18F2439 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30485A
   if target_chip == PIC_18F4439 | target_chip == PIC_18F4539 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if




   -- Datasheet: 39760D
   if target_chip == PIC_18F2450 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

   end if


   -- Datasheet: 39760D
   if target_chip == PIC_18F4450 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

   end if




   -- Datasheet: 30221C
   if target_chip == PIC_16F872 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if




   -- Datasheet: 39598E
   if target_chip == PIC_16F818 | target_chip == PIC_16F819 then



         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

   end if



   -- Retrieve config bits according to selected number of ADC channels
   -- ADC_PCFG_MAP contains all confs, from 0 analog to the max
   const byte idx = ADC_NCHANNEL * 3
   if ADC_NVREF == 0 then
      no_vref = ADC_PCFG_MAP[idx]
      ADCON1_PCFG = no_vref
   elsif ADC_NVREF == 1 then
      one_vref = ADC_PCFG_MAP[idx + 1]
      ADCON1_PCFG = one_vref
   elsif ADC_NVREF == 2 then
      two_vref = ADC_PCFG_MAP[idx + 2]
      ADCON1_PCFG = two_vref
   else
      _error "You can't have more than 2 VRef..."
   end if





-- --------------------------------------------
-- SECOND CASE: 
--  - PCFG bits exist 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

elsif target_cpu == PIC_16 & (defined(ANCON0_PCFG0) | defined(ANCON0_PCFG1) | defined(ANCON0_PCFG2) | defined(ANCON0_PCFG3) | defined(ANCON0_PCFG4) | defined(ANCON0_PCFG5) | defined(ANCON0_PCFG6) | defined(ANCON0_PCFG7) | defined(ANCON1_PCFG10) | defined(ANCON1_PCFG11) | defined(ANCON1_PCFG12) | defined(ANCON1_PCFG8) | defined(ANCON1_PCFG9)) then

   _debug "ADC channels config: independent pins, via PCFG bits"

   -- Selecting the number of ADC channels is done using PCFG bits
   -- User can optionally specify ADC channels number
   if defined(ADC_NCHANNEL) == true then
      if ADC_NCHANNEL > ADC_NTOTAL_CHANNEL then
         _error "More ADC channels than available, adjust ADC_NCHANNEL"
      end if
      -- Max 13 ADC channels
      -- At least 1 channel
      if ADC_NCHANNEL > 0 then
         ANCON0_PCFG0 = false
         pin_AN0_direction = input
      end if
      -- At least 2 channels
      if ADC_NCHANNEL > 1 then
         ANCON0_PCFG1 = false
         pin_AN1_direction = input
      end if
      -- At least 3 channels
      if ADC_NCHANNEL > 2 then
          ANCON0_PCFG2 = false
         pin_AN2_direction = input
      end if
      -- At least 4 channels
      if ADC_NCHANNEL > 3 then
         ANCON0_PCFG3 = false
         pin_AN3_direction = input
      end if
      -- At least 5 channels
      if ADC_NCHANNEL > 4 then
         ANCON0_PCFG4 = false
         pin_AN4_direction = input
      end if
      -- At least 6 channels
      if ADC_NCHANNEL > 5 then
         ANCON0_PCFG5 = false
         pin_AN5_direction = input
      end if
      -- At least 7 channels
      if ADC_NCHANNEL > 6 then
         ANCON0_PCFG6 = false
         pin_AN6_direction = input
      end if
      -- At least 8 channels
      if ADC_NCHANNEL > 7 then
         ANCON0_PCFG7 = false
         pin_AN7_direction = input
      end if
      -- At least 9 channels
      if ADC_NCHANNEL > 8 then
         ANCON1_PCFG8 = false
         pin_AN8_direction = input
      end if
      -- At least 10 channels
      if ADC_NCHANNEL > 9 then
         ANCON1_PCFG9 = false
         pin_AN9_direction = input
      end if
      -- At least 11 channels
      if ADC_NCHANNEL > 10 then
         ANCON1_PCFG10 = false
         pin_AN10_direction = input
      end if
      -- At least 12 channels
      if ADC_NCHANNEL > 11 then
         ANCON1_PCFG11 = false
         pin_AN11_direction = input
      end if
      -- At least 13 channels
      if ADC_NCHANNEL > 12 then
         ANCON1_PCFG12 = false
         pin_AN12_direction = input
      end if
   end if

   -- Or specify manually which pin should act as ADC
   -- Provide procedure for this (eg. for pin AN7 to be analog, set_analog_pin(7))

   -- Configure a pin to act as an analog pin.
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_analog_pin(7) will set this pin as analog
   --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   procedure set_analog_pin(byte in an_pin_num) is
      -- There's a mininum of 5 channels, so ANCON0_PCFG0, ANCON0_PCFG1,
      -- ANCON0_PCFG2, ANCON0_PCFG3 and ANCON0_PCFG4 are always defined
      if an_pin_num == 0 then
         ANCON0_PCFG0 = false
         pin_AN0_direction = input
      end if
      if an_pin_num == 1 then
         ANCON0_PCFG1 = false
         pin_AN1_direction = input
      end if
      if an_pin_num == 2 then
         ANCON0_PCFG2 = false
         pin_AN2_direction = input
      end if
      if an_pin_num == 3 then
         ANCON0_PCFG3 = false
         pin_AN3_direction = input
      end if
      if an_pin_num == 4 then
         ANCON0_PCFG4 = false
         pin_AN4_direction = input
      end if

      -- Sometimes, there are gaps in PCFG bits
      -- 18lf24j50 has PCFG0 to PCFG12 bits, but without PCFG5, PCFG6 and PCFG7
      -- (this is because these bits only exist in the 44-pins version, according to DS)
      -- This shouldn't be a problem because numbering between PCFG bits and
      -- analog pins is respected: there's no AN5, AN6 and AN7 as well)

      -- PCFG5, PCFG6 and PCFG7 are always found together
      if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
         if an_pin_num == 5 then
            ANCON0_PCFG5 = false
            pin_AN5_direction = input
         end if
         if an_pin_num == 6 then
            ANCON0_PCFG6 = false
            pin_AN6_direction = input
         end if
         if an_pin_num == 7 then
            ANCON0_PCFG7 = false
            pin_AN7_direction = input
         end if
      end if

      -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
      if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
         if an_pin_num == 8 then
            ANCON1_PCFG8 = false
            pin_AN8_direction = input
         end if
         if an_pin_num == 9 then
            ANCON1_PCFG9 = false
            pin_AN9_direction = input
         end if
         if an_pin_num == 10 then
            ANCON1_PCFG10 = false
            pin_AN10_direction = input
         end if
         if an_pin_num == 11 then
            ANCON1_PCFG11 = false
            pin_AN11_direction = input
         end if
         if an_pin_num == 12 then
            ANCON1_PCFG12 = false
            pin_AN12_direction = input
         end if
      end if
   end procedure

   -- Configure a pin to act as an digital pin.
   -- Because setting a pin to act as digital makes only sens for
   -- pins which can also be configured as analog,
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_digital_pin(7) will set this pin as digital
   --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   -- 
   -- Note: the pin direction is not modified
   procedure set_digital_pin(byte in an_pin_num) is
      if an_pin_num == 0 then
         ANCON0_PCFG0 = true
         pin_AN0_direction = input
      end if
      if an_pin_num == 1 then
         ANCON0_PCFG1 = true
         pin_AN1_direction = input
      end if
      if an_pin_num == 2 then
         ANCON0_PCFG2 = true
         pin_AN2_direction = input
      end if
      if an_pin_num == 3 then
         ANCON0_PCFG3 = true
         pin_AN3_direction = input
      end if
      if an_pin_num == 4 then
         ANCON0_PCFG4 = true
         pin_AN4_direction = input
      end if

      -- PCFG5, PCFG6 and PCFG7 are always found together
      if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
         if an_pin_num == 5 then
            ANCON0_PCFG5 = true
            pin_AN5_direction = input
         end if
         if an_pin_num == 6 then
            ANCON0_PCFG6 = true
            pin_AN6_direction = input
         end if
         if an_pin_num == 7 then
            ANCON0_PCFG7 = true
            pin_AN7_direction = input
         end if
      end if

      -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
      if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
         if an_pin_num == 8 then
            ANCON1_PCFG8 = true
            pin_AN8_direction = input
         end if
         if an_pin_num == 9 then
            ANCON1_PCFG9 = true
            pin_AN9_direction = input
         end if
         if an_pin_num == 10 then
            ANCON1_PCFG10 = true
            pin_AN10_direction = input
         end if
         if an_pin_num == 11 then
            ANCON1_PCFG11 = true
            pin_AN11_direction = input
         end if
         if an_pin_num == 12 then
            ANCON1_PCFG12 = true
            pin_AN12_direction = input
         end if
      end if
   end procedure



   if defined(ADCON0_VCFG) == true | defined(ADCON1_VCFG) then
      adc_vcfg()
   elsif defined(ADCON1_ADREF) == true then
      adc_adref()
   end if




-- --------------------------------------------
-- THIRD CASE: 
--  - ANS bits exist, 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

else
   _debug "ADC channels config: independent pins, via ANS bits"
   -- Selecting the number of ADC channels is done using ANS bits
   -- There are many different cases where ANS bits can be found
   --   - bit*2 ADCON0_ANS
   --   - bit ANSEL0_ANSx (x in [0,7])
   --   - bit ANSEL1_ANSx (x in [8,11])
   --   - bit*6 ANSELA_ANSA
   --   - bit*6 ANSELB_ANSB
   --   - byte ANSELD_ANSD
   --   - bit*3 ANSELE_ANSE
   --   - bit*4 ANSELH_ANSELH
   --   - bit*4 ANSEL_ANS
   --   - bit ANSEL_ANSx (x in [0,7] or x in [0,4], or x in [0,1]U[4,7], or x in [0,6])
   --   - bit ANSEL_ANSELx (0 <= x <= 7, or 3 <= x <= 7)
   --   - bit ANSELH_ANSx (8 <= x <= 13, or 8 <= x <= 12)
   --
   -- There's a need for normalization...
   -- ANS bits are now normalized in device files :)
   -- I (Seb) keep these grep & sed rules as tools to check future changes

   -- Provide helper func to configure pins either in digital or analog mode
   -- (/!\, true/false logic is inverted compared to PCFGx bits)

   -- Some exceptions have been reported related to 16f72X family. These devises
   -- have gaps within their analog pins, but ANSx bits are continued. For instance,
   -- for 16f722, JANSEL_ANS5 should refer to analog pin AN5, but it does not exist !
   -- We need to put some more exceptions here, hoping there won't be much more. If so, 
   -- these would have to be dealt an in external file people could easily enrich.
   -- Anyway... here we go !
   -- Guilty PICs: 16F722, 16F723, 16F724, 16F726, 16F727 + LF versions
   -- Here's how ANSx bits are mapped to analog pins:

   if target_chip == PIC_16F722 | target_chip == PIC_16F723 | target_chip == PIC_16F724 | target_chip == PIC_16F726 | target_chip == PIC_16F727 |
      target_chip == PIC_16LF722 | target_chip == PIC_16LF723 | target_chip == PIC_16LF724 | target_chip == PIC_16LF726 | target_chip == PIC_16LF727 then

      alias ADC_JANSEL_ANS0  is JANSEL_ANS0
      alias ADC_JANSEL_ANS1  is JANSEL_ANS1
      alias ADC_JANSEL_ANS2  is JANSEL_ANS2
      alias ADC_JANSEL_ANS3  is JANSEL_ANS3
      alias ADC_JANSEL_ANS4  is JANSEL_ANS5
      alias ADC_JANSEL_ANS12 is JANSEL_ANS6
      alias ADC_JANSEL_ANS10 is JANSEL_ANS7
      alias ADC_JANSEL_ANS8  is JANSEL_ANS8
      alias ADC_JANSEL_ANS9  is JANSEL_ANS9
      alias ADC_JANSEL_ANS11 is JANSEL_ANS10
      alias ADC_JANSEL_ANS13 is JANSEL_ANS11




      if target_chip == PIC_16F724 | target_chip == PIC_16F727 | target_chip == PIC_16LF724 | target_chip == PIC_16LF727 then
         alias ADC_JANSEL_ANS5 is JANSEL_ANS20
           alias ADC_JANSEL_ANS6 is JANSEL_ANS21
           alias ADC_JANSEL_ANS7 is JANSEL_ANS22
      end if

   else
      -- no exception here: ANSx corresponds to analog pin nx
         if defined(JANSEL_ANS0) == true then
            alias ADC_JANSEL_ANS0 is JANSEL_ANS0
         end if
         if defined(JANSEL_ANS1) == true then
            alias ADC_JANSEL_ANS1 is JANSEL_ANS1
         end if
         if defined(JANSEL_ANS2) == true then
            alias ADC_JANSEL_ANS2 is JANSEL_ANS2
         end if
         if defined(JANSEL_ANS3) == true then
            alias ADC_JANSEL_ANS3 is JANSEL_ANS3
         end if
         if defined(JANSEL_ANS4) == true then
            alias ADC_JANSEL_ANS4 is JANSEL_ANS4
         end if
         if defined(JANSEL_ANS5) == true then
            alias ADC_JANSEL_ANS5 is JANSEL_ANS5
         end if
         if defined(JANSEL_ANS6) == true then
            alias ADC_JANSEL_ANS6 is JANSEL_ANS6
         end if
         if defined(JANSEL_ANS7) == true then
            alias ADC_JANSEL_ANS7 is JANSEL_ANS7
         end if
         if defined(JANSEL_ANS8) == true then
            alias ADC_JANSEL_ANS8 is JANSEL_ANS8
         end if
         if defined(JANSEL_ANS9) == true then
            alias ADC_JANSEL_ANS9 is JANSEL_ANS9
         end if
         if defined(JANSEL_ANS10) == true then
            alias ADC_JANSEL_ANS10 is JANSEL_ANS10
         end if
         if defined(JANSEL_ANS11) == true then
            alias ADC_JANSEL_ANS11 is JANSEL_ANS11
         end if
         if defined(JANSEL_ANS12) == true then
            alias ADC_JANSEL_ANS12 is JANSEL_ANS12
         end if
         if defined(JANSEL_ANS13) == true then
            alias ADC_JANSEL_ANS13 is JANSEL_ANS13
         end if
         if defined(JANSEL_ANS14) == true then
            alias ADC_JANSEL_ANS14 is JANSEL_ANS14
         end if
         if defined(JANSEL_ANS15) == true then
            alias ADC_JANSEL_ANS15 is JANSEL_ANS15
         end if
         if defined(JANSEL_ANS16) == true then
            alias ADC_JANSEL_ANS16 is JANSEL_ANS16
         end if
         if defined(JANSEL_ANS17) == true then
            alias ADC_JANSEL_ANS17 is JANSEL_ANS17
         end if
         if defined(JANSEL_ANS18) == true then
            alias ADC_JANSEL_ANS18 is JANSEL_ANS18
         end if
         if defined(JANSEL_ANS19) == true then
            alias ADC_JANSEL_ANS19 is JANSEL_ANS19
         end if
         if defined(JANSEL_ANS20) == true then
            alias ADC_JANSEL_ANS20 is JANSEL_ANS20
         end if
         if defined(JANSEL_ANS21) == true then
            alias ADC_JANSEL_ANS21 is JANSEL_ANS21
         end if
         if defined(JANSEL_ANS22) == true then
            alias ADC_JANSEL_ANS22 is JANSEL_ANS22
         end if
   end if

   -- Configure a pin to act as an analog pin.
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_analog_pin(7) will set this pin as analog
   --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   procedure set_analog_pin(byte in an_pin_num) is
      if defined(ADC_JANSEL_ANS0) == true then
         if an_pin_num == 0 then
            ADC_JANSEL_ANS0 = true
            pin_AN0_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS1) == true then
         if an_pin_num == 1 then
            ADC_JANSEL_ANS1 = true
            pin_AN1_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS2) == true then
         if an_pin_num == 2 then
            ADC_JANSEL_ANS2 = true
            pin_AN2_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS3) == true then
         if an_pin_num == 3 then
            ADC_JANSEL_ANS3 = true
            pin_AN3_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS4) == true then
         if an_pin_num == 4 then
            ADC_JANSEL_ANS4 = true
            pin_AN4_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS5) == true then
         if an_pin_num == 5 then
            ADC_JANSEL_ANS5 = true
            pin_AN5_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS6) == true then
         if an_pin_num == 6 then
            ADC_JANSEL_ANS6 = true
            pin_AN6_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS7) == true then
         if an_pin_num == 7 then
            ADC_JANSEL_ANS7 = true
            pin_AN7_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS8) == true then
         if an_pin_num == 8 then
            ADC_JANSEL_ANS8 = true
            pin_AN8_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS9) == true then
         if an_pin_num == 9 then
            ADC_JANSEL_ANS9 = true
            pin_AN9_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS10) == true then
         if an_pin_num == 10 then
            ADC_JANSEL_ANS10 = true
            pin_AN10_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS11) == true then
         if an_pin_num == 11 then
            ADC_JANSEL_ANS11 = true
            pin_AN11_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS12) == true then
         if an_pin_num == 12 then
            ADC_JANSEL_ANS12 = true
            pin_AN12_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS13) == true then
         if an_pin_num == 13 then
            ADC_JANSEL_ANS13 = true
            pin_AN13_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS14) == true then
         if an_pin_num == 14 then
            ADC_JANSEL_ANS14 = true
            pin_AN14_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS15) == true then
         if an_pin_num == 15 then
            ADC_JANSEL_ANS15 = true
            pin_AN15_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS16) == true then
         if an_pin_num == 16 then
            ADC_JANSEL_ANS16 = true
            pin_AN16_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS17) == true then
         if an_pin_num == 17 then
            ADC_JANSEL_ANS17 = true
            pin_AN17_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS18) == true then
         if an_pin_num == 18 then
            ADC_JANSEL_ANS18 = true
            pin_AN18_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS19) == true then
         if an_pin_num == 19 then
            ADC_JANSEL_ANS19 = true
            pin_AN19_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS20) == true then
         if an_pin_num == 20 then
            ADC_JANSEL_ANS20 = true
            pin_AN20_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS21) == true then
         if an_pin_num == 21 then
            ADC_JANSEL_ANS21 = true
            pin_AN21_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS22) == true then
         if an_pin_num == 22 then
            ADC_JANSEL_ANS22 = true
            pin_AN22_direction = input
         end if
      end if
      if defined(ADC_JANSEL_ANS0) == false & defined(ADC_JANSEL_ANS1) == false & defined(ADC_JANSEL_ANS2) == false & defined(ADC_JANSEL_ANS3) == false & defined(ADC_JANSEL_ANS4) == false & defined(ADC_JANSEL_ANS5) == false & defined(ADC_JANSEL_ANS6) == false & defined(ADC_JANSEL_ANS7) == false & defined(ADC_JANSEL_ANS8) == false & defined(ADC_JANSEL_ANS9) == false & defined(ADC_JANSEL_ANS10) == false & defined(ADC_JANSEL_ANS11) == false & defined(ADC_JANSEL_ANS12) == false & defined(ADC_JANSEL_ANS13) == false & defined(ADC_JANSEL_ANS14) == false & defined(ADC_JANSEL_ANS15) == false & defined(ADC_JANSEL_ANS16) == false & defined(ADC_JANSEL_ANS17) == false & defined(ADC_JANSEL_ANS18) == false & defined(ADC_JANSEL_ANS19) == false & defined(ADC_JANSEL_ANS20) == false & defined(ADC_JANSEL_ANS21) == false & defined(ADC_JANSEL_ANS22) == false then
         _error "\n\tUnable to configure ADC channels.\n\tConfiguration is supposed to be done using ANS bits\n\tbut it seems there's no ANS bits for this PIC.\n\tMaybe your PIC isn't supported, please report !"
      end if
   end procedure

   -- Configure a pin to act as an digital pin.
   -- Because setting a pin to act as digital makes only sens for
   -- pins which can also be configured as analog,
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_digital_pin(7) will set this pin as digital
   --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   -- 
   -- Note: the pin direction is not modified
   procedure set_digital_pin(byte in an_pin_num) is
      if defined(ADC_JANSEL_ANS0) == true then
         if an_pin_num == 0 then
            ADC_JANSEL_ANS0 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS1) == true then
         if an_pin_num == 1 then
            ADC_JANSEL_ANS1 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS2) == true then
         if an_pin_num == 2 then
            ADC_JANSEL_ANS2 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS3) == true then
         if an_pin_num == 3 then
            ADC_JANSEL_ANS3 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS4) == true then
         if an_pin_num == 4 then
            ADC_JANSEL_ANS4 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS5) == true then
         if an_pin_num == 5 then
            ADC_JANSEL_ANS5 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS6) == true then
         if an_pin_num == 6 then
            ADC_JANSEL_ANS6 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS7) == true then
         if an_pin_num == 7 then
            ADC_JANSEL_ANS7 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS8) == true then
         if an_pin_num == 8 then
            ADC_JANSEL_ANS8 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS9) == true then
         if an_pin_num == 9 then
            ADC_JANSEL_ANS9 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS10) == true then
         if an_pin_num == 10 then
            ADC_JANSEL_ANS10 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS11) == true then
         if an_pin_num == 11 then
            ADC_JANSEL_ANS11 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS12) == true then
         if an_pin_num == 12 then
            ADC_JANSEL_ANS12 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS13) == true then
         if an_pin_num == 13 then
            ADC_JANSEL_ANS13 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS14) == true then
         if an_pin_num == 14 then
            ADC_JANSEL_ANS14 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS15) == true then
         if an_pin_num == 15 then
            ADC_JANSEL_ANS15 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS16) == true then
         if an_pin_num == 16 then
            ADC_JANSEL_ANS16 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS17) == true then
         if an_pin_num == 17 then
            ADC_JANSEL_ANS17 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS18) == true then
         if an_pin_num == 18 then
            ADC_JANSEL_ANS18 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS19) == true then
         if an_pin_num == 19 then
            ADC_JANSEL_ANS19 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS20) == true then
         if an_pin_num == 20 then
            ADC_JANSEL_ANS20 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS21) == true then
         if an_pin_num == 21 then
            ADC_JANSEL_ANS21 = false
         end if
      end if
      if defined(ADC_JANSEL_ANS22) == true then
         if an_pin_num == 22 then
            ADC_JANSEL_ANS22 = false
         end if
      end if
   end procedure

   -- Because there are many different combinations when specifying the number of
   -- wanted adc channles, because I think it's more user-friendly to use 
   -- set_analog_pin() instead of specifying ADC_NCHANNEL and then always wondering
   -- which ADC pin to use, and finally, because I'm lazy, there won't be automatic
   -- ADC_NCHANNEL settings in this case
   if defined(ADC_NCHANNEL) == true then
      _error "You can't specify the number of ADC channel with ADC_NCHANNEL, you have to use set_analog_pin(...)"
   end if



   if defined(ADCON0_VCFG) == true | defined(ADCON1_VCFG) then
      adc_vcfg()
   elsif defined(ADCON1_ADREF) == true then
      adc_adref()
   end if




end if

