-- Title: USB I2C master exampled
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4j
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This application acts a USB controlled I2C master device
--
-- Sources: http://www.usb.org for USB specifications
--
-- Notes: compiled with following flags
--	-loader18 -no-fuse -no-variable-reuse
--
-- ------------------------------------------------------
-- ------------------------------------------------------
--

include board_18f14k50_usb_af


-- const bit USB_SERIAL_DEBUG = false

include delay
include usb_serial
include print

-- constants
const  byte str_welcome[] = "USB-I2C Master v0.01b\r\n"
const byte str_test_i2c[] = "Start test i2c\r\n"
const byte str_done[] = "done\n"

var byte target_address = 0x00

-- variables
var word i = 0



-- i2c setup
var word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)


; include i2c_software
include i2c_hardware

i2c_initialize()

-- ---------------

var byte i2c_tx_buffer[80]
var byte i2c_rx_buffer[80] at i2c_tx_buffer

include i2c_level1

-- interrupts? No thanks
while INTCON_GIE loop
    INTCON_GIE = false
end loop


-- setup the USB serial library
usb_serial_init()

var bit has_shown_welcome_msg = true
var byte ch

function ascii_nibble_to_hex( byte in data ) return byte is
    --pragma inline
    var byte return_value = 0x00
    
    if data >= "A" then
        if data >= "a" then
            return_value = data - ( "a" - 10 )
        else
            return_value = data - ( "A" - 10 )
        end if
    else
        return_value = data - "0"
    end if
    
    --	return return_value & 0x0f
    return return_value
    
end function

function ascii2_to_hex( byte in nibbles[2]) return byte is
    return ( ascii_nibble_to_hex( nibbles[0] ) << 4 ) + ascii_nibble_to_hex( nibbles[1] )
end function


-- this will be the slave address. It looks like:
--     0b_0101_1100
-- => 0b_0101_110   : 7-bits address
-- =>            0  : 8th bit is to specify read or write operation.
--                    Value can be anything, it does not matter while init
const byte SLAVE_ADDRESS = 0xA0
--i2c_hw_slave_init(SLAVE_ADDRESS)


-- simulated memory
var volatile byte memory[32];
var volatile word address_pointer = 0;

procedure usage() is
	const byte ustr1[] = "Supported comamnds\r\n"
	const byte ustr2[] = "=============================================================================\r\n"
	const byte ustr3[] = "bAAt0RB       : receive_byteaddr; I2C address AA, send t0, receive RB bytes\r\n"
	const byte ustr4[] = "wAAt0t1RB     : receive_wordaddr; I2C address AA, send t0 & t1, receive RB bytes\r\n"
	const byte ustr5[] = "xAATBto..tnRB : send receive; I2C address AA, send TB bytes, data (t0..tn), receive RB bytes\r\n"
	const byte ustr6[] = "s : bus scan\r\n"
	const byte ustr7[] = "t : eeprom test routine (read first 3 bytes, increment 3rd byte by one\r\n"
	const byte ustr8[] = "? : show usage information\r\n"
	const byte ustr9[] = "Examples:\r\n"
	const byte ustr10[]= "bA0FF. send one byte (FF) to I2C address A0, no bytes received\r\n"
	const byte ustr11[]= "wA6000108. send word address (0001) to I2C address A6, receive 08 bytes\r\n"
	const byte ustr12[]= "xA404BABEFACE0A. send 4 bytes (BABEFACE) to I2C address A4, receive 10 bytes\r\n"
	print_string( usb_serial_data, ustr1 )
	print_string( usb_serial_data, ustr2 )
	print_string( usb_serial_data, ustr3 )
	print_string( usb_serial_data, ustr4 )
	print_string( usb_serial_data, ustr5 )
	print_string( usb_serial_data, ustr6 )
	print_string( usb_serial_data, ustr7 )
	print_string( usb_serial_data, ustr8 )
	print_string( usb_serial_data, ustr9 )
	print_string( usb_serial_data, ustr10 )
	print_string( usb_serial_data, ustr11 )
	print_string( usb_serial_data, ustr12 )
end procedure

procedure scan_i2c_bus() is
    
	const byte str_scan[] = "Scanning i2c bus\r\n"
	var byte idx
	var bit device_found = false

	print_string( usb_serial_data, str_scan )
    
	 for 127  using idx loop
		  
		var byte address = idx << 1
		var byte r
		var byte w

		w = i2c_send_receive(address, 0, 0)

		address = address + 1
		r = i2c_send_receive(address, 0, 0)
		  
		if ( ( r | w ) == true ) then
			device_found = true
			print_byte_hex( usb_serial_data, idx << 1 )

			if ( r == true )  then
				const byte str_write[] = " write"
				print_string( usb_serial_data, str_write )
			end if
			if ( r == true )  then
				const byte str_read[] = " read"
				print_string( usb_serial_data, str_read )
			end if
			print_crlf( usb_serial_data )
		end if
	 end loop
	 
	 if device_found == false then
		const byte str_no_device[] = "no device found\r\n"
		print_string( usb_serial_data, str_no_device )
	 end if
    
end procedure

procedure scan_i2c_bus_1() is
    
    const byte str_scan[] = "Scanning i2c bus\r\n"
    var byte idx
    var bit device_found = false
    
    print_string( usb_serial_data, str_scan )
    
    for 230  using idx loop
        
		var byte address = idx + 10
		var byte w

		const byte str_write[] = " scanning "

		print_string( usb_serial_data, str_write )
		print_byte_hex( usb_serial_data, address )

		usb_serial_flush()

		w = i2c_send_receive(address, 0, 0)

		usb_serial_data = " " 
		print_bit_logic( usb_serial_data, w )
		print_crlf( usb_serial_data )
		usb_serial_flush()

		delay_1ms( 10 )
        
    end loop
    
end procedure

procedure access_a0( bit in read_write) is
    
    const byte str_scan[] = "READ A0 bus\n"
    var byte idx
    var bit device_found = false
    
    print_string( usb_serial_data, str_scan )
    
    var byte address = 0xA0
    var byte w
    
    if (read_write ) then
        address = address + 1
    end if
    
    const byte str_write[] = " scanning "
    
    print_string( usb_serial_data, str_write )
    print_byte_hex( usb_serial_data, address )
    
    usb_serial_flush()
    
    i2c_start()
    w = i2c_transmit_byte( address )
    delay_1ms(1)
    i2c_stop()
    
    print_bit_logic( usb_serial_data, w )
    usb_serial_flush()
    
    
end procedure



procedure test_i2c() is
    var bit r
    var byte i
    
    -- same as above
    r = i2c_receive_wordaddr(0xA0, 0x0000, 3)
    
    print_bit_logic(usb_serial_data, r)
    usb_serial_data = " "
    
    print_byte_hex(usb_serial_data, i2c_rx_buffer[0]);
    usb_serial_data = " "
    print_byte_hex(usb_serial_data, i2c_rx_buffer[1]);
    usb_serial_data = " "
    print_byte_hex(usb_serial_data, i2c_rx_buffer[2]);
    usb_serial_data = " "
    
    -- write part (increment 3rd byte at 0x0002)
    i2c_tx_buffer[0] = 0  -- high byte address within i2c eeprom
    i2c_tx_buffer[1] = 2  -- low byte address within i2c eeprom
    i2c_tx_buffer[2] = i2c_rx_buffer[2] + 1  -- data
    r = i2c_send_receive(0xA0, 3, 0)
    print_bit_logic(usb_serial_data, r)
    usb_serial_data = " "
    
    print_crlf(usb_serial_data)
    
end procedure

var byte msg_state = 0
var byte hex_nibbles[2]

const byte ARG_BUFFER_SIZE = 0x40
var byte arg_buffer[ ARG_BUFFER_SIZE ]
var byte arg_buffer_idx = 0

const byte COMMAND_IDLE       = 0x3F ; "?"
const byte COMMAND_READ       = 0x72 ; "r"
const byte COMMAND_WRITE      = 0x77 ; "w"
const byte COMMAND_EXCHANGE   = 0x78 ; "x"

var byte command = COMMAND_IDLE
var byte nibble_low
var byte nibble_high
var byte nibble

-- read command
-- r

function parse_digit( byte in ch ) return byte is
    var byte nibble = 0xFF
    
    if ch >= "0" then
        if ch <= "9" then
            nibble = ch - "0"
        else
            if ch >= "A" then
                if ch <= "F" then
                    nibble = ch - "A" + 10
                else
                    if ch >= "a" then
                        if ch <= "f" then
                            nibble = ch - "a" + 10
                        end if
                    end if
                end if
            end if
        end if
    end if
    return nibble
end function

procedure handle_response( bit in is_ok) is
    usb_serial_data = "<"
    --usb_serial_data = command
    if !is_ok then
        usb_serial_data = "N"
        usb_serial_data = "O"
        usb_serial_data = "K"
        print_crlf( usb_serial_data )
    else
        usb_serial_data = "O"
        usb_serial_data = "K"
        usb_serial_data = ">"
        usb_serial_data = " "
    end if
    
    command = COMMAND_IDLE
    msg_state = 0x00
end procedure

procedure handle_command() is
    const byte str1[] = " Execute "
    print_string( usb_serial_data, str1 )
    usb_serial_data = command
    usb_serial_data = " "
    var byte idx
    for arg_buffer_idx using idx loop
        print_byte_hex( usb_serial_data, arg_buffer[ idx ] )
        usb_serial_data = ","
    end loop
    
    case command of
		COMMAND_READ:
			block
			var bit r
			var byte i
			var byte device at arg_buffer[ 0 ]
			var byte num_bytes at arg_buffer[ 3 ]
			var word word_addr
			var byte bt_word_addr[2] at word_addr
			bt_word_addr[0] = arg_buffer[ 2 ]
			bt_word_addr[1] = arg_buffer[ 1 ]
			-- same as above
			r = i2c_receive_wordaddr( device, word_addr, num_bytes)
			
			usb_serial_data = "@"
			print_byte_hex( usb_serial_data, num_bytes)
			usb_serial_data = "@"

			usb_serial_data = " "
			print_bit_logic(usb_serial_data, r)
			usb_serial_data = "="
			
			handle_response( r )
			
			for num_bytes using idx loop
				print_byte_hex(usb_serial_data, i2c_rx_buffer[idx])
				usb_serial_data = " "
			end loop
			print_crlf( usb_serial_data )
			
		end block
		COMMAND_EXCHANGE:
			block
			var bit r
			var byte i
			var byte device at arg_buffer[ 0 ]
			var byte num_bytes_tx at arg_buffer[ 1 ]

			i = 2
			for num_bytes_tx using idx loop
				i2c_rx_buffer[idx] = arg_buffer[ i ]
				i = i + 1
			end loop
			
			var byte num_bytes_rx 
			num_bytes_rx  =  arg_buffer[ i ]
			i = i + 1
			
			-- same as above
			r = i2c_send_receive( device, num_bytes_tx, num_bytes_rx )

			usb_serial_data = " "
			print_bit_logic(usb_serial_data, r)
			usb_serial_data = "="
			
			handle_response( r )
			
			for num_bytes_rx using idx loop
				print_byte_hex(usb_serial_data, i2c_rx_buffer[idx])
				usb_serial_data = " "
			end loop
			print_crlf( usb_serial_data )
			
		end block
		otherwise
		block
			handle_response( false )
		end block
	end case

end procedure

var byte nibbles

-- main loop
forever loop
    -- poll the usb ISR function on a regular base, in order to
    -- serve the USB requests
    usb_serial_flush()
    
    -- check if USB device has been configured by the HOST
    if ( usb_cdc_line_status() !=  0x00 )  then
        if !has_shown_welcome_msg then
            has_shown_welcome_msg = true
            print_string( usb_serial_data, str_welcome )
        end if
    else
        has_shown_welcome_msg = false
    end if
    
    -- check for input character
    if usb_serial_read( ch ) then
        usb_serial_data = ch
        case msg_state of
			0: block
			case ch of
				"U": 
				block
					usb_serial_data = "!"
					test_i2c()
					-- target_address
					
				end block
				"t": 
				block
					usb_serial_data = "!"
					test_i2c()
				end block

				"s": 
				block
					scan_i2c_bus_1()
				end block
				
				"?": 
				block
					usage()
				end block


				"S": 
				block
					scan_i2c_bus()
				end block
				
				"u": 
				block
					test_i2c()
				end block
				
				
				"a": block
					access_a0( 0 )
				end block
				"b": block
					access_a0( 1 )
				end block
				27: block

				end block
				10,13: block

				end block

				COMMAND_READ,
				COMMAND_EXCHANGE,
				COMMAND_WRITE: block
					nibbles = 0
					msg_state = 1
					arg_buffer_idx = 0
					command = ch
				end block

				otherwise
				block
					const byte str1[] = " Unknown command\r\n"
					usb_serial_data = ch
					print_string( usb_serial_data, str1 )
				end block
			end case
		end block
		
		
		1: block
			if ( ( ch ==  "." ) | ( ch ==  10 ) | ( ch ==  13 ) )  then
				handle_command()
			else
				nibble_high =  parse_digit( ch )
				if nibble_high < 0x10 then
					msg_state = 2
				else
					handle_response( false )
				end if
			end if
		end block


		2: block
			nibble_low =  parse_digit( ch )
			if nibble_high < 0x10 then
				var byte nibble = ( nibble_high << 4 ) + nibble_low
				msg_state = 1
				--if nibbles == 0 then
				--	i2c_device = nibble
				--else
				arg_buffer[ arg_buffer_idx ] = nibble
				arg_buffer_idx = arg_buffer_idx + 1
				--end if
				nibbles = nibbles + 1
			else
				handle_response( false )
			end if
		end block
	end case

end if

end loop
