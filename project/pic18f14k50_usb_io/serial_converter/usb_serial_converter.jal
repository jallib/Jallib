-- -----------------------------------------------------------------------------
-- Title: demo of usb_serial library
-- Author: Albert Faber, Copyright (c) 2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4j
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: This application demonstratesest USB Serial library, this application 
-- is a RS-232 converter for the PIC18f14k50 USB IO Board. Once the USB device has been 
-- detected by the  host operating system, it will create a virtual COM port. You should
-- be able to open this (virtual) COM port  on the host computer, using a standard terminal 
-- application. Connect the RS-232 output to a computer with a regular RS-232 port (can be
-- the same computer though) and open also this COM port with a terminal application. 
-- When typing character in one terminal it should end up in the other terminal application.
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: compiled with following flags
-- -loader18 -no-fuse  ; when the microchip 18f bootloader is present
-- add -no-variable-reuse when debugging flags are set due to a compiler issue
-- -
-- Some instructions for use:
-- -
-- 1. Make sure you logon as administrator, or with administrator privileges,
--    on Windows XP.
-- 2. If needed convert to the correct PIC device (change include file), 
--    adapt fuses fuses and speed
-- 3. Create a basic board with USB PIC device
-- 4. Compile the this file and program the hex file into the PIC.
-- 5. After a (short) while you'll get the "new hardware found" message for
--    "JALLIB Serial". Point Windows manually to the driver in the
--    driver directory xp_drivers The drivers can be found at:
--    http://groups.google.com/group/jallib/ (usb_cdc_drivers_winxp32.zip)
--    Ignore the warning that this driver doesn't have a certificate. 
--    Wait for the installation to complete.
-- 6. Open the Windows Device Manager and check out the "ports" section. A new
--    communications port will be there, with a COM number.
-- 7. Open a terminal program (for example HyperTerminal) and select the COM
--    port you found in the previous step. Pick any baudrate, Windows will
--    accommodate automatically, and use 8-N-1-no for the other settings.
-- 8. Observe input/output of RS-232 COM port of the USB IO board with another terminal
--    application
-- 9. Have fun, adapt to your needs
--
-- ------------------------------------------------------
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
-- fuses
pragma target CPUDIV		NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV		USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK__NO_DIVIDE
pragma target OSC			HS
pragma target PLLEN			OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target BROWNOUT		DISABLED	-- no brownout detection
pragma target VOLTAGE		V30			-- brown out voltage
pragma target WDT			DISABLED    -- no watchdog
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target MCLR			EXTERNAL	-- no master reset
pragma target LVP			DISABLED    -- no low-voltage programming
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CPB			DISABLED	-- bootblock code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected    
pragma target HFOFST 		THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE


-- forward procedure declaration
procedure usb_cdc_line_coding_changed_callback()

include delay
include usb_serial
include print

procedure  _serial_receive_interrupt_handler() is
	pragma interrupt
	
	
	if  (PIR1_RCIF == TRUE)  then                -- UART receive interrupt

      if ((RCSTA_OERR == TRUE) | (RCSTA_FERR == TRUE)) then  -- frame/overr error
         var byte x = RCREG                              -- flush hardware buffer
         while RCSTA_OERR == TRUE loop          -- overrun state
            RCSTA_CREN = FALSE                  -- disable UART
            RCSTA_CREN = TRUE                   -- re-enable UART
            x = RCREG                           -- \  flush hardware buffers
            x = RCREG                           -- /
         end loop                               -- until no more overrun

		else                                      -- data without errors
			var byte ch = RCREG 
			-- usb_serial_data  = RCREG
			usb_cdc_putc( ch )
		end if
	end if
end procedure

procedure change_baudrate( dword in baud_rate) is	

	-- compiler issue with -const-detect
	if true then
		var dword fosc_div4 = dword( target_clock ) / 4
	else
		var dword fosc_div4
		fosc_div4 = dword( target_clock )
		fosc_div4 = fosc_div4 / 4	
	end if
	
	var dword div_factor = fosc_div4 / baud_rate - 1
	var word  div_wfactor = word( div_factor )
	var byte  div_btfactor[2] at div_wfactor
	 
	TXSTA_BRGH = true
	BAUDCON_BRG16 = true
	
	SPBRGH = div_btfactor[1]
	SPBRG  = div_btfactor[0]

end procedure


-- Initializes the serial port, calculates baudrate registers.
procedure serial_hw_init() is 
	RCSTA                  = 0b0000_0000         -- reset
	RCSTA_SPEN             = enabled             -- serial port enable
	RCSTA_CREN             = enabled             -- continuous receive enable

	TXSTA                  = 0b0000_0100         -- reset (16 bit, asyn)
	TXSTA_TXEN             = enabled             -- UART transmit enabled
	--	TXSTA_SYNC = true
	TXSTA_BRGH = true
	BAUDCON_BRG16 = true

	PIE1_RCIE              = enabled             -- UART receive int. enable
												-- (PIE1_TXIE dynamically)
	INTCON_PEIE            = enabled             -- periferal
	INTCON_GIE             = enabled             -- general
end procedure


procedure usb_cdc_line_coding_changed_callback() is

	if ( cdc_line_coding_dte_rate > 115200 ) then
		cdc_line_coding_dte_rate = 115200
	end if
	change_baudrate( cdc_line_coding_dte_rate )
	serial_hw_init()
end procedure

-- disable analog
enable_digital_io()


-- setup the USB serial library
usb_serial_init()

var byte ch

-- main loop
forever loop
	-- poll the usb ISR function on a regular base, in order to 
	-- serve the USB requests
	usb_serial_flush()
    
    -- check if USB device has been configured by the HOST
	if ( usb_cdc_line_status() !=  0x00 )  then

		-- check for input character
		while usb_serial_read( ch ) loop
			-- echo input character
			TXREG = ch			
			while ! PIR1_TXIF loop end loop
		end loop

	end if
end loop
