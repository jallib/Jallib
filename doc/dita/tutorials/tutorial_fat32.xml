<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" []>
<topic id="template_id">
  <title>FAT32 File System</title>
  <prolog>
    <author>Matthew Schinkel</author>
    <publisher>Jallib Group</publisher>
    <metadata>
      <category/>
      <prodinfo>
        <prodname>Jallib</prodname>
        <vrmlist>
          <vrm version="0.0"/>
        </vrmlist>
      </prodinfo>
    </metadata>
  </prolog>
  <body>
    <section>
      <title>FAT32 Intro</title>
      <p>If you made it here, you either have or are thinking about putting some storage device into your project. Of course you may want to use FAT32 or some type of file system if you are using a device such as a SD card or hard disk with a huge amount of storage space. You could read or write directly to your storage device if you wanted wish, so why use a file system such as FAT32? It is an easy way to manage data and to access data via a PC, it is user friendly for building your product and also good for users of your product.</p>
      <p>Fat32 can be read by the most popular operating systems. Of course, FAT32 is a Microsoft product used in Windows, but Linux and MAC OS can also read FAT32. Jallib also has Minix V2 file system available.</p>
    </section>
    <section>
      <title>Before you start &amp; Requirements</title>
      <p>Before you get started, there are a few things you need to know about the current Jallib FAT32 libraries. You will need to choose a library based on your project requirements. Be sure to choose a PIC that will suit your needs. I suggest PIC 18f4620 since it has loads of RAM  &amp; program memory. There are 2 FAT32 libraries to choose from. Here&apos;s a list of features the libraries currently have:</p>
      <p><table frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Features</entry>
                <entry>FAT32</entry>
                <entry>FAT32 SMALL</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>RAM (Minimum)</entry>
                <entry>1500 bytes</entry>
                <entry>256 bytes</entry>
              </row>
              <row>
                <entry>Program Memory (Minimum)</entry>
                <entry>20k</entry>
                <entry>5k</entry>
              </row>
              <row>
                <entry>Max Files:</entry>
                <entry>Dependant on RAM available (Can use external memory)</entry>
                <entry>1</entry>
              </row>
              <row>
                <entry>List files</entry>
                <entry>YES</entry>
                <entry>YES</entry>
              </row>
              <row>
                <entry>Create files</entry>
                <entry>YES</entry>
                <entry>NO</entry>
              </row>
              <row>
                <entry>Read &amp; Write to files</entry>
                <entry>YES</entry>
                <entry>YES</entry>
              </row>
              <row>
                <entry>Read long file names</entry>
                <entry>YES</entry>
                <entry>YES</entry>
              </row>
              <row>
                <entry>Write long file names</entry>
                <entry>NO</entry>
                <entry>NO</entry>
              </row>
              <row>
                <entry>Max Partitions</entry>
                <entry>4 primary, 0 extended</entry>
                <entry>1 primary</entry>
              </row>
              <row>
                <entry>Read/Write fragmented files &amp; directories</entry>
                <entry>YES</entry>
                <entry>NO</entry>
              </row>
              <row>
                <entry>Max file fragments</entry>
                <entry>Dependant on RAM available (Can use external memory)</entry>
                <entry>1</entry>
              </row>
              <row>
                <entry>Max directory fragments</entry>
                <entry>Dependant on RAM available (Can use external memory)</entry>
                <entry>1</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <p>This tutorial will concentrate on the normal FAT32 library. There will be a separate tutorial for FAT32 SMALL whenever I find time!</p>
      <note>Always get the newest library and sample. I suggest you download the newest Jallib Bee package from <xref href="http://justanotherlanguage.org/downloads" format="html" scope="external">http://justanotherlanguage.org/downloads</xref></note>
    </section>
    <p><b>Choose a storage device</b></p>
    <p>SD cards - SD cards are popular thanks to their small size. They are quite easy to connect to your circuit. The hookup will cost you 4 PIC pins via SPI port. They are slower then hard disks due to serial data transfer via SPI port. Most SD Cards also have an endurance of 100,000 write cycles. They run on 3.3v.</p>
    <p>Hard Disk - Hard drives are fast but large. The main sizes of hard disks are 3.5&quot;, 2.5&quot; and 1.8&quot;. Connecting them to your circuit is simple, but will require 21 pins. I did actually fit sd card + hard disk in one circuit on 18f4620. Hard drives have an unlimited number of write cycles. They run at 5v TTL levels, but will accept 3.3v on it&apos;s inputs. You can run your PIC at 3.3v or 5v.</p>
    <p><b>Suggested Tutorials</b></p>
    <p><ol>
        <li>
          <xref href="tutorial_getting_started.xml">Getting Started</xref>
        </li>
        <li>
          <xref href="tutorial_blink_a_led.xml">Blink a led</xref>
        </li>
        <li>
          <xref href="tutorial_serial_communication.xml">Serial Communication</xref>
        </li>
        <li><xref href="tutorial_sd_card.xml">SD Card</xref> OR <xref href="tutorial_pata_hard_disk.xml">PATA Hard DIsk</xref></li>
        <li>
          <xref href="tutorial_spi_sram_23k256.xml">23k256</xref>
        </li>
      </ol></p>
    <section>
      <title>Benefits of ICSP</title>
      <p><ol>
          <li>You may program your PIC while it is in your breadboard circuit</li>
          <li>You may program your PIC while it is on a soldered circuit board</li>
          <li>You will save time programming so you can write more code faster</li>
          <li>You can reset your circuit from your PC</li>
          <li>You can program surface mount PIC&apos;s that are on soldered circuit board</li>
          <li>You won&apos;t bend or break any pins</li>
          <li>You won&apos;t damage your PIC by placing it in your breadboard wrong</li>
          <li>With a remote desktop software like VNC, you can program your PIC from anywhere around the world. </li>
          <li>I can program my PIC in my living room on my laptop while I watch tv with my wife! (I keep my mess in my office)</li>
        </ol></p>
    </section>
    <section>
      <title>The Schematic</title>
      <p>Your schematic will be the same as either the hard disk or sd card tutorial. If you wish to use external memory, you can add a 23k256. I&apos;ll explain external memory later on. Although the schematics show 16f877, you can replace it with 18f4620. 16F877 is not large enough.</p>
      <image href="images/sd_card_schematic.jpg" width="500" otherprops="clickable"/>
      <image href="images/pata_hard_disk_schematic.jpg" width="500" otherprops="clickable"/>
    </section>
    <section>
      <title>Some Images</title>
    </section>
    <image href="images/sd_card_circuit.jpg" width="500" otherprops="clickable"/>
    <image href="images/pata_hard_disk_large_drive.jpg" width="500"/>
    <section>
      <title>Run a sample</title>
      <p>If you&apos;ve already done a previous sd card or hard disk tutorial, you know you have a working circuit. I suggest you try one of the following samples:</p>
      <p>18f4620_fat32_pata_hard_disk.jal</p>
      <p>18f4620_fat32_sd_card.jal</p>
      <p>Start by formatting your storage device in windows. Then put a few files and a directory on it. In this example I put 4 files and one directory.</p>
      <p>Set your serial port to 115200 baud. If all is good, you should get a directory listing on your serial port software: </p>
      <image href="images/fat32_dir.jpg" width="500" otherprops="clickable"/>
      <p>While we have this sample running, let&apos;s try it out!  </p>
    </section>
    <section>
      <p>Each file is identified by a number. The first one &quot;0&quot; is the volume id. The partition loaded is named &quot;VOL_ID&quot;. You will also see 3 files and one directory. The directory is named &quot;AAAA&quot; (number2). You can identify directories by their attributes &quot;00010000&quot;. </p>
      <p>Now just  send a number via Realterm&apos;s &quot;Send&quot; tab. If you send the number 0, you will list the same root directory again. If you send the number of a file, It&apos;s contents will be displayed. If you send the number of a directory, you will go into that directory and it&apos;s contents will be listed. Here&apos;s what I get when I send the number &quot;1&quot;.</p>
      <p>You will notice some junk at the end of the file. Usually you&apos;ll get a bunch of 0&apos;s. They are there  because fat32 reads &amp; writes in 512 byte chunks, and the file is only 415 bytes long. You can fix your software to stop at the correct byte at the end of the file.</p>
    </section>
    <image href="images/fat32_file.jpg" width="500" otherprops="clickable"/>
    <section>
      <title>The Code</title>
      <p>Alright then, we&apos;re ready to get our hands dirty. Let&apos;s take a look </p>
    </section>
    <p><b>Required Includes</b></p>
    <p>The first part of the sample is just a bunch of includes, I&apos;m not going to cover the first includes to much since they are covered in other tutorials. When we get to the fat32 include, I&apos;ll give more detail.</p>
    <codeblock>-- Title: FAT32 library for reading fat32 filesystem
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: &gt;=2.4k
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this example reads files &amp; folders from a fat32 formatted sd card
--              using the fat32 library.
--
-- Sources:
-- http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
-- http://www.pjrc.com/tech/8051/ide/fat32.html
-- http://en.wikipedia.org/wiki/File_Allocation_Table
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc INTOSC_NOCLKOUT              -- hs crystal or resonator
;pragma target osc hs              -- hs crystal or resonator
;pragma target clock 20_000_000    -- oscillator frequency
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  disabled
pragma target lvp  disabled
pragma target MCLR external        -- reset externally
--;
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = true  -- multiply internal osc by 4
;--
enable_digital_io()                -- make all pins digital I/O
--
_usec_delay(100_000) -- wait for power to settle


include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw


-- setup 23k256 for external memory
-- setup chip select pin
ALIAS sram_23k256_chip_select             is pin_a1
ALIAS sram_23k256_chip_select_direction   is pin_a1_direction
-- initial settings
sram_23k256_chip_select_direction = output    -- chip select/slave select pin
sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
-- initalize 23k256 in byte mode
alias sram_23k256_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
include sram_23k256 -- setup Microchip 23k256 sram
sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode


-- setup the sd card pins
alias sd_chip_select is pin_SS
alias sd_chip_select_direction is pin_SS_direction
sd_chip_select = high
sd_chip_select_direction = output
--
-- setup the sd card library
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
;const bit SD_EXTRA_SPEED = TRUE
const bit SD_ALWAYS_SET_SPI_MODE = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings</codeblock>
    <p><b>Include the FAT32 library</b></p>
    <p>Now for the fat32 include. You will need to modify some of the constants to fit your need. Here&apos;s a long description of each constant so you have some idea of what to use in your project.</p>
    <p>FAT32_WRITE_LONG_FILE_NAMES - Enables writing of long file names. This is not currently implemented. Keep it FALSE for now. </p>
    <p>FAT32_FILES_MAX - The maximum number of files per directory. Each file will take up 2 bytes of ram. You can use external memory for this. I&apos;ll explain more about external memory soon.</p>
    <p>FAT32_FILE_NAME_SIZE - The maximum size of a file name. larger sized file names take more RAM space. If a file name is larger then this constant, some of it&apos;s characters will get cut off during listing of a directory.</p>
    <p>FAT32_DIR_FRAGMENTS_TO_ALLOW - The number of fragments a directory may have. Requires 6 bytes of RAM space per fragment allowed. This will use PIC&apos;s internal memory at the moment. I&apos;ll probably change this so you can use an external memory source.</p>
    <p>FAT32_FILE_FRAGMENTS_TO_ALLOW - The number of fragments a file may have. Requires 8 bytes of RAM space per fragment allowed. This will use PIC&apos;s internal memory at the moment. I&apos;ll probably change this so you can use an external memory source.</p>
    <p>FAT32_ENTRIES_MAX - highest file entry address can be 65535. Changing this is only for advanced users. I&apos;ll have to give a better description of this sometime. Basically each file entry (not file name) is 32 bytes long. FAT32 lib reads all entries and stores important entry locations into RAM. The important entries are entries that are the beginning of a file name. When a file number is called, the library will go to the entry address to read the file name, size, cluster address etc. This way the entire file name list does not need to be stored in RAM. Only the location of the file name gets stored.</p>
    <p>FAT32_USE_INTERNAL_MEMORY - Choose where to store FAT32&apos;s file location table (internal memory or external memory). This is related to FAT32_FILES_MAX. If you have 50 files max, each file will take 2 bytes of ram, so 100 bytes ram. Choose weather you want this 100 bytes of ram to be used internally or on an external memory device. For external memory, I very much suggest external RAM or something fast and with a high endurance (write cycles) like 23k256. This will of course affect the &quot;if&quot; statement that follows this constant. </p>
    <p>Within the FAT32_USE_INTERNAL_MEMORY &quot;if&quot; statement, you will need to define an array named &quot;fat32_entry_location&quot;. This array can be a real array, a large array (through the large array lib) or a pseudo array. If you look in the 23k256 lib, you will see that sram_23k256_word[] is a pseudo (fake) array. For external memory we simply alias a pseudo array &quot;alias fat32_entry_location is sram_23k256_word&quot;</p>
    <p>And of course, here is a sample block for including fat32. You can keep the defaults for now and mess around with them later. I kept the values low to save RAM space.</p>
    <codeblock>-- setup fat32 --
-- include the required files
;include pic_data_eeprom
-- change these vaues to save memory
const bit FAT32_WRITE_LONG_FILE_NAMES = FALSE -- support writing of long file names
const word FAT32_FILES_MAX = 20            -- the max number of files allowed in a directory
const byte FAT32_FILE_NAME_SIZE = 80        -- choose max file_name size. if a file_name is longer the this, beginning chars will be cut. short file_names are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 5     -- uses 6 bytes memory per fragment allowed (0 not allowed)
--                                          -- windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 5    -- uses 8 bytes memory per fragment allowed (0 not allowed)
--
-- experts may change the following values
;const byte FAT32_ENTRIES_MAX = 1           -- highest file entry address can be 256
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535
--
-- choose a memory source for the file list
const bit FAT32_USE_INTERNAL_MEMORY = TRUE -- Use internal memory for file location list
IF FAT32_USE_INTERNAL_MEMORY == TRUE THEN
   -- Setup a large array for storing sector data, This is where file_name locations are stored
   const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
   const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
   include large_array_2                    -- include the array library
   ALIAS fat32_entry_location is large_array_2
elsif FAT32_USE_INTERNAL_MEMORY == FALSE THEN
   -- put your own code here if you wish to allow massive amounts of files per directory

   -- example usage of 23k256 for external memory

   -- alias the 23k256 device word array
   ;alias entry_location is sram_23k256_byte  -- highest file entry address can be 256
   alias fat32_entry_location is sram_23k256_word   -- highest file entry address can be 65535
END IF
--
include fat32   -- include fat32 library -- include fat32</codeblock>
    <p>You may want to filter out some files such as hidden or system files which you may not need in your project.</p>
    <codeblock>-- CHOOSE FILE ATTRIBUTES TO FILTER OUT
fat32_filter_is_read_only  = FALSE
fat32_filter_is_hidden     = FALSE
fat32_filter_is_system     = FALSE
fat32_filter_is_volume_id  = FALSE
fat32_filter_is_directory  = FALSE
fat32_filter_is_archive    = FALSE</codeblock>
    <p><b>The main program</b></p>
    <p>Well then, your ready for the main program. First we have a few inital settings. </p>
    <p>I have created a simple seperator procedure to send a line &quot;-----------&quot; via serial port.</p>
    <codeblock>-- procedure for sending 80 &quot;-----------------&quot; via serial port
procedure separator() is
   serial_data = 13
   serial_data = 10
   const byte str3[] = &quot;--------------------------------------------------------------------------------&quot;
   print_string(serial_data, str3)
   print_crlf(serial_data)
end procedure

-- start of main program
separator()-- send &quot;----&quot;</codeblock>
    <p>We can now initialize the library. The input to fat32_init is the partition number, which will usually be the first (partition 1).</p>
    <codeblock>fat32_init(1) -- initialize fat32, go to 1st primary partition&apos;s root dir &quot;\&quot;</codeblock>
    <p>Now some good coding stuff, let&apos;s print a directory to the serial port. The first dir listing is the root dir. There are some options we can choose for the print dir procedure.</p>
    <p>FAT32_PRINT_LONG_FILE_NAME    - print the file name</p>
    <p>FAT32_PRINT_NUMBER            - print the file number</p>
    <p>FAT32_PRINT_SIZE              - print the file size</p>
    <p>FAT32_PRINT_CLUSTER - print the file&apos;s cluster address</p>
    <p>FAT32_PRINT_TABLE - print a table around everything</p>
    <p>FAT32_PRINT_DATE              - print the file date</p>
    <p>FAT32_PRINT_ATTRIBUTES        - print the files attributes (such as read only, hidden, etc).</p>
    <p>The file attributes are &quot;ADVSHR&quot; (you will see this on your serial port software), and each can be true or false.</p>
    <p>A - Is Archive</p>
    <p>D - Is a directory</p>
    <p>V - Is a volume ID</p>
    <p>S - Is a system file</p>
    <p>H - Is a hidden file</p>
    <p>R - Is read only</p>
    <codeblock>fat32_print_directory(serial_data, FAT32_PRINT_ALL) -- sends dir listing via serial port</codeblock>
    <p>Of course, you could just print one file name at a time instead. This could be useful on an LCD where you can only view a certain number of files at a time, and scrolling is needed.</p>
    <codeblock>-- read 3rd file&apos;s name, location, size, attributes into memory
fat32_read_file_info(3)

-- now send the filename via the serial port (file number and file name)
fat32_print_file_info(serial_data,FAT32_PRINT_NUMBER + FAT32_PRINT_LONG_FILE_NAME)</codeblock>
    <p>Declare some variables we&apos;re going to use, then start our main loop</p>
    <codeblock>var byte data
var dword step1
var word step2
var byte file_number = 0

forever loop
   separator() -- send &quot;-----&quot; then loop and wait for user input</codeblock>
    <p>This example is a user program, so we will wait for the user. The user can send data to the device via serial port to select a file number. So, let&apos;s wait for data.</p>
    <p>Note that the serial software library does not contain a serial_data_available variable.</p>
    <p>When we get data from the user, it will be placed into our variable file_number.</p>
    <codeblock>file_number = serial_data</codeblock>
    <p>Now we can either check the file&apos;s attributes to see if it is a file or directory (see fat32_file_attrib in fat32.jal), or we can simply try to go into the directory. If we fail to go into the directory, it must be a file.</p>
    <p>If we do go into the directory, we will print the new directory to the screen.</p>
    <codeblock>   -- choose a file for reading or dir for opening
   if fat32_cd(file_number) then             -- if change directory is successful
      fat32_print_directory(serial_data, FAT32_PRINT_ALL) -- print dir listing
</codeblock>
    <p>Otherwise (if it is not a directory), we will open the file.</p>
    <codeblock>   elsif fat32_file_open(file_number) then   -- if go into file is successful</codeblock>
    <p><b>Calculate the number of sectors in a file</b></p>
    <p>The fastest way to read files is by reading them sector by sector. We&apos;ll need to calculate how many sectors are in the file so we can use a for loop later on.</p>
    <codeblock>      -- calculate number of sectors in file
      var dword sectors_available
      if (fat32_file_size) == (fat32_file_size / 512) * 512 then
         sectors_available = (fat32_file_size / 512)
      else
         sectors_available = (fat32_file_size / 512) + 1
      end if</codeblock>
    <p><b>Reading &amp; writing</b></p>
    <p>While writing the FAT32 library, I wanted to give some different ways for the code writer to read &amp; write to a file.</p>
    <ol>
      <li>Read any byte from a file at any address.<ol>
          <li> fat32_read_file_byte_address(address) - function that returns a byte from any byte address in the file.</li>
        </ol></li>
      <li>A faster way to read byte by byte. Still slower then sector reads. It is not so user friendly since you must call a few procedures. Only reads starting at the beginning of a file. If you are using an sd card and have other SPI devices connected, do not use them until you do stop_file_read.<ol>
          <li>fat32_start_file_read() - start reading a file from the beginning</li>
          <li>fat32_read_file_byte() - read one byte</li>
          <li>fat32_stop_file_read - stop reading</li>
        </ol></li>
      <li>A very fast &amp; user friendly way to read and write to a file at any sector address of the file. <ol>
          <li>fat32_sector_buffer[] - a 512 byte array that stores data to be read or written</li>
          <li>fat32_read_file_sector_number(address) - Call this to read data into the buffer from any address.</li>
          <li>fat32_write_file_sector_number(address) - Call this to write sector buffer to media at any address.</li>
        </ol></li>
      <li>The fast way to read and write to a file. A little bit faster then #3. Not as user friendly. You must start reading or writing at the beginning of the file. Read and write sector by sector by filling fat32_sector_buffer[]<ol>
          <li>fat32_sector_buffer[] - a 512 byte array that stores data to be read or written</li>
          <li>fat32_start_file_write() - start writing to a file, starting at the beginning of the file.</li>
          <li>fat32_stop_file_write() - stop writing to a file</li>
          <li>fat32_start_file_read() - start reading from a file, starting at the beginning of the file.</li>
          <li>fat32_stop_file_read() - stop reading from a file</li>
        </ol></li>
    </ol>
    <p>Well, as you can see you have a lot of options. Our sample uses #3 (fast and user friendly). It really depends on your application. If you are recording sound, you may want #4 since you&apos;ll be starting at the beginning of the file. If you are jumping around in the file, you may want #3. Of course #3 would be perfectly sufficient for recording sound. You&apos;ll just have to try them out!</p>
    <p>I&apos;ll give a bit more explanation of #3. You will obviously either read from the storage device or write to the storage device.</p>
    <p>For writing, you will first fill the sector buffer with data, then when you call fat32_write_file_sector_number(address), the library will transfer the data from the buffer onto the storage device.</p>
    <codeblock>      -- EXAMPLE 3 WRITE (fast and user friendly)
      -- Read from any sector number in the file, in any order you wish.
      for sectors_available using step1 loop

         -- set the data to be written
         for 512 using step2 loop
            fat32_sector_buffer[step2] = &quot;E&quot;
         end loop

         -- write one sector to the disk
         fat32_write_file_sector_number(step1)
      end loop</codeblock>
    <p>For reading, you will first choose the sector to read from, then call  fat32_read_file_sector_number(address), the library will transfer data from the storage device into the sector buffer. After the data is in the sector buffer array, you can do what you like with it.</p>
    <codeblock>      -- EXAMPLE 3 READ (fast and user friendly)
      -- Read from any sector number in the file, in any order you wish.
      for sectors_available using step1 loop
         -- read one sector from the disk
         fat32_read_file_sector_number(step1)
         -- send the sector via serial port
         for 512 using step2 loop
            serial_data = fat32_sector_buffer[step2]
         end loop
      end loop</codeblock>
    <p>Well, that was awsome, let&apos;s wrap this up! You should close the file when your done with it, just to ensure your storage device goes ready. On a hard disk, you will see the disk LED go off.</p>
    <codeblock>      fat32_file_close()
   end if
end loop</codeblock>
    <p>What&apos;s that now? You want to see an example of this working? I guess it&apos;s time for a Youtube Video! You can see me easily moving around in files &amp; directories, and even transferring an MP3 to my PC via Realterm!</p>
    <p><xref href="http://www.youtube.com/watch?v=ar7DkTPriNk" format="html" scope="external">http://www.youtube.com/watch?v=ar7DkTPriNk</xref></p>
    <p>Have fun!</p>
  </body>
</topic>
