<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="sram_23k256">
  <title>SPI Introduction</title>

  <prolog>
    <author>Matthew Schinkel</author>

    <publisher>Jallib Group</publisher>
  </prolog>

  <body>
    <p id="firstcontent">Introduction to SPI - Serial Peripheral interface</p>

    <section><title>What is SPI?</title><p>SPI is a protocol is simply a way
    to send data from device to device in a serial fashion (bit by bit). This
    protocol is used for things like SD memory cards, MP3 decoders, memory
    devices and other high speed applications.</p><p>We can compare SPI to
    other data transfer protocols:</p><table frame="all">
        <title>Protocol Comparison Chart</title>

        <tgroup cols="4">
          <thead>
            <row>
              <entry/>

              <entry>SPI</entry>

              <entry>RS-232</entry>

              <entry>I2C</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>PINS</entry>

              <entry>3 + 1 per device</entry>

              <entry>2</entry>

              <entry>2</entry>
            </row>

            <row>
              <entry>Number Of Devices</entry>

              <entry>unlimited</entry>

              <entry>2</entry>

              <entry>1024</entry>
            </row>

            <row>
              <entry>Bits in one data byte transfer</entry>

              <entry>8</entry>

              <entry>10 (8 bytes + 1 start bit + 1 stop bit)</entry>

              <entry>9 (8 bytes + 1 ack bit)</entry>
            </row>

            <row>
              <entry>Must send one device address byte before
              transmission</entry>

              <entry>No</entry>

              <entry>No</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>Clock Type</entry>

              <entry>Master clock only</entry>

              <entry>Both device clocks must match</entry>

              <entry>Master Clock that slave can influence</entry>
            </row>

            <row>
              <entry>Data can transfer in two directions at the same time
              (full-duplex)</entry>

              <entry>Yes</entry>

              <entry>Yes</entry>

              <entry>No</entry>
            </row>
          </tbody>
        </tgroup>
      </table><p>As you can see SPI sends the least bit's per data byte
    transfer byte and does not need to send a device address before
    transmission. This makes SPI the fastest out of the three we
    compared.</p><p>Although SPI allows "unlimited" devices, and I2C allows
    for 1024 devices, the number of devices that can be connected to each of
    these protocol's are still limited by your hardware setup. This tutorial
    does not go into detail about connecting a large number of devices on the
    same bus. When connecting more devices, unrevealed problems may
    appear.</p></section>

    <section><title>How does SPI work?</title><p>Firstly, SPI works in a
    master/slave setup. The master is the one that sends the clock pulses. At
    each pulse, data will be sent and received.</p><p>SPI has a chip select
    pin. Every device will share the "SDI", "SDO" and "Clock" pins, but each
    device will have it's own chip select pin (also known as slave select).
    This means we can have a virtually unlimited number of devices on the same
    SPI bus. You should also note that the chip select pin can be active high
    or active low depending on the device.</p><p>For some devices, the chip
    select pin must stay enabled throughout the transmission, and others
    require a change in the chip select line before the next
    transmission.</p><p>SPI is Dual-Duplex. This means data can be sent and
    received at the same time. If you wish to send data and not receive any,
    the PIC will receive data anyways. You may ignore the return
    byte.</p><p>Here's a diagram showing the way in which SPI sends &amp;
    receives data:</p> <image href="images/spi_intro_data_transfer.jpg"
    width="450"/></section>

    <section><title>SPI Modes</title><p>If you are using a device that does
    not yet have a Jallib library, you will need to get the devices SPI mode.
    Some device datasheets tell you the SPI mode, and some don't. Your device
    should tell you the clock idle state and sample edge, with this
    information, you can find the SPI mode. SPI devices can be set to run in 4
    different modes depending on the clock's idle state polarity &amp; data
    sample rising or falling edge.</p><p>The image above is SPI mode 1,1. See
    if you can understand why.</p><p><b>Clock Polarity (CKP)</b> - Determines
    if the clock is normally high or normally low during it's idle
    state.</p><p>If CKP = 1 - the clock line will be high during idle.
    </p><p>If CKP = 0 - the clock will be low during idle.</p><p><b>Data Clock
    Edge (CKE)</b> - The edge that the data is sampled on (rising edge or
    falling edge)</p><p>If CKP = 0, CKE = 0 - Data is read on the clocks
    rising edge (idle to active clock state)</p><p>If CKP = 0, CKE = 1 - Data
    is read on the clocks falling edge (active to idle clock state)</p><p>If
    CKP =1, CKE = 0 - Data is read on the clocks falling edge (idle to active
    clock state)</p><p>If CKP = 1, CKE = 1 - Data is read on the clocks rising
    edge (active to idle clock state)</p><p>We can put this in a chart to name
    the modes:</p><p><table>
        <title>SPI MODE NAMES</title>

        <tgroup cols="3">
          <colspec/>

          <colspec/>

          <colspec/>

          <thead>
            <row>
              <entry>MODE NAME</entry>

              <entry>CKP</entry>

              <entry>CKE</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>0,0</entry>

              <entry>0</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>0,1</entry>

              <entry>0</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>1,0</entry>

              <entry>1</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>1,1</entry>

              <entry>1</entry>

              <entry>0</entry>
            </row>
          </tbody>
        </tgroup>
      </table></p></section>

    <note>I noticed the mode numbers &amp; mode table on Wikipedia is
    different then the table in the Microchip PDF. I am going by the Microchip
    PDF, as well as the tested and working PIC Jallib library + samples.
    Wikipedia also names these registers CPOL/CPHA instead of CKP/CKE.</note>

    <section><title>Using The Jallib Library</title><p>At the moment, there is
    only a SPI master hardware library, therefore any device you wish to
    control must be connected to the PIC's SDI, SDO, SCK pins. The chip select
    pin can be any digital output pin.</p><p>The library requires you to set
    the pin directions of the SDI, SDO, SCK lines as follows:</p><codeblock
    scale="80">-- setup SPI
include spi_master_hw         -- first include the library

-- define SPI inputs/outputs
pin_sdi_direction = input    -- spi data input
pin_sdo_direction = output   -- spi data output
pin_sck_direction = output   -- spi data clock</codeblock><p>You only need to
    set the pin direction of the chip select pin, the PIC will set the
    direction of the SDI, SDO &amp; SCK for you. You will Alias this chip
    select pin as required by the device's jallib library.</p><p>If you are
    using more then one device in your circuit, you will need to declare your
    chip select pin near the beginning of your program. If you do not do this
    at the beginning of your program, some of your devices may receive data
    because their chip select pin could be enabled during init procedures of
    other devices on the SPI bus.</p><codeblock scale="80">-- choose your SPI chip select pin
-- pin_SS is the PIC's slave select (or chip select) pin.
ALIAS device_chip_select_direction   is pin_SS_direction
ALIAS device_chip_select             is pin_SS
device_chip_select_direction = output    -- chip select/slave select pin
device_chip_select = low                -- disable the device</codeblock><p>Now
    the last step in setting up the SPI library is to use the init procedure.
    </p><p>Use the SPI mode name chart to get your SPI mode. The modes can be
    any of the
    following:</p><p>SPI_MODE_00</p><p>SPI_MODE_01</p><p>SPI_MODE_10</p><p>SPI_MODE_11</p><p>You
    will also need to set the spi bus speed. Here is a list of the speeds you
    may choose from:</p><p>SPI_RATE_FOSC_4 -- oscillator /
    4</p><p>SPI_RATE_FOSC_16 -- oscillator / 16</p><p>SPI_RATE_FOSC_64 --
    oscillator / 64</p><p>SPI_RATE_TMR -- PIC's internal timer</p><p>You will
    use the following init procedure with your custom values
    entered:</p><codeblock scale="80">spi_init(SPI_MODE_11,SPI_RATE_FOSC_16) -- choose spi mode and speed</codeblock><p>Now
    your ready to use the procedures to send and receive data. First you must
    enable the device with the chip select line:</p><codeblock scale="80">device_chip_select = high -- enable the device</codeblock><p>You
    can use the pseudo variable spi_master_hw to send and receive data as
    follows:</p><codeblock scale="80">-- send decimal 50 to spi bus
spi_master_hw = 50</codeblock><p>Or receive data like this:</p><codeblock
    scale="80">-- receive data from the spi port into byte x
var byte x
x = spi_master_hw</codeblock><p>You can also send and receive data at the same
    time with the spi_master_hw_exchange procedure. here's an
    example:</p><codeblock scale="80">-- send decimal byte 50 and receive data into byte x
var byte x
x = spi_master_hw_exchange (50)</codeblock><p>When your done transmitting
    &amp; receiving data, don't forget to disable your device</p><codeblock
    scale="80">device_chip_select = low -- enable the device</codeblock><p>Alright,
    now you should be able to implement SPI into any of your own devices. If
    you need assistance, contact us at the <xref format="html"
    href="https://groups.google.com/g/jallist" scope="external">Jallist
    Support Group</xref> or at <xref format="html"
    href="https://groups.google.com/g/jallib" scope="external">Jallib Support
    Group</xref>.</p></section>

    <section><title>References</title><p><b>The Jallib spi_master_hw
    library</b> - Written by William Welch</p><p><b>Microchip Technology SPI
    Overview</b> - <xref format="html"
    href="http://ww1.microchip.com/downloads/en/devicedoc/spi.pdf"
    scope="external">http://ww1.microchip.com/downloads/en/devicedoc/spi.pdf</xref></p><p><b>Wikipedia</b>
    - <xref format="html"
    href="http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus"
    scope="external">http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus</xref></p></section>
  </body>
</topic>
