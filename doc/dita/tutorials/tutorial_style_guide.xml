<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="topic-1">
  <title>Jallib Style Guide</title>

  <prolog>
    <author>Jallib Group</author>

    <publisher>Jallib Group</publisher>
  </prolog>

  <body>
    <section><title>Why a style guide?</title></section>

    <p>The <b>Jallib Style Guide</b> (JSG) defines the standards used to write
    Jalv2 code. It is recipe to write a standard jalv2 library.</p>

    <p>There are many ways to write code, whatever the programming language
    is. Each language has its preferences. For instance, java prefers
    <i>CamelCase</i> whereas python prefers <i>underscore_lowercase</i>.</p>

    <p>While this seems a real constraint, not necessarily needed, it actually
    helps a lot while sharing code with everyone: it improves
    <b>readability</b>, and readability is important because code is read much
    more often than it is written.</p>

    <p>Finally, more than a how to write code, this guide is here to help you
    not forget things like <i>author(s)</i>, <i>licence</i>, and remind you of
    some basic principles.</p>

    <section><title>Headers in a library</title><p>Every jal file published on
    this repository must have the following headers (comments), as the very
    beginning of the file:</p><p><codeblock scale="80">-- Title: [very small description if needed]
-- Author: [author's name], Copyright (c) YEAR..YEAR, all rights reserved.
-- Adapted-by: [adapter author's name, comma separated]
-- Compiler: [which version of compiler is needed. Ex: &gt;=2.4g, 2.5]
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: [describe what is the functional purpose of this lib]
--
-- Sources: [if relevant, specify which sources you used: website, specifications, etc...]
--
-- Notes: [put here information not related to functional description]
--

[code starts here...]</codeblock></p><p>The <b>author</b> is the original
    author's name. The library may have been modified and adapted by
    <b>adapters</b>. The <b>compiler</b> helps readers to know which compiler
    version is needed to use this file (no space between operator and version:
    &gt;=2.5r6). <b>Description</b>, <b>sources</b> and <b>notes</b> fields
    must be followed by an empty line (just `--`) to declare the end of the
    field content. As a consequence, those fields cannot have empty lines
    within them.</p><p>JSG Header example:</p><p><codeblock scale="80">-- -----------------------------------------------------------------------------
-- Title: Library for the DS3231 Real Time Clock IC.
-- Author: Rob Jansen, Copyright (c) 2021..2022, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for controlling the SD3231 Real Time Clock IC. 
--              The chip uses an IIC interface. The library provides all 
--              functions and procedures to support the rtc_common.jal library and
--              includes extra functions and procedures specific for the DS3231.
--              For all common rtc procedures and functions see rtc_common.jal.
--
-- Sources: Maxim datasheet rtc. 19-5170; Rev 10; 3/15
--
-- Notes: This library supports the control of the DS3231 via IIC.
--        The default is hardware IIC control but this can be overruled using 
--        software IIC control by defining the following constant:
--        -) const RTC_SOFTWARE_IIC = TRUE 
--
--        The following pins must be defined by the main program before 
--        including this library. Common pins for using IIC:
--        -) alias rtc_sck             -- IIC to sck of rtc
--        -) alias rtc_sck_direction    
--        -) alias rtc_sdo             -- IIC to sda of rtc  
--        -) alias rtc_sdo_direction  
-- </codeblock></p><p>Note: if you need to create a new paragraph within a
    multiline field, use the "--" special chars. See example in Notes field:
    "The following pins ..." is part of the Notes field, but visually
    separated from the beginning of the field content.</p><p>In the
    <codeph>/tools</codeph> directory on <xref format="html"
    href="https://github.com/jallib/jallib" scope="external">
    <apiname>GitHub</apiname> </xref> you'll find <codeph>jallib.py</codeph>
    and <codeph>jallib3.py</codeph> for Python version 3 and higher. Among
    many things, you can run the "validate" action, and check lots of JSG
    requirements. You can (must) use it to make sure that all your jal files
    are JSG compliant. This script will help you to identify
    problems:</p><p>Example:</p><p><codeblock scale="80">bash$ python jallib.py validate my_file.jal

File: my_file.jal
4 errors found
        ERROR: Cannot find field Title (searched for '^-- Title:\s**(.**)')
        ERROR: Cannot find field Author (searched for '^-- Author:\s**(.**)')
        ERROR: Cannot find field Compiler (searched for '^-- Compiler:\s**(.**)')
        ERROR: Cannot find field Description (searched for '^-- Description:\s**(.**)')

0 warnings found</codeblock></p></section>

    <section><title>Filenames naming convention</title><p>A library must be
    named as:</p><p><ul>
        <li><codeph>&lt;function&gt;_&lt;implementation|other&gt;.jal</codeph>
        for PIC-specific libraries (peripherals). <codeph>function</codeph>
        gives clues about what the library is about. Then
        <codeph>implementation</codeph> or <codeph>other</codeph> is here to
        differentiate libraries, and is more about implementations
        (<codeph>serial_hardware.jal</codeph>,
        <codeph>serial_software.jal</codeph>), things specific to the function
        (<codeph>pwm_ccp1.jal</codeph>, <codeph>pwm_ccp2.jal</codeph>,
        ...).</li>

        <li><codeph>&lt;device-family&gt;_&lt;device&gt;.jal</codeph> for
        external libraries. <codeph>device-family</codeph> describes the
        device family (...), and is often the directory name where the lib is.
        <codeph>device</codeph> precisely sets the part
        (<codeph>lcd_hd44780_4.jal</codeph>, <codeph>rtc_ds1302.jal</codeph>,
        <codeph>co2_t6603.jal</codeph>.).</li>
      </ul></p></section>

    <section><title>Variables, constants and procedures naming
    convention</title><p>All <b>external names</b> (of global variables,
    constants, procedures and functions available to application programs)
    <b>must</b> start with a prefix unique to the library. Names of other
    global entities (not supposed being used by application programs) should
    use this prefix and use an additional underscore at the
    beginning.</p><p>Variables, constants, procedures and functions must be
    named as:</p><p><ul>
        <li><codeph>&lt;device&gt;*&lt;whatever&gt;</codeph> if you want to
        avoid name space collision</li>

        <li><codeph>&lt;device-family&gt;*&lt;whatever&gt;</codeph> if you
        want to have a common API</li>
      </ul></p><p>For example, <codeph>co2_t6603.jal</codeph> library have all
    its procedures starting with <codeph>t6603_</codeph> (and
    <codeph>*t6603*</codeph> for internal names). This makes all these
    procedures very specific to this library. If you have another CO2 sensor,
    you'll be able to use both at the same time, because they'll be no name
    space collision. This is the purpose of the
    <codeph>&lt;device&gt;*&lt;whatever&gt;</codeph> naming
    convention.</p><p>Another example: the names of the procedures in the LCD
    libaries start with `lcd*` (and `*lcd*` for internal names). There are
    many different LCD types, but all implements the same API, because
    procedures, variables, etc... are named according to the device-family,
    not the device itself. This is the purpose of the
    <codeph>&lt;device-family&gt;_&lt;whatever&gt;</codeph> naming
    convention.</p><p>Now, how do you know which to follow? Ask and we will
    discuss.</p><note>Following the same principle, naming
    const/var/procedure/function in a PIC-specific libraries (peripherals) can
    include the <i>function</i> and/or the <i>implementation</i>. This depends
    whether you want to have more than one function within a same
    PIC.</note><p>Example: There are two implementations of i2c and serial:
    hardware and software. Having both i2c implementation within a same PIC is
    not useful, since i2c is addressable. Thus, all const/var/... are prefixed
    by <codeph>i2c_&lt;whatever&gt;.jal</codeph>. On the contrary, it can be
    useful to have two serial implementation within a same PIC (eg. one
    talking a PIC, another talking to a external device). Thus, serial libs'
    const/var/... are prefixed by
    <codeph>serial_hw_&lt;whatever&gt;.jal</codeph> or
    <codeph>serial_sw_&lt;whatever&gt;.jal</codeph>.</p></section>

    <section><title>Pin names naming convention</title><p>The pins are named
    as:</p><p><ul>
        <li><codeph>&lt;device&gt;_&lt;external_pin_name&gt;</codeph> if you
        want to avoid names pace collision</li>

        <li><codeph>&lt;device-family&gt;_&lt;external_pin_name&gt;</codeph>
        if you want to have a common API</li>
      </ul></p><p>This is almost the same as for variables, contants, ...
    except the <codeph>&lt;whatever&gt;</codeph> part now corresponds the pin
    name of the external device (usually found in datasheets). Using the
    <codeph>&lt;device-family&gt;_&lt;external_pin_name&gt;</codeph>
    convention to build a common API may cause problems, if pin names aren't
    named the same in all supported devices. In that case, the pin name should
    be as explicit as possible.</p><p>Important: See also the very important
    rules about pin names within a library: "Don't use port and pin
    names".</p></section>

    <section><title>Samples and test naming convention</title><p>Tests are
    named as <codeph>test_&lt;whatever&gt;.jal</codeph>. That is, they should
    starts with the prefix <codeph>test_</codeph>. That is, samples must
    <b>not</b> start with <codeph>test_</codeph>.</p><p>Board files are named
    as <codeph>board_&lt;pic&gt;*&lt;whatever&gt;.jal</codeph>.</p><p>Samples
    are named as <codeph>&lt;pic&gt;*&lt;whatever&gt;.jal</codeph>.
    <codeph>&lt;whatever&gt;</codeph> can be whatever, but should give users
    hints about what the sample is (e.g.
    <codeph>16f88_serial_hardware.jal</codeph>).</p></section>

    <section><title>Why such a pain?</title><p>The main purpose of this is to
    control the naming conflicts between libraries and application code. Bear
    in mind that this is about source-level libraries which are combined by
    the compiler to form a single application program.</p><p>Having naming
    convention is also a great optimize process, saving time, by scripting and
    generating code. This is good.</p></section>

    <section><title>Don't use port and pin names</title><p><b>Don't use port
    and pin names</b> like <codeph>portA</codeph> or <codeph>pin_a5</codeph>
    in your great library, because someone may (will) want to use your library
    on another port or pin. It also helps to make your great library PIC
    independent.</p><p><b>Name your pins according to the context</b>, to what
    your library is doing. Client code, i.e. users, will have to define those
    variables before actually include your great library.</p><p><b>Let the
    user set the pin directions, except if the library is supposed to modify
    direction during execution.</b></p><p>Example: how to use your library
    (doing amazing things with the GP2D02 IR ranger):<codeblock scale="80"> -- declare in/out pins for the ranger
 alias ranger_pin_in          is pin_A0
 alias ranger_pin_out         is pin_A1</codeblock></p><p>and make sure the
    pins work as required:</p><p><codeblock scale="80"> -- specify the direction of the pins
 -- Since directions won't change during execution, this is
 -- done here, during the setup, before including the library
 pin_A0_direction = input
 pin_A1_direction = output</codeblock></p><p>and now include the
    library:</p><p><codeblock scale="80"> -- now include the library which uses ranger_pin_in and ranger_pin_out
 include gp2d02            -- ranger library</codeblock></p><p><i>Exception</i>:
    If your library uses a special PIC feature, it may use the name defined in
    the device files / datasheet. Not so much an exception, as you'll use the
    pin name given the context (feature, peripheral).</p><note>Syntax
    <codeph>"var ... is ..."</codeph> is now deprecated in favor of
    <codeph>"alias ... is ..."</codeph> and must not be used anymore. The
    <codeph>"alias"</codeph> keyword is more powerful as it allows to create
    synonyms for any type of names (variables, constants, procedures,
    functions, pseudo-variables).</note><p>Example: An i2c hardware library
    (using built-in PIC i2c) may refer to `SCK` and `SDA`. Those pin names are
    set into the device include file (prefixed with the
    portname!).</p></section>

    <section><title>Let the user initialize the library</title><p>Most of the
    time, a library needs to be configured (you define variables/constants
    before including the file), then initialized (you call
    <codeph>&lt;libname&gt;_init()</codeph>). While having the init step
    automatically called when the library is called can be convenient, this
    results in a lack of flexibility. Indeed, you may want to initialize one
    library or the other, or initialization step can take quite a long time,
    so you want to have control about when you can "waste" such
    time.</p><p>So, <b>a library must never call its own init procedures, the
    user will</b>. And the init procedure must be named either as
    <codeph>&lt;device&gt;_init</codeph> or
    <codeph>&lt;function&gt;_init</codeph>, whether you want to avoid names
    pace collision, or on the contrary, if you want to have different
    implementation for the same API (see rules about naming convention
    above).</p></section>

    <section><title>Avoid weird default values in library</title><p><b>Don't
    put default values</b> in your library, someone may (will) have a
    different opinion about what's a <i>default value</i> . Even if it's
    tempting because it can save time writing the same value again and again.
    Remember, your library is to be shared, nasty default value can be a real
    obstacle using it. If for some reason default values have to be used, make
    sure that you provide a means for the user to overrule oror change
    them.</p></section>

    <section><title>Write examples</title><p><b>Write examples</b> to show the
    world how to use your great library. Without it, people may (will) not use
    your library, because it's too complicated and too time-consuming reading
    code to actually discover what it does. Also remember writing examples can
    help <i>you</i> to design a usable, simple and clear API.</p></section>

    <section><title>Assembler</title><p>Avoid the use of inline Assembler. If
    you cannot do without it use <b>standard asm opcodes</b> and avoid nasty
    Assembler statements. So:</p><p><b>Good</b></p><p><codeblock scale="80">btfsc STATUS_Z</codeblock></p><p><b>Bad</b></p><p><codeblock
    scale="80">skpnz</codeblock></p></section>

    <section><title>Warnings are errors</title><p>Don't be tempted to ignore
    warnings. <b>Consider warnings as errors</b>, until you've completely
    understand why there should be a warning (or not). Warnings can mask more
    relevant warnings and errors, so track them and try to avoid them. A
    library <b>should</b> compile <b>without any warnings</b>... if possible
    but it <b>must</b> compile <b>without any errors</b>.</p></section>

    <section><title>Code layout</title><p>Indent your code. It helps following
    the code structure (flows). Code must be indented using <b>3 spaces</b>
    (no tab). You can use <codeph>python jallib3.py reindent
    &lt;file.jal&gt;</codeph> for this. </p><p><b>Good</b></p><p><codeblock
    scale="80">var byte char
forever loop
   if serial_hw_read(char) then
      echo(char)
   end if
end loop</codeblock></p><p><b>Bad</b></p><p><codeblock scale="80">var byte char
forever loop
if serial_hw_read(char) then
echo(char)
end if
end loop</codeblock></p></section>

    <section><title>Use lower_case_with_underscores
    ...</title><p><b>Good</b></p><p><codeblock scale="80">var byte this_is_a_variable
var byte another_one</codeblock></p><p><b>Bad</b></p><p><codeblock scale="80">var byte ThisIsAVariable
var byte Another_One</codeblock></p></section>

    <section><title>... except for constants</title><p>Uppercase variables
    should be used for constants, internal PIC function registers or for
    external PIN names, if they are uppercase in the datasheet as
    well.</p><p><b>Good</b></p><p><codeblock scale="80">const RESET_CHAR = "*"
const SSPCON1_CKP = 1</codeblock></p><p><b>Bad</b></p><p><codeblock
    scale="80">const reset_CHAR = "*"
const sspCON1_Ckp = 1</codeblock></p></section>

    <section><title>Be explicit when calling procedures and
    functions</title><p>When a procedure (or a function) does not take any
    parameters, be explicit and help your readers: put parenthesis so everyone
    knows it's a call. Same when defining the function/procedures. Also note
    no space is allowed between the procedure/function name and the opening
    parenthesis. Finally, pseudo-variable must be defined with parenthesis,
    but not when used (heh, these are functions/procedures behaving like
    variables!).</p> <b>Good</b> <p><codeblock scale="80">-- Defining
procedure do_it_please() is
    -- I will do it
end procedure

-- Calling
do_it_please()

-- pseudo-var
function my_pseudo_var'get() return byte is
    -- I promise I'll do it
end function

var byte what = my_pseudo_var</codeblock></p><p><b>Bad</b></p><p><codeblock
    scale="80">procedure do_it_again is
    -- this is bad
end procedure

do_it_again

function my_pseudo_var'get () return byte is
    -- this is bad, too because there's a space !
end procedure</codeblock></p></section>

    <section><title>Filenames are lower cased, include statements
    too</title><p>All jal files must be lowercased. So:</p> <b>Good</b>
    <p><codeblock scale="80">$ ls 16f88.jal</codeblock></p><p><b>Bad</b></p><p><codeblock
    scale="80">$ ls 16F88.jal</codeblock></p><p>Being consistent, include
    statements are lower cased, too:</p> <b>Good</b> <p><codeblock scale="80">include 16f88</codeblock></p><p><b>Bad</b></p><p><codeblock
    scale="80">include 16F88</codeblock></p></section>

    <section><title>Inform readers what should be considered
    private</title><p>Functions, procedures, variables, etc... starting with
    an underscore is a warning to users saying "you shouldn't use me, I'm for
    internal use only". Play carefully with this, remember users are quite
    curious and may want them anyway :).</p></section>

    <section><title>Comment your code</title><p>It helps readers to understand
    what's going on. The comment should describe <b>why</b> your code does its
    thing, not what is does. That should be obvious from the code
    itself.</p></section>

    <section><title>External data</title><p>When developing a library, you may
    need to collect and organize external / 3rd party data. For instance, the
    relation between a datasheet reference and the PICs described in this
    datasheet is what we call external data: it's not jal code, but
    <i>often</i> used to generate some, and <i>always</i> a source of
    information everyone can refer too.</p><p>External data must store in a
    <b>structured format</b> so everyone potentially is able to use it. Before
    we, developers, are also (kind of) humans, we want this format to be
    readable, and even writable, but also structured enough so a computer can
    also use and exploit it. That's why this format is <xref
    href="http://www.json.org/" scope="external"> <apiname>JSON</apiname>
    </xref> (and not XML), which is available in many languages. This is a way
    to share information, among the many scripts used to deal jal code
    base.</p></section>
  </body>
</topic>
