<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="topic-1">
  <title>PWM (Part 1) - Dimming a led with PWM</title>

  <prolog>
    <author>SÃ©bastien Lelong</author>

    <publisher>Jallib Group</publisher>
  </prolog>

  <body>
    <section><title>One PWM channel + one LED = fun </title><p>For now, and
    for this first part, we're going to see how to <i>control the brightness
    of a LED</i>. If simply connected to a pin, it will light at its max
    brightness, because the pin is "just" high (5V).</p><p>Now, if we connect
    this LED on a PWM pin, maybe we'll be able to control the brightness: as
    previously said, <i>PWM can be used to produce variable voltages</i>. If
    we provide half the value (2.5V), maybe the LED will be half its
    brightness (though I guess the relation between voltage and brightness is
    not linear...). Half the value of 5V. How to do this ? Simply <b>configure
    the duty cycle to be 50% high, 50% low</b>.</p><p>But we also said <i>PWM
    is just about switching a pin on/off</i>. That is, either the pin will be
    0V, or 5V. So how will we be able to produce 2.5V ? Technically speaking,
    we won't be able to produce a real 2.5V, but if PWM frequency is high
    enough, then, on the average, and from the LED's context, it's as though
    the pin outputs 2.5V.</p></section>

    <section><title>Building the circuit</title><p>Enough theory, let's get
    our hands dirty. Connecting a LED to a PWM pin on a 16f88 is quite easy.
    This PIC has quite a nice feature about PWM, it's possible to select which
    pin, between RB0 and RB3, will carry the PWM signals. Since I use <xref
    format="html"
    href="http://www.etc.ugal.ro/cchiculita/software/picbootloader.htm"
    scope="external">tinybootloader</xref> to upload my programs, and since
    tiny's fuses are configured to select the RB0 pin, I'll keep using this
    one (if you wonder why tinybootloader interferes here, <xref format="html"
    href="http://jallib.blogspot.com/2009/01/common-pitfall-setting-up-registers.html"
    scope="external">read this post</xref>).</p> <p><fig>
        <title>Connecting a LED to a PWM pin</title>

        <image href="images/pwm_led_schematics.png" placement="inline"/>
      </fig></p><p>On a breadboard, this looks like this:</p><p><image
    href="images/pwm_led_breadboard.jpg" placement="inline"
    width="300"/></p><p><i>The connector brings +5V on the two bottom lines
    (+5V on line A, ground on line B).</i></p><p><image
    href="images/pwm_led_details.jpg" placement="inline" width="300"/><i>LED
    is connected to RB0</i></p></section>

    <section><title>Writing the software</title><p>For this example, I took
    one of the 16f88's sample included in jallib distribution
    16f88_pwm_led.jal, and just adapt it so it runs at 8MHz, using internal
    clock. It also select RB0 as the PWM pin.</p><p>So, step by step... First,
    as we said, we must select which pin will carry the PWM
    signals...</p><codeblock scale="80">pragma target CCP1MUX      RB0     -- ccp1 pin on B0</codeblock><p>and
    configure it as output</p><codeblock scale="80">var volatile bit pin_ccp1_direction is pin_b0_direction
pin_ccp1_direction = output
-- (simply "pin_b0_direction = output" would do the trick too)</codeblock><p>Then
    we include the PWM library.</p><codeblock scale="80">include pwm_hardware</codeblock><p>Few
    words here... This library is able to handle <b>up to 10 PWM channels</b>
    (PIC using CCP1, CCP2, CCP3, CCP4, ... CCP10 registers). Using conditional
    compilation, it <b>automatically selects the appropriate underlying PWM
    libraries</b>, for the selected target PIC.</p><p>Since 16f88 has only one
    PWM channel, it just includes "pwm_ccp1" library. If we'd used a 16f877,
    which has two PWM channels, it would include "pwm_ccp1" <i>and</i>
    "pwm_ccp2" libraries. What is important is it's transparent to users
    (you).</p><p>OK, let's continue. We now need to configure the
    <b>resolution</b>. What's the resolution ? Given a frequency, the
    <b>number of values you can have for the duty cycle</b> can vary (you
    could have, say, 100 different values at one frequency, and 255 at another
    frequency). Have a look at the datasheet for more.</p><p>What we want here
    is to have the <b>max number of values we can for the duty cycle</b>, so
    we can select the exact brightness we want. We also want to <b>have the
    max frequency</b> we can have (ie. no pre-scaler).</p><codeblock
    scale="80">pwm_max_resolution(1)</codeblock><p>If you read the jalapi
    documentation for this, you'll see that the frequency will be 7.81kHz (we
    run at 8MHz).</p><p>PWM channels can be turned on/off independently, now
    we want to activate our channel:</p><codeblock scale="80">pwm1_on()</codeblock><p>Before
    we dive into the forever loop, I forgot to mention PWM can be used in
    <b>low or high resolution</b>. On <i>low resolution</i>, duty cycles
    values range from <i>0 to 255</i> (8 bits). On <i>high resolution</i>,
    values range from <i>0 to 1024</i> (10 bits). In this example, we'll use
    low resolution PWM. For high resolution, you can have a look at the other
    sample, 16f88_pwm_led_highres.jal. As you'll see, there are very few
    differences.</p><p>Now let's dive into the loop...</p><codeblock
    scale="80">forever loop
   var byte i
   i = 0
   -- loop up and down, to produce different duty cycle
   while i &lt; 250 loop
      pwm1_set_dutycycle(i)
      _usec_delay(10000)
      i = i + 1
   end loop
   while i &gt; 0 loop
      pwm1_set_dutycycle(i)
      _usec_delay(10000)
      i = i - 1
   end loop
   -- turning off, the LED lights at max.
   _usec_delay(500000)
   pwm1_off()
   _usec_delay(500000)
   pwm1_on()

end loop</codeblock><p>Quite easy right ? There are <i>two main waves</i>: one
    will light up the LED progressively (0 to 250), another will turn it off
    progressively (250 to 0). On each value, we set the duty cycle with
    <codeph>pwm1_set_dutycycle(i)</codeph> and wait a little so we, humans,
    can see the result.</p><p>About the result, how does this look like ? See
    this video: <xref format="html"
    href="http://www.youtube.com/watch?v=r9_TfEmUSf0"
    scope="external">http://www.youtube.com/watch?v=r9_TfEmUSf0</xref></p><p><object
        height="385" width="480">
        <param name="movie" value="http://www.youtube.com/v/r9_TfEmUSf0"/>

        <param name="allowFullScreen" value="true"/>

        <param name="allowscriptaccess" value="always"/>
      </object></p></section>

    <section><title>"I wanna try, where are the files ?"</title><p>To run this
    sample, you'll need <xref format="html"
    href="http://justanotherlanguage.org/downloads" scope="external">latest
    jallib pack</xref>.</p></section>
  </body>
</topic>
