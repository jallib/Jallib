<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" []>
<topic id="topic-1">
  <title>LCD Display - HD44780-compatible</title>
  <prolog>
    <author>SÃ©bastien Lelong</author>
    <publisher>Jallib Group</publisher>
  </prolog>
  <body>
    <p>In this &quot;Step by Step&quot; tutorial, we&apos;re going to (hopefully) have some fun with a LCD display. Particularly one compatible with HD44780 specifications, which seems to be most widely used.</p>
    <section>
      <title>Setting up the hardware</title>
      <p>As usual, there are <xref href="http://www.google.com/search?hl=en&amp;q=lcd+hd44780" format="html" scope="external">plenty resources</xref> on the web. I found <xref href="http://www.ekenrooi.net/lcd/lcd.shtml" format="html" scope="external">this one</xref> quite nice, covering lots of thing. Basically, LCDs can be accessed with two distinct interfaces: <i>4-bit or 8-bit interfaces</i>. <i>4-bit interface requires less pins</i> (4 pins), but is somewhat slow, <i>8-bit interface requires more pins</i> (8 pins) but is faster. jallib comes with the two flavors, it&apos;s up to you deciding which is most important, but usually, pins are more precious than speed, particularly when using a 16F88 which only has 16 I/O pins (at best). Since 4-bit interface seems to be most used, and we&apos;ll use this one here...</p>
      <p>So, I&apos;ve never used LCD, to be honest. Most guys consider it as an absolute minimum thing to have, since it can help a lot when debugging, by printing messages. I tend to use serial for this... Anyway, I&apos;ve been given a LCD, so I can&apos;t resist anymore :)</p>
      <p>The LCD I have seems to be quite a nice beast ! It has 4 lines, is 20 characters long.</p>
      <p><image href="images/lcd_overview.jpg" width="400" placement="break"/></p>
      <p>Looking closer, &quot;<i>JHD 204A</i>&quot; seems to be the reference. Near the connector, only a &quot;1&quot; and a &quot;16&quot;. No pin&apos;s name.</p>
      <p><image href="images/lcd_jhd204a.jpg" placement="break"/></p>
      <p><image href="images/lcd_1.jpg" placement="break"/></p>
      <p><image href="images/lcd_16.jpg" placement="break"/></p>
      <p>Googling the whole points to a forum, and at least a link to the <xref href="http://www.8051projects.net/e107_files/public/1231066792_13674_FT0_jm204aspec.pdf" format="pdf" scope="external">datasheet</xref>. A section describes the &quot;Pin Assignement&quot;. Now I&apos;m sure about how to connect this LCD.</p>
      <p><image href="images/lcd_pins.png" width="400" placement="break"/></p>
      <p>For this tutorial, we&apos;re going to keep it simple:<ul>
          <li>as previously said, we&apos;ll use 4-bit interface. This means we&apos;ll use DB4, DB5, DB6 and DB7 pins (respectively pin 11, 12, 13 and 14).</li>
          <li>we won&apos;t read from LCD, so R/W pin must be grounded (pin 5)</li>
          <li>we won&apos;t use contrast as well, V5 pin (or Vee) must be grounded (pin 3)</li>
        </ul></p>
      <p>Including pins for power, we&apos;ll use 10 pins out of the 16 available, 6 being connected to the PIC (RS, EN and 4 data lines).</p>
      <p>For convenience, I soldered a male connector on the LCD. This will help when building the whole on a breadboard.</p>
      <p><image href="images/lcd_connector.jpg" placement="break"/></p>
      <p>So we now have everything to build the circuit. Here&apos;s the schematic. It also includes a LED, it will help us checking everything is ok while powering up the board.</p>
      <p><image href="images/lcd_4bit.png" width="500" placement="break"/></p>
      <p>Using a breadboard, it looks like this:</p>
      <p><image href="images/lcd_bwhole.jpg" width="400" placement="break"/></p>
      <p><image href="images/lcd_bpic.jpg" width="400" placement="break"/></p>
      <p><image href="images/lcd_bconn.jpg" width="400" placement="break"/></p>
    </section>
    <section>
      <title> Writing the software</title>
      <p>For this tutorial, we&apos;ll use one of the available samples from <xref href="http://justanotherlanguage.org/downloads" format="html" scope="external">jallib repository</xref>. I took one   for 16f88, and adapt it to my board (specifically, I wanted to use PORTA when connecting the LCD, and let PORTB&apos;s pins as is).</p>
      <p>As usual, writing a program with jallib starts with configuring and declaring some parameters. So we first have to declare which pins will be connected:</p>
      <p><codeblock> -- LCD IO definition
var bit lcd_rs           is pin_a6              -- LCD command/data select.
var bit lcd_rs_direction is pin_a6_direction
var bit lcd_en           is pin_a7              -- LCD data trigger
var bit lcd_en_direction is pin_a7_direction

var byte lcd_dataport is porta_low              -- LCD data  port
var byte lcd_dataport_direction is porta_low_direction

-- set direction
lcd_rs_direction = output
lcd_en_direction = output
lcd_dataport_direction = output</codeblock></p>
      <p>This is, pin by pin, the translation of the schematics. Maybe except <codeph>porta_low</codeph>. This represents pin A0 to A3, that is pins for our 4 lines interface. <codeph>porta_high</codeph> represents pin A4 to A7, and <codeph>porta</codeph> reprensents the whole port, A0 to A7. These are just &quot;shorcuts&quot;.</p>
      <p>We also have to declare the <b>LCD geometry</b>:</p>
      <p><codeblock>const byte LCD_ROWS     = 4      -- 4 lines
const byte LCD_CHARS    = 20     -- 20 chars per line</codeblock></p>
      <p>Once declared, we can then include the library and initialize it:</p>
      <p><codeblock>include lcd_hd44780_4   -- LCD library with 4 data lines
lcd_init()              -- initialize LCD</codeblock></p>
      <p>
For this example, we&apos;ll also use the <filepath>print.jal</filepath> library, which provides nice helpers when printing variables.</p>
      <p><codeblock>include print</codeblock></p>
      <p>
Now the main part... How to write things on the LCD.</p>
      <ul>
        <li>You can either use a procedure call: <codeph>lcd_write_char(&quot;a&quot;)</codeph></li>
        <li>or you can use the pseudo-variable : <codeph>lcd = &quot;a&quot;</codeph></li>
        <li><codeph>lcd_cursor_position(x,y)</codeph> will set the cursor position. x is the line, y is the row, starting from 0</li>
        <li>finally, <codeph>lcd_clear_screen()</codeph> will, well... clear the screen !</li>
      </ul>
      <p>Full API documentation is available in the jallb release.</p>
      <p>So, for this example, we&apos;ll write some chars on each line, and print an increasing (and incredible) counter:</p>
      <p><codeblock>const byte str1[] = &quot;Hello world!&quot;      -- define strings
const byte str2[] = &quot;third line&quot;
const byte str3[] = &quot;fourth line&quot;

print_string(lcd, str1)                 -- show hello world!
lcd_cursor_position(2,0)                      -- to 3rd line
print_string(lcd, str2)
lcd_cursor_position(3,0)                      -- to 4th line
print_string(lcd, str3)

var byte counter = 0

forever loop                            -- loop forever

   counter = counter + 1                -- update counter
   lcd_cursor_position(1,0)                   -- second line
   print_byte_hex(lcd, counter)         -- output in hex format
   delay_100ms(3)                       -- wait a little

   if counter == 255 then               -- counter wrap
      lcd_cursor_position(1,1)                -- 2nd line, 2nd char
      lcd = &quot; &quot;                         -- clear 2nd char
      lcd = &quot; &quot;                         -- clear 3rd char
   end if

end loop</codeblock></p>
      <p>The full and ready-to-compile code is available on jallib repository</p>
      <p>You&apos;ll need latest jallib-pack, available on jallib&apos;s <xref href="http://justanotherlanguage.org/downloads" format="html" scope="external">download section</xref>.</p>
    </section>
    <section>
      <title>How does this look when running ?</title>
      <p>Here&apos;s the video !</p>
      <p><xref href="http://www.youtube.com/watch?v=hIVMuaz8OS8" format="html" scope="external">http://www.youtube.com/watch?v=hIVMuaz8OS8</xref></p>
      <p>
        <object height="385" width="480">
          <param name="movie" value="http://www.youtube.com/v/hIVMuaz8OS8"/>
          <param name="allowFullScreen" value="true"/>
          <param name="allowscriptaccess" value="always"/>
        </object>
      </p>
    </section>
  </body>
</topic>
