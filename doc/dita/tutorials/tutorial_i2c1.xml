<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" []>
<topic id="topic-1">
  <title>I²C (Part 1) - Building an I²C slave + Theory</title>
  <prolog>
    <author>Sébastien Lelong</author>
    <publisher>Jallib Group</publisher>
  </prolog>
  <body>
    <p><xref href="https://en.wikipedia.org/wiki/I%C2%B2C" format="html" scope="external">i2c</xref> is a nice protocol: it is quite fast, reliable, and most importantly, it&apos;s addressable. This means that on a single 2-wire bus, you&apos;ll be able to plug up to 128 devices using 7bits addresses, and even 1024 using 10bits address. Far enough for most usage... I won&apos;t cover i2c in depth, as there are <xref href="http://www.google.com/search?q=i2c" format="html" scope="external">plenty resources</xref> on the Web (and I personally like <xref href="http://www.esacademy.com/faq/i2c/index.htm" format="html" scope="external">this page</xref>).</p>
    <section>
      <title>A few words before getting our hands dirty...</title>
      <p>i2c is found in many chips and many modules. Most of the time, you create a master, like when accessing an EEPROM chip. This time, in this three parts tutorial, we&apos;re going to build a slave, which will thus respond to master&apos;s requests.</p>
      <p>The <i>slave</i> side is somewhat more difficult (as you may have guess from the name...) because, as it does not initiate the talk, it has to listen to &quot;events&quot;, and be as responsive as possible. You&apos;ve guessed, we&apos;ll use <i>interrupts</i>. I&apos;ll only cover i2c hardware slave, that is using <i>SSP peripheral</i><fn>some PICs have MSSP, this means they can also be used as i2c hardware Master</fn>. Implementing an i2c software slave may be very difficult (and I even wonder if it&apos;s reasonable...).</p>
      <p>There are different way implementing an i2c slave, but one seems to be quite common: defining a <xref href="http://en.wikipedia.org/wiki/Finite_state_machine" format="html" scope="external">finite state machine</xref>. This implementation is well described in Microchip AppNote <xref href="http://ww1.microchip.com/downloads/en/appnotes/00000734c.pdf" format="html" scope="external">AN734</xref>. It is highly recommended that you read this appnote, and the i2c sections of your favorite PIC datasheet as well (I swear it&apos;s quite easy to read, and well explained).</p>
      <p>Basically, during an i2c communication, there can be <b>5 distinct states</b>:<ol>
          <li><b>Master writes, and last byte was an address</b>: to sum up, master wants to talk to a specific slave, identified by the address, it wants to send data (write)</li>
          <li><b>Master writes, and last byte was data</b>: this time, master sends data to the slave</li>
          <li><b>Master read, and last byte was an address</b>: almost the same as 1., but this time, master wants to read something from the salve</li>
          <li><b>Master read, and last byte was data</b>: just the continuation of state 3., master has started to read data, and still wants to read more data</li>
          <li><b>Master sends a NACK</b>: basically, master doesn&apos;t want to talk to the slave anymore, it hangs up...</li>
        </ol></p>
      <note>in the i2c protocol, one slave has actually two distinct addresses. One is for read operations, and it ends with bit 1. Another is for write operations, and it ends with bit 0.</note>
      <p><i>Example<i>: </i></i>consider the following address (8-bits long, last bit is for operation type)</p>
      <p><tt>0x5C =&gt; 0b_0101_110<b>0</b> =&gt; write operation</tt></p>
      <p>The same address for read operation will be:</p>
      <p><tt>0x93 =&gt; 0b_0101_110<b>1</b> =&gt; read operation</tt></p>
      <note><b>Jallib currently supports up to 128 devices on a i2c bus</b>, using 7-bits long addresses (without the 8th R/W bits). There&apos;s currently no support for 10-bits addresses, which would give 1024 devices on the same bus. If you need it, please let us know, we&apos;ll modify libraries as needed !</note>
      <p>OK, enough for now. Next time, we&apos;ll see how two PICs must be connected for i2c communication, and we&apos;ll check the i2c bus is fully working, before diving into the implementation.
</p>
    </section>
  </body>
</topic>
