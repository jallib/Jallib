<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" []>
<topic id="template_id">
  <title>Hard Disks - IDE/PATA</title>
  <prolog>
    <author>Matthew Schinkel</author>
    <publisher>Jallib Group</publisher>
    <metadata>
      <category>Tutorials</category>
      <prodinfo>
        <prodname>Jallib</prodname>
        <vrmlist>
          <vrm version="0.0"/>
        </vrmlist>
      </prodinfo>
    </metadata>
  </prolog>
  <body>
    <p id="firstcontent">IDE Paralel ATA hard disk drive tutorial</p>
    <section>
      <title>Introduction to hard disks drives</title>
      <p>If your are like me, you have too many old hard disks laying around. I have gathered quite a collection of drives from PC&apos;s I have had in the past. Now you can dust off your  drives and put them in your circuit. I have extra drives ranging in size from 171MB to 120GB.</p>
      <p>Before you start, make sure you use a drive you do not care about. We are not responsible for your drive of the data that is on it.</p>
      <p>You can find more general info at <xref href="http://en.wikipedia.org/wiki/Parallel_ATA" format="html" scope="external">http://en.wikipedia.org/wiki/Parallel_ATA</xref>, and you can find more detailed technical info at <xref href="http://www.gaby.de/gide/IDE-TCJ.txt" format="html" scope="external">http://www.gaby.de/gide/IDE-TCJ.txt</xref></p>
      <image href="images/pata_hard_disk_pile.jpg" width="450"/>
    </section>
    <section>
      <title>Drive Types - PATA vs SATA</title>
      <p>There are two types of hard disks PATA (parallel ata) and SATA (serial ata). In this tutorial we will use PATA, these drives use a 40 pin IDE connector. The newer type of drive SATA has only 7 pins but there is no Jallib library for these drives at the moment. Both types of hard disks  are available with massive amounts of data space.</p>
    </section>
    <section>
      <title>Drive Data Size</title>
      <p>The current jallib library will accept drives up to 128GB. The 128GB limit is due to and addressing limitation, this is the 28 bit addressing limitation.The max address you will be able to reach is hex 0xFFFFFFF. If you multiply this address by 512 bytes (1 sector) you get a max size of 137,438,952,960 bytes, yes this does equal 128GB. Eventually I may upgrade the library for 48bit addressing which will allow up to a max drive size hex 0xFFFFFFFFFFFF * 512 = 128PB (Petabytes). But now that I think about it, 128 GB should be enough!</p>
    </section>
    <section>
      <title>Actual Size</title>
      <p>The most common drive sizes today are 3.5&quot; and 2.5&quot;. The 3.5 inch drives are commonly used in desktop computers, 2.5&quot; drives are used in laptops. The 2.5&quot; drives are nice for your circuit because they do not require a 12v supply voltage, and they use much less power.</p>
      <image href="images/pata_hard_disk_drive_size.jpg" width="450"/>
      <p>If you wish to use a 2.5&quot; laptop hard drive, you may need a 2.5&quot; to 3.5&quot; IDE adapter like this one:</p>
      <image href="images/pata_hard_disk_adapter.jpg" width="200" otherprops="clickable"/>
      <image href="images/pata_hard_disk_adapter2.jpg" width="200"/>
    </section>
    <section>
      <title>Build a breadboard connector</title>
      <p>Now, if your going to put one of these into your circuit, you&apos;ll need to plug the drive into your breadboard. I took a 40pin IDE connector off an old motherboard. The easiest way to get large components of a board is to use a heat gun on the bottom side of the board to melt the solder on all pins at once. </p>
      <p>Now take this connector and stick it into some blank breadboard and add some pins. The blank breadboard I cut is 4 holes wide by 20 long. Put the connector in the middle and connect the pins on the outside, join each pin with each pin of the connector. </p>
      <p>Of course you will also need a 40pin  IDE cable, I like the ones with the notch so you don&apos;t plug it in backwards. Here&apos;s the one I made:</p>
      <image href="images/pata_hard_disk_connector_top.jpg" width="200" otherprops="clickable"/>
      <image href="images/pata_hard_disk_connector_bottom.jpg" width="200" otherprops="clickable"/>
      <image href="images/pata_hard_disk_connector_side.jpg" width="200" otherprops="clickable"/>
    </section>
    <section>
      <title>Circuit Power</title>
      <p>It is very important that you have enough power to drive your circuit. Hard drives need a lot of amps to run, especially the 3.5&quot; drives, so make sure you have a decent 5v and 12v power supply. I suggest that you DO NOT use your PC&apos;s power supply to drive your circuit. You can easily short circuit your power supply and blow up your PC. If you really insist on doing this, you better put a fuse on both 5v and 12v between your PC and your circuit. Just remember that I told you not to!</p>
    </section>
    <section>
      <title>IDE Connector Pin-out</title>
      <p>Pin 1 on the IDE cable is the red stripe. Here the pin out for the male connector I took off a motherboard:</p>
      <image href="images/pata_hard_disk_pins.jpg"/>
    </section>
    <section>
      <p><table>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>PIN</entry>
                <entry>FUNCTION</entry>
                <entry>PIN</entry>
                <entry>FUNCTION</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>1</entry>
                <entry>/RESET</entry>
                <entry>2</entry>
                <entry>GND</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>D7</entry>
                <entry>4</entry>
                <entry>D8</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>D6</entry>
                <entry>6</entry>
                <entry>D9</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>D5</entry>
                <entry>8</entry>
                <entry>D10</entry>
              </row>
              <row>
                <entry>9</entry>
                <entry>D4</entry>
                <entry>10</entry>
                <entry>D11</entry>
              </row>
              <row>
                <entry>11</entry>
                <entry>D3</entry>
                <entry>12</entry>
                <entry>D12</entry>
              </row>
              <row>
                <entry>13</entry>
                <entry>D2</entry>
                <entry>14</entry>
                <entry>D13</entry>
              </row>
              <row>
                <entry>15</entry>
                <entry>D1</entry>
                <entry>16</entry>
                <entry>D14</entry>
              </row>
              <row>
                <entry>17</entry>
                <entry>D0</entry>
                <entry>18</entry>
                <entry>D15</entry>
              </row>
              <row>
                <entry>19</entry>
                <entry>GND</entry>
                <entry>20</entry>
                <entry>NO PIN</entry>
              </row>
              <row>
                <entry>21</entry>
                <entry/>
                <entry>22</entry>
                <entry>GND</entry>
              </row>
              <row>
                <entry>23</entry>
                <entry>/IOWR - READ Pin</entry>
                <entry>24</entry>
                <entry>GND</entry>
              </row>
              <row>
                <entry>25</entry>
                <entry>/IORD - Write Pin</entry>
                <entry>26</entry>
                <entry>GND</entry>
              </row>
              <row>
                <entry>27</entry>
                <entry/>
                <entry>28</entry>
                <entry>ALE - 1K resistor to 5v</entry>
              </row>
              <row>
                <entry>29</entry>
                <entry/>
                <entry>30</entry>
                <entry>GND</entry>
              </row>
              <row>
                <entry>31</entry>
                <entry/>
                <entry>32</entry>
                <entry/>
              </row>
              <row>
                <entry>33</entry>
                <entry>A1</entry>
                <entry>34</entry>
                <entry/>
              </row>
              <row>
                <entry>35</entry>
                <entry>A0</entry>
                <entry>36</entry>
                <entry>A2</entry>
              </row>
              <row>
                <entry>37</entry>
                <entry>/CS0 (to 5v)</entry>
                <entry>38</entry>
                <entry>/CS1 (to GND)</entry>
              </row>
              <row>
                <entry>39</entry>
                <entry>ACT - BUSY LED</entry>
                <entry>40</entry>
                <entry>GND</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <title>Build the circuit</title>
      <p>Build the circuit below. As you can see it is quite simple. As you can see, it only requires 3 resistors, a led and a bunch of wire. You can put a reset button on the IDE connector if you like, but I have found no use for it so I connect it direct to 5v.</p>
      <image href="images/pata_hard_disk_schematic.jpg" width="500" otherprops="clickable"/>
      <p>Here&apos;s what the completed circuit should look like (don&apos;t turn on the power yet):</p>
      <image href="images/pata_hard_disk_small_drive.jpg" width="500" otherprops="clickable"/>
      <image href="images/pata_hard_disk_large_drive.jpg" width="500" otherprops="clickable"/>
    </section>
    <section>
      <title>Compile and write the software to your PIC</title>
      <p>The hard disk lib (pata_hard_disk.jal) and a sample file (16f877_pata_hard_disk.jal) will be needed for this project. You will find these files in the lib &amp; sample directories of your jallib installation. </p>
      <p>The most up to date version of the sample &amp; library can be found in the jallib relase.</p>
      <p>Sample file  16f877a_pata_hard_disk.jal in the lib directory.</p>
      <p>Library file pata_hard_disk.jal in the sample directory.</p>
      <p>Now lets test it and make sure it works. Compile and program your pic with 16f877_sd_card.jal from your jallib samples directory. If you are using another pic, change the &quot;include 16f877&quot; line in 16f877_sd_card.jal to specify your PIC before compiling. </p>
      <p>Now that you have compiled it, burn the .hex file to your PIC with your programmer</p>
    </section>
    <section>
      <title>Power It Up</title>
      <p>Plug your circuit into your PC for serial port communication at 115200 baud rate. Now turn it on.  You should get data similar to the image below onto your serial port. You will also hear the hard drive turn on and off because of one of the examples in the sample file.</p>
      <b>Serial Port Output</b>
      <p><image href="images/pata_hard_disk_serial_output.jpg" width="450" otherprops="clickable"/></p>
      <p>Some of the data is not shown in the above image. If your disk is formatted with fat32 you may be able to see some readable data from the boot sector. On my drive formatted with fat32 I can read &quot;Invalid partition table Error loading operating system&quot; (not shown in the image). The AA BB CC DD EE are read/write examples that will be shown below. The last set of data is from the Identify Drive command.</p>
      <p>You now have a working hard disk circuit!</p>
    </section>
    <section>
      <title>Understand and modify the code</title>
      <p>I will go over some of the key points you need to know about hard disk coding. Open the sample file with an editor if you  have not done so already. The code in the sample file may change, therefore it may be different then what you see here. The sample file you have downloaded will always be tested and correct.</p>
      <p><b>Include the chip</b></p>
      <p>Select the PIC you wish to use and your clock frequency</p>
      <codeblock>-- include chip
include 16F877a                    -- target PICmicro
pragma target clock 20_000_000     -- oscillator frequency
-- configure fuses
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  disabled        -- no watchdog
pragma target LVP  disabled        -- no Low Voltage Programming</codeblock>
      <p><b>Disable all analog pins and wait for power to stabilize</b></p>
      <codeblock>enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stabilize</codeblock>
      <p><b>Setup serial port and choose baud rate 115200</b></p>
      <codeblock>-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baud rate
include serial_hardware
serial_hw_init()</codeblock>
      <b>Include the print library</b>
      <codeblock>include print       -- include the print library</codeblock>
      <p><b>Setup the hard disk library constants/settings</b></p>
      <p>The registers Alternate Status, Digital Output, and Drive Address registers will only be used by advanced users, so keep the default PATA_HD_USE_CS0_CS1_PINS = FALSE</p>
      <p>The pins /iowr, /iord, /cs0, /cs1 are active low pins that are supposed to require an inverter. If you leave PATA_HD_NO_INVERTER = TRUE, the PIC will do the inversion for you. You will most likely want to keep the default &quot;TRUE&quot;.</p>
      <codeblock>-- setup hard disk library

-- uses additional code space to add a speed boost to sector_read procedures
const bit PATA_HD_READ_EXTRA_SPEED = FALSE 

-- set true if you will use Alternate Status, 
-- Digital Output or Drive Address registers
const byte PATA_HD_USE_CS0_CS1_PINS = FALSE 

-- if true, an external inverter chip is not 
-- needed on /iowr, /iord, /cs0, /cs1 pins
const bit PATA_HD_NO_INVERTER = TRUE </codeblock>
      <p><b>Setup pin assignments</b></p>
      <p>Yes, pata hard disks have a lot of pins. You will need two full 8pin port&apos;s (port B and port D of 16F877) for data transfer, three register select pins, one read pulse pin and one write pulse pin. A total of 19 io pins. I am able to  comment out cs1/cs0 and save pins because of the constant we set.</p>
      <codeblock>-- pin assignments
alias     pata_hd_data_low              is portb   -- data port (low bits)
alias     pata_hd_data_low_direction    is portb_direction
alias     pata_hd_data_high             is portd   -- data port (high bits)
alias     pata_hd_data_high_direction   is portd_direction

alias     pata_hd_a0                    is pin_a3
alias     pata_hd_a0_direction          is pin_a3_direction
alias     pata_hd_a1                    is pin_a1
alias     pata_hd_a1_direction          is pin_a1_direction
alias     pata_hd_a2                    is pin_a0
alias     pata_hd_a2_direction          is pin_a0_direction

alias     pata_hd_iowr                  is pin_e0
alias     pata_hd_iowr_direction        is pin_e0_direction
alias     pata_hd_iord                  is pin_a4
alias     pata_hd_iord_direction        is pin_a4_direction

;alias     pata_hd_cs1                   is pin_a3
;alias     pata_hd_cs1_direction         is pin_a3_direction
;alias     pata_hd_cs0                   is pin_a4
;alias     pata_hd_cs0_direction         is pin_a4_direction

pata_hd_a0_direction = output    -- register select pin
pata_hd_a1_direction = output    -- register select pin
pata_hd_a2_direction = output    -- register select pin

pata_hd_iowr_direction = output  -- used for write pulse
pata_hd_iord_direction = output  -- used for read pulse

;pata_hd_cs1_direction = output   -- register select pin
;pata_hd_cs0_direction = output   -- register select pin</codeblock>
      <p><b>Now include the library</b></p>
      <codeblock>include pata_hard_disk           -- include the parallel ata ide hard disk library
pata_hd_init()                   -- initialize startup settings</codeblock>
      <p><b>Add a separator procedure, This will be used to display &quot;------&quot; onto the serial port between examples.</b></p>
      <codeblock>-- procedure for sending &quot;-----------------&quot; via serial port
procedure separator() is
   serial_hw_data = 13
   serial_hw_data = 10
   const byte str3[] = &quot;---------------------------------------&quot;
   print_string(serial_hw_data, str3)
   print_crlf(serial_hw_data)
end procedure</codeblock>
      <p><b>It is always a good idea to send something to the serial port so we know the circuit is alive. Let&apos;s send &quot;Hard Disk Sample Started&quot;</b></p>
      <codeblock>-- Send something to the serial port
separator()             -- send &quot;----&quot; via serial port
var byte start_string[] = &quot;HARD DISK SAMPLE STARTED&quot;
print_string(serial_hw_data,start_string)</codeblock>
      <p><b>Declare some user variables</b><codeblock>-- variables for the sample
var word step1
var byte data</codeblock></p>
      <p><b>EXAMPLES</b></p>
      <p>OK, now that everything is setup, we are ready for some examples. </p>
      <p>You will find that these examples are identical to the ones in the SD Card tutorial. This makes it easy for you to switch between using a hard drive and a SD Card.</p>
      <p> Before we get stated, you may want to get to know your hard drive and it&apos;s size. This way you will know what the maximum addressable sector is.</p>
      <p>On newer drives, you will see on the front sticker the number of LBA&apos;s. This is the number of sectors on the drive. We must subtract one from the number of LBA&apos;s to get the highest addressable sector since the 1st  sector is at address 0. My drive says &quot;60058656&quot; LBA&apos;s, therefore the last sector is at 60058656 - 1. </p>
      <p>Each sector is 512 bytes, so the actual size of this drive is 60058656 * 512 =  30GB</p>
      <p>On the sticker of some older drives, you will see CYL, HEADS,SEC/T. You can calculate the number of sectors with: (cylinders * heads * sectors per track). Then you may multiply that by 512 if you wish to get the size of the drive in bytes.</p>
      <p>I have left a few ways to read and write to hard disks. The usage you choose may will on the PIC data space you have, and what your application is. On a smaller PIC, you will only be able to run examples #1, #2, #5 and #6. I&apos;ll explain as I go.</p>
      <p><b>Example #1 - Read data at sector 0</b></p>
      <p>This is a low memory usage way of reading from the hard disk, however it is slower then some of the other examples later on. This method requires the use of pata_hd_start_read(), pata_hd_data_byte, and pata_hd_stop_read(). You&apos;ll see that the usage is quite simple.</p>
      <note>The variable pata_hd_data_byte is not actually a variable, it is a procedure that looks &amp; acts like a regular variable. This is called a pseudo variable. You may use this variable to read data or write data, as shown in these examples.</note>
      <p>The steps are:</p>
      <ol>
        <li>Start reading at a sector address. In this case, sector 0 (the boot sector)</li>
        <li>Loop many times while you read data. One sector is 512 bytes, we will read two sectors.</li>
        <li>Store each byte of data into the variable &quot;data&quot;. You can retrieve the data by reading the pseudo variable pata_hd_data_byte</li>
        <li>Do something with the data. Let&apos;s send it to the serial port.</li>
        <li>End the loop</li>
        <li>Tell the hard disk we are done reading. The hard disk light will go out at this step.</li>
      </ol>
      <codeblock>pata_hd_start_read(0)      -- get sd card ready for read at sector 0
for 512 * 2 loop           -- read 2 sectors (512 * 2 bytes)
  data = pata_hd_data_byte -- read 1 bytes of data
  serial_hw_write(data)    -- send byte via serial port
end loop
pata_hd_stop_read()        -- tell sd card you are done reading</codeblock>
      <p>Ok, we&apos;re done our example, so lets separate it from the next one with the separator() procedure to send some &quot;-----&quot; characters and a small delay.</p>
      <codeblock>separator()                -- separate the examples with &quot;----&quot;
_usec_delay(500_000)       -- a small delay</codeblock>
      <p><b>Example #2 - Writing data</b></p>
      <p>This example is similar to example #1, but we will be writing data to the hard disk. It requires low memory usage. As with the first example, we will be required to use 3 procedures. pata_hd_start_write(), pata_hd_data_byte and pata_hd_stop_write()</p>
      <p>Here are the steps:</p>
      <ol>
        <li>Start writing at a sector address. I choose sector 20 since it seems that it will not mess up a fat32 formatted drive, I could be wrong!</li>
        <li>Loop many times while you write your data. In this example, I am writing to 1 sector + 1/2 sector. The 2nd half of sector 2 will contain all 0&apos;s. The end of sector 2 will contain 0&apos;s because hard disks will only write data in blocks of 512, and therefore any data you have there will be overwritten.</li>
        <li>Write some data. This time we are setting the value of the pseudo variable pata_hd_data_byte. Writing to this variable will actually send data to the hard disk. We are sending &quot;A&quot;, so you will expect to read back the same data later on.</li>
        <li>End your loop</li>
        <li>Tell the hard disk we are done writing. The hard disk light will go out at this step.</li>
      </ol>
      <codeblock>pata_hd_start_write(20)    -- get sd card ready for write at sector 20
for 512 + 256 loop         -- loop 1 sector + 1 half sector (512 + 256 bytes)
  pata_hd_data_byte = &quot;A&quot;  -- write 1 bytes of data
end loop
pata_hd_stop_write()       -- tell sd card you are done reading</codeblock>
      <p>Now of course you will want to read your data back, which will be the same as in example #1, but at sector 20.</p>
      <codeblock>pata_hd_start_read(20)          -- get sd card ready for read at sector 20
for 512 + 256 loop         -- loop 1 sector + 1 half sector (512 + 256 bytes)
  data = pata_hd_data_byte       -- read 1 bytes of data
  serial_hw_write(data)    -- send byte via serial port
end loop
pata_hd_stop_read()             -- tell sd card you are done reading</codeblock>
      <p><b>Example #3 - Read and write data using a sector buffer (a 512 byte array</b>)</p>
      <p>In this example, we will use a 512 byte array for reading and writing. This 512 byte array is called a sector buffer. This method is very fast, however it will require a PIC that can fit the 512 bytes of data in it&apos;s ram space. I find it is also easier to use. I suggest PIC18f4620 with the same schematic.</p>
      <p>For writing, You will need only need to write data to the sector buffer array, then use the pata_hd_write_sector_address() procedure.</p>
      <p>Lets go through the steps, first for writing data:</p>
      <ol>
        <li>Loop 512 times (the size of the sector buffer)</li>
        <li>Set each data byte in the array</li>
        <li>End your loop</li>
        <li>Write the data to the hard disk at a sector address.</li>
        <li>Repeat the above to write more sectors.</li>
      </ol>
      <codeblock>-- fill the sector buffer with data
for 512 using step1 loop                     -- loop till the end of the sector buffer
   pata_hd_sector_buffer[step1] = &quot;B&quot;        -- set each byte of data
end loop
-- write the sector buffer to sector 20
pata_hd_write_sector_address(20)</codeblock>
      <p>Here we will write another sector (to sector 21, the next sector)</p>
      <codeblock>for 512 using step1 loop                     -- loop till the end of the sector buffer
   pata_hd_sector_buffer[step1] = &quot;C&quot;        -- set each byte of data
end loop
-- write the sector buffer to sector 21
pata_hd_write_sector_address(21)</codeblock>
      <p>OK, it&apos;s time to read back the data, which is exactly the opposite of writing. For reading, we will use the pata_read_sector_addres() procedure first, then we can read data from the sector buffer array. </p>
      <ol>
        <li>Request data from the hard disk at a sector address.</li>
        <li>Loop 512 times (the size of the sector buffer)</li>
        <li>Send each byte to the serial port.</li>
        <li>End your loop.</li>
        <li>Repeat the above to read more sectors.</li>
      </ol>
      <codeblock>-- read back the same sectors
-- read sector 20 into the sector buffer
pata_hd_read_sector_address(20)
-- now send it to the serial port
for 512 using step1 loop                     -- loop till the end of the sector buffer
   serial_hw_write(pata_hd_sector_buffer[step1]) -- send each byte via serial port
end loop</codeblock>
      <p>Here we will repeat the above to read the next sector (sector 21)</p>
      <codeblock>-- read sector 21 into the sector buffer
pata_hd_read_sector_address(21)
-- now send it to the serial port
for 512 using step1 loop                     -- loop till the end of the sector buffer
   serial_hw_write(pata_hd_sector_buffer[step1]) -- send each byte via serial port
end loop</codeblock>
      <p><b>EXAMPLE #4 - Another method for reading and writing sectors</b></p>
      <p>Example #4 is pretty straight forward. I am not going to go into too much detail on this one. It is a combination of examples 2 and 3. It is about the same speed as example #3.</p>
      <codeblock>-- get sd card ready for write at sector 20
pata_hd_start_write(20)
-- fill the sector buffer with data
for 512 using step1 loop                   -- loop till the end of the sector buffer
  pata_hd_sector_buffer[step1] = &quot;D&quot;       -- set each byte of data
end loop
-- write the sector buffer to the sd card
pata_hd_write_sector()
-- fill the sector buffer with new data
for 512 using step1 loop                   -- loop till the end of the sector buffer
  pata_hd_sector_buffer[step1] = &quot;E&quot;       -- set each byte of data
end loop
-- write the sector buffer to the sd card
pata_hd_write_sector()                     -- write the buffer to the sd card
-- tell sd card you are done writing
pata_hd_stop_write()
--
-- read back both of the same sectors
-- get sd card ready for read at sector 20
pata_hd_start_read(20)
-- read the sector into the sector buffer
pata_hd_read_sector()
-- now send it to the serial port
for 512 using step1 loop                   -- loop till the end of the sector buffer
  serial_hw_write(pata_hd_sector_buffer[step1]) -- send each byte via serial port
end loop
-- read the next sector into the sector buffer
pata_hd_read_sector()
-- now send it to the serial port
for 512 using step1 loop                   -- loop till the end of the sector buffer
  serial_hw_write(pata_hd_sector_buffer[step1]) -- send each byte via serial port
end loop
pata_hd_stop_read()                          -- tell sd card you are done reading</codeblock>
      <p><b>EXAMPLE #5 - Sending a command to the hard disk (Spin Up/ Spin Down)</b></p>
      <p>Hard drives have other features that may be useful. In this short example, I will show how to turn on and off the hard disk motor. </p>
      <p>To turn on/off the hard disk motor, you will be writing to the &quot;command register&quot;, and you will be sending the &quot;spin down&quot; command. If you browse through the hard disk library file pata_hard_disk.jal, you will see some constants that you may use for other commands. For more information, you can read &quot;connecting ide drives by tilmann reh&quot; at <xref href="http://www.gaby.de/gide/IDE-TCJ.txt" format="html" scope="external">http://www.gaby.de/gide/IDE-TCJ.txt</xref></p>
      <p>With this &quot;spin down&quot; command, you will actually hear the hard drive motor turn off</p>
      <codeblock>pata_hd_register_write (PATA_HD_COMMAND_REG,PATA_HD_SPIN_DOWN)    -- turn off motor</codeblock>
      <p>Now give some delay.</p>
      <codeblock>_usec_delay(5_000_000) -- 5 sec delay</codeblock>
      <p>Then of course turn the drive motor back on</p>
      <codeblock>pata_hd_register_write (PATA_HD_COMMAND_REG,PATA_HD_SPIN_UP)      -- turn on motor</codeblock>
      <p><b>EXAMPLE #6 - Identify Drive Command</b></p>
      <p>The identify drive command loads 512 bytes of data for you that contains information about your drive. You can retrieve info like drive serial number, model number,  drive size, number of cylinders, heads, sectors per track and a bunch of other data required by your PC. Of course you can read more info on this in &quot;connecting ide drives by tilmann reh&quot; at <xref href="http://www.gaby.de/gide/IDE-TCJ.txt" format="html" scope="external">http://www.gaby.de/gide/IDE-TCJ.txt</xref></p>
    </section>
    <section>
      <p>You will have to follow these steps to receive this drive information:</p>
      <ol>
        <li>Send the &quot;Identify Drive&quot; command to the command register</li>
        <li>Wait till the hard drive is ready for you to read it</li>
        <li>read the data, and do something with it (send it to the serial port)</li>
      </ol>
      <codeblock>-- send the identify drive command
pata_hd_register_write(PATA_HD_COMMAND_REG,PATA_HD_IDENTIFY_DRIVE)

-- check if drive is ready reading and set data ports as inputs
-- this MUST be used before reading since we did not use pata_hd_start_read
pata_hd_data_request(PATA_HD_WAIT_READ)

-- Read 512 bytes
for 512 loop                            -- 256 words, 512 bytes per sector
   data = pata_hd_data_byte
   serial_hw_data = data
end loop                                -- drive info high/low bytes are in reverse order</codeblock>
    </section>
    <section>
      <title>Your Done!</title>
      <p>That&apos;s it, Now you can read &amp; write to all those hard drives you have laying around. You can read raw data from drives and possibly even get back some lost data.</p>
      <p>Alright,  go build that hard disk thingy you where dreaming about!</p>
    </section>
  </body>
</topic>
