-- Title: USB HID keyboard device demo for the PIC16F1455
-- Author: Rob Jansen, Copyright (c) 2018..2018, all rights reserved.
-- Adapted-by: 
-- Compiler: 2.4q6
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application emulates a keyboard USB human interface device
-- (HID), once the USB device has been conifgured and the USB HID device is recognized by
-- the host operating systems, it will generate keyboard chars if boot program pin is low
--
-- Sources: http://www.usb.org for USB specifications
--
-- Notes: compiled with following flags:
-- add -no-variable-reuse when debugging flags are set due to a compiler issue
--
-- ------------------------------------------------------
--
-- This file was orginally copied from 18f14k50_hid_keyboard.jal and made
-- operational to work for the PIC16F1454/55/59 using the modified usb driver
-- as to function without the availability of a POSTINC1 feature which is not
-- present in these PICs.
--

;@jallib section chipdef
-- chip setup
include 16f1455

;@jallib section board_description
-- For hardware a 14 pin DIL PIC16F1455 was used. The circuit can be powered by
-- the USB connection and connected as follows:
-- *) USB data- wire to pin 12 (D-)
-- *) USB data+ wire to pin 13 (D+)
-- *) USB power wire to pin 1 (Vdd). Don't forget 100nF decoupling capacitor.
-- *) USB ground wire to pin 14 (Vss)
-- *) A resistor of 33kOhm to pin 4 (MCLR) and power. We use internal reset.
-- *) A capacitor of 220nF to pin 11 (Vusb3v3) and ground.
-- *) A crystal of 12 MHz to pin 2 and pin 3 with 2*18 pF capacitors to ground.
-- Settings are also given to use the internal oscilator of the PIC so no need
-- for the 12 MHz crystal which saves you a crystal and 2 pins on the chip.
-- The configuration runs at an internal clock of 48 MHz.
-- Two additional indication LEDs are connected, see definition below.

pragma target clock       48_000_000

-- Compiler options.
pragma warn all no              -- We do not want to know all compiler warnings
pragma opt variable_reduce yes

-- fuses
-- Settings for external 12 MHz crystal and system clock 48 MHz.
pragma target OSC           HS       -- External crystal
pragma target CLKOUTEN      ENABLED  -- CLKOUT function is enabled
pragma target PLLMULT       N4X      -- PLL Multipler Selection Bit, 4x Output Frequency Selected

-- Settings for internal clock and system clock 48 MHz.
--pragma target OSC           INTOSC_NOCLKOUT -- Internal clock
--pragma target CLKOUTEN      DISABLED -- CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
--pragma target PLLMULT       N3X      -- PLL Multipler Selection Bit, 3x Output Frequency Selected

-- Other fuses
pragma target CPUDIV        P1       -- NO CPU system divide
pragma target USBLSCLK      F48MHZ   -- System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
pragma target PLLEN         ENABLED  -- 3x or 4x PLL Enabled
pragma target FCMEN         DISABLED -- Fail-Safe Clock Monitor is disabled
pragma target WRT           DISABLED -- Write protection off
pragma target STVR          ENABLED  -- Stack Overflow or Underflow will cause a Reset
pragma target LPBOR         DISABLED -- Low-Power BOR is disabled
pragma target IESO          DISABLED -- Internal/External Switchover Mode is disabled
pragma target PWRTE         DISABLED -- power up timer
pragma target BROWNOUT      DISABLED -- no brownout detection
pragma target WDT           DISABLED -- Watchdog disabled
pragma target MCLR          internal -- Internal reset
pragma target LVP           DISABLED -- no low-voltage programming
pragma target VOLTAGE       MAXIMUM  -- brown out voltage
pragma target CP            DISABLED -- Program memory code protection is disabled

OSCCON        = 0b1111_1100          -- Select PLL,3x, 16MHz internal oscillator

-- Enable weak pull-up for port a.
OPTION_REG_WPUEN = FALSE             -- Enable weak pull-up for port a.
WPUA          = 0b0011_1000          -- Weak-pull up for relevant port a bits.

include delay

;@jallib section bootloader
alias bootloader_program_pin is pin_c2  -- Pin 8.
alias bootloader_program_pin_direction  is pin_c2_direction
;@jallib section led
-- LED IO definition
alias led             is pin_c3         -- Pin 7.
alias led_direction   is pin_c3_direction
alias led2            is pin_c4         -- Pin 6.
alias led2_direction  is pin_c4_direction

include usb_keyboard

-- set all inputs to digital
enable_digital_io()

-- setup direction bits
led_direction = output
led2_direction = output
bootloader_program_pin_direction = input

var bit latched_switch = bootloader_program_pin

var byte key_value = USB_KEYBOARD_KEY_A

-- intialize the library
usb_keyboard_init()

-- main loop
forever loop
	-- poll the usb flush function on a regular base, in order to
	-- serve the USB requests
	usb_keyboard_flush()
	
	-- check if USB device has been configured by the HOST
	if usb_is_configured()  then
	
		led = usb_keyboard_led_caps_lock
		led2 = usb_keyboard_led_num_lock
		
		if ( latched_switch != bootloader_program_pin ) then
		
			latched_switch = bootloader_program_pin
			
			if ( bootloader_program_pin == low )then

				-- send key code towards the USB host
				-- ush_keyboard_send_key( USB_KEYBOARD_MKEY_LEFT_SHIFT, key_value )
				ush_keyboard_send_key( 0x00, key_value )
				
				-- next key code
				key_value = key_value + 1
				
				if ( key_value > USB_KEYBOARD_KEY_Z ) then
					key_value = USB_KEYBOARD_KEY_A
				end if
				
			else
				-- depress key
				ush_keyboard_send_key( 0, 0 )
			end if
		end if
			
		-- debounce switch
		delay_1ms(50)		
	end if
end loop
