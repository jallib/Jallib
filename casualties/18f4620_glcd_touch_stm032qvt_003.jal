-- Title: GLCD Sample for Color 320x240 stm032qvt-003 TFT display
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Sample usage of Color GLCD 320x240 stm032qvt-003 TFT display.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
-- http://www.divshare.com/download/11463401-4a9
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 32 mhz internal resonator
pragma target osc INTOSC_NOCLKOUT  -- hs crystal or resonator
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  CONTROL
pragma target lvp  enabled 
pragma target MCLR external        -- reset externally
--
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = TRUE  -- multiply internal osc by 4
--
enable_digital_io()                -- make all pins digital I/O
--
_usec_delay(100_000) -- wait for power to settle

include delay
include print
include format

include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_64) -- init spi, choose mode and speed
alias spi_master is spi_master_hw

-- font libraries
-- declare a user-defined font
-- it's a kind of sprite definition...
-- must be defined before glcd_font include
const byte FONT_UDF_0XFE = 0xFE
const byte FONT_UDF_0XFE_BYTE_PER_CHAR = 5
const byte FONT_UDF_0XFE_WIDTH = 5
const byte FONT_UDF_0XFE_HEIGHT = 8
const byte FONT_UDF_0XFE_BIT_DIRECTION = FONT_BOTTOM_LEFT_VERTICAL
const byte FONT_UDF_0XFE_CHARS [] =
{
   0x81,0x81,0x42,0x24,0x18,        -- >
   0x00,0x81,0x42,0x3c,0x00,        -- )
   0x00,0x00,0xff,0x00,0x00,        -- |
   0x00,0x3c,0x42,0x81,0x00,        -- (
   0x18,0x24,0x42,0x81,0x81         -- <
}

include glcd_5x7_font
include glcd_6x8_font
include glcd_8x12_font
include glcd_font

-- Setup glcd_stm032qvt_003
alias glcd_low_port            is portb -- 8 bit port low
alias glcd_low_port_direction  is portb_direction
alias glcd_high_port           is portd -- 8 bit port high
alias glcd_high_port_direction is portd_direction

alias glcd_reset               is pin_a0 -- reset
alias glcd_reset_direction     is pin_a0_direction
alias glcd_rs                  is pin_a1 -- command switch (command select)
alias glcd_rs_direction        is pin_a1_direction
alias glcd_wr                  is pin_a2 -- Write control (write select)
alias glcd_wr_direction        is pin_a2_direction
alias glcd_rd                  is pin_e1 -- Reading Control
alias glcd_rd_direction        is pin_e1_direction
alias glcd_cs                  is pin_e2 -- lcd chip select
alias glcd_cs_direction        is pin_e2_direction
--
glcd_low_port_direction = OUTPUT
glcd_high_port_direction = OUTPUT
glcd_reset_direction = OUTPUT
glcd_wr_direction = OUTPUT
glcd_rd_direction = OUTPUT
glcd_cs_direction = OUTPUT
glcd_rs_direction = OUTPUT
--
-- Using block write is fastest, but you can only use one font type:
-- FONT_TOP_LEFT_HORIZONTAL
const GLCD_USE_BLOCK_WRITE = TRUE
include glcd_stm032qvt_003

stm_glcd_init()

const FONT_AUTO_WRAP = TRUE
include glcd_common

-- Setup the GLCD touch controller.
alias touch_cs                is pin_a3
alias touch_cs_direction      is pin_a3_direction
alias touch_irq               is pin_a4
alias touch_irq_direction     is pin_a4_direction
--
touch_cs_direction = output        -- touch chip select
touch_irq_direction = input        -- optional interrupt pin
--
const byte TOUCH_HIGH_POWER_MODE = LOW
const TOUCH_USE_INTERRUPT = TRUE
const TOUCH_8_BIT_RESOLUTION = TRUE -- TRUE = 8bit, FALSE = 12bit (not supported yet)
--
include glcd_touch_ad7843
--
touch_init()

const byte image[3200] = {
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0x7D,0xEF,
   0xBA,0xD6,0xB6,0xB5,0xF3,0x9C,0xB2,0x94,0xB3,0x9C,0xB2,0x94,0x34,0xA5,0xF7,0xBD,
   0xFB,0xDE,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0xFB,0xDE,0xF3,0x9C,0xCB,0x5A,
   0xC7,0x39,0x04,0x21,0x82,0x10,0x42,0x10,0x42,0x10,0x41,0x08,0x83,0x18,0x45,0x29,
   0xC7,0x39,0x0C,0x63,0x75,0xAD,0x3C,0xE7,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xE7,0xB2,0x94,0x08,0x42,0xC3,0x18,0x82,0x10,
   0x04,0x21,0x45,0x29,0x86,0x31,0x86,0x31,0x86,0x31,0x86,0x31,0x45,0x29,0x04,0x21,
   0x82,0x10,0x41,0x08,0xC3,0x18,0x08,0x42,0xF3,0x9C,0x3C,0xE7,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFB,0xDE,0x0C,0x63,0xC3,0x18,0xC3,0x18,0x45,0x29,0xC7,0x39,
   0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0xC7,0x39,0xC7,0x39,
   0x86,0x31,0x86,0x31,0x04,0x21,0x41,0x08,0x82,0x10,0xCB,0x5A,0xBA,0xD6,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFB,0xDE,0xCB,0x5A,0x82,0x10,0x45,0x29,0xC7,0x39,0x08,0x42,0x08,0x42,
   0x09,0x4A,0x49,0x4A,0x49,0x4A,0x49,0x4A,0x49,0x4A,0x49,0x4A,0x08,0x42,0xC7,0x39,
   0xC7,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0x83,0x18,0x00,0x00,0xC8,0x41,0x38,0xC6,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0x7D,0xEF,0x8E,0x73,0x82,0x10,0x45,0x29,0xC7,0x39,0x08,0x42,0x09,0x4A,0x8A,0x52,
   0x30,0x84,0xCF,0x7B,0x8A,0x52,0x49,0x4A,0x4A,0x52,0x49,0x4A,0xCB,0x5A,0xCF,0x7B,
   0x0C,0x63,0x08,0x42,0xC7,0x39,0x86,0x31,0x45,0x29,0xC3,0x18,0x00,0x00,0x49,0x4A,
   0xBA,0xD6,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xF3,0x9C,0xC3,0x18,0x04,0x21,0xC7,0x39,0x08,0x42,0x49,0x4A,0x49,0x4A,0x72,0x94,
   0x7D,0xEF,0x7D,0xEF,0xB2,0x94,0x4A,0x52,0x49,0x4A,0x8A,0x52,0x75,0xAD,0xBE,0xF7,
   0xBA,0xD6,0x4D,0x6B,0xC7,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0xC3,0x18,0x41,0x08,
   0xCF,0x7B,0x7C,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBA,0xD6,
   0x08,0x42,0x82,0x10,0xC7,0x39,0x08,0x42,0x49,0x4A,0x49,0x4A,0x8E,0x73,0xFB,0xDE,
   0xFF,0xFF,0xBE,0xF7,0xBA,0xD6,0x8E,0x73,0x08,0x42,0x30,0x84,0x3C,0xE7,0x7D,0xEF,
   0xFF,0xFF,0xB6,0xB5,0x49,0x4A,0xC7,0x39,0x86,0x31,0x45,0x29,0x04,0x21,0x41,0x08,
   0x45,0x29,0xB6,0xB5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0x71,0x8C,
   0x41,0x08,0x45,0x29,0x08,0x42,0x49,0x4A,0x49,0x4A,0x4A,0x52,0xB2,0x94,0xBE,0xF7,
   0xBE,0xF7,0xB2,0x94,0xCF,0x7B,0xCF,0x7B,0x49,0x4A,0xB6,0xB5,0xF3,0x9C,0x0C,0x63,
   0x38,0xC6,0xBA,0xD6,0x0C,0x63,0x87,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0xC3,0x18,
   0x41,0x08,0x30,0x84,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xE7,0xCB,0x5A,
   0x41,0x08,0xC7,0x39,0x08,0x42,0x49,0x4A,0x4A,0x52,0x8A,0x52,0xF3,0x9C,0xFF,0xFF,
   0x7D,0xEF,0xC7,0x39,0xC3,0x18,0x0C,0x63,0xCB,0x5A,0xB6,0xB5,0xB2,0x94,0xCB,0x5A,
   0x75,0xAD,0xFA,0xD6,0x4D,0x6B,0x87,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0x04,0x21,
   0x41,0x08,0x8A,0x52,0x79,0xCE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x38,0xC6,0x86,0x31,
   0x04,0x21,0xC8,0x41,0x49,0x4A,0x49,0x4A,0x4A,0x52,0x49,0x4A,0xB1,0x8C,0xBE,0xF7,
   0xBE,0xF7,0xB2,0x94,0xCF,0x7B,0xCF,0x7B,0x49,0x4A,0x74,0xA5,0x7D,0xEF,0x7C,0xE7,
   0xBE,0xF7,0x79,0xCE,0x0C,0x63,0xC7,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0x04,0x21,
   0x82,0x10,0x45,0x29,0x75,0xAD,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x34,0xA5,0x82,0x10,
   0x86,0x31,0x08,0x42,0x49,0x4A,0x49,0x4A,0x8A,0x52,0x49,0x4A,0x4D,0x6B,0xBA,0xD6,
   0xFF,0xFF,0xFF,0xFF,0x79,0xCE,0x0D,0x63,0xC7,0x39,0xCF,0x7B,0x7D,0xEF,0xFF,0xFF,
   0xFF,0xFF,0x75,0xAD,0x08,0x42,0x86,0x31,0xC7,0x39,0x86,0x31,0x45,0x29,0x45,0x29,
   0xC3,0x18,0xC3,0x18,0xB2,0x94,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0xB2,0x8C,0x41,0x08,
   0xC7,0x39,0x08,0x42,0x49,0x4A,0x49,0x4A,0x8A,0x52,0x8A,0x52,0x4A,0x4A,0xD0,0x7B,
   0x7A,0xC6,0x7B,0xBE,0x90,0x6B,0xC9,0x39,0x88,0x31,0xC9,0x39,0xB3,0x84,0xBB,0xC6,
   0xF8,0xB5,0xCC,0x5A,0x86,0x31,0xC7,0x39,0xC7,0x39,0x86,0x31,0x45,0x29,0x45,0x29,
   0xC4,0x20,0x41,0x08,0x30,0x84,0x3C,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xE7,0x8A,0x4A,0xC3,0x10,
   0xC7,0x39,0x08,0x42,0x49,0x4A,0x49,0x4A,0x4A,0x4A,0x4A,0x42,0x09,0x3A,0x08,0x4A,
   0x09,0x6B,0x49,0x7B,0xC6,0x7A,0x05,0x83,0x46,0x83,0xC5,0x7A,0xC6,0x72,0x09,0x7B,
   0x48,0x5A,0x87,0x31,0x88,0x21,0x88,0x29,0x86,0x31,0x86,0x31,0x45,0x29,0x45,0x29,
   0x04,0x21,0x41,0x08,0x4A,0x4A,0xBA,0xD6,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xC5,0x82,0x50,0x05,0x41,
   0xC7,0x29,0x08,0x42,0x49,0x4A,0x4A,0x42,0x49,0x4A,0x09,0x7B,0x88,0x9B,0xC6,0xB3,
   0x21,0xD4,0xA0,0xDC,0xE1,0xE4,0x61,0xED,0x61,0xED,0x21,0xED,0xA0,0xE4,0x20,0xDC,
   0x80,0xCB,0x43,0xAB,0xC4,0x82,0x06,0x5A,0x47,0x21,0x46,0x29,0x45,0x29,0x04,0x29,
   0x04,0x19,0x82,0x10,0x82,0x18,0xF3,0x9C,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7D,0xEF,0x4D,0x93,0x00,0xA0,0x82,0xB8,
   0xC7,0x31,0x09,0x32,0x49,0x4A,0x86,0x7A,0x43,0xC3,0x6B,0xED,0xF4,0xF6,0xEB,0xFD,
   0x20,0xFD,0x20,0xFD,0x60,0xFD,0xA0,0xFD,0xA0,0xFD,0x60,0xFD,0x60,0xFD,0x20,0xFD,
   0xE0,0xFC,0xA0,0xFC,0x60,0xF4,0xC1,0xDB,0x83,0x9A,0xC5,0x49,0x45,0x29,0x04,0x19,
   0xC4,0x20,0x82,0x38,0x00,0x50,0xCB,0x6A,0xBA,0xD6,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xEE,0x04,0xA1,0x00,0xC0,0x00,0xF0,
   0xC3,0xA0,0xC8,0x41,0x49,0x42,0x05,0x9B,0x20,0xFC,0xA4,0xFC,0x69,0xFD,0xE8,0xFD,
   0x63,0xFD,0x20,0xFD,0x60,0xFD,0x60,0xFD,0x60,0xFD,0x20,0xFD,0x20,0xFD,0xE0,0xFC,
   0xE0,0xFC,0xA0,0xFC,0x60,0xFC,0x20,0xFC,0x41,0xD3,0xC5,0x49,0x45,0x19,0xC4,0x38,
   0x82,0x68,0x41,0x88,0x00,0x70,0x49,0x5A,0x79,0xCE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xF6,0x82,0xC0,0x00,0xD0,0x86,0xC1,
   0x46,0xF1,0x41,0xC8,0x45,0x79,0x89,0x52,0x88,0x62,0x86,0x6A,0xC6,0x7A,0xC4,0xBB,
   0xE1,0xFC,0x60,0xFD,0x60,0xFD,0xA0,0xFD,0xA0,0xFD,0x60,0xFD,0x60,0xFD,0xE0,0xFC,
   0x60,0xE4,0x03,0x93,0x84,0x72,0x44,0x6A,0xC5,0x41,0x45,0x29,0xC3,0x58,0x41,0xA8,
   0x40,0x98,0x00,0xB0,0x00,0x60,0x0C,0x6B,0x79,0xCE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7D,0xEF,0xCE,0x83,0x82,0x88,0x00,0xF8,0xC4,0xD8,
   0x0C,0xF3,0x8A,0xFA,0x82,0xE8,0x82,0xB0,0x45,0x69,0xC7,0x51,0x08,0x42,0x08,0x3A,
   0x86,0x5A,0x83,0x9B,0xA2,0xBC,0x22,0xCD,0x21,0xCD,0xA1,0xC4,0x22,0xB4,0xC4,0x7A,
   0x06,0x3A,0x86,0x29,0x45,0x29,0x05,0x31,0xC4,0x50,0x41,0x90,0x00,0xC0,0x00,0xA8,
   0x00,0xA0,0x00,0xA8,0x00,0x30,0x4A,0x4A,0xBA,0xD6,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0x7D,0xEF,0x8E,0x73,0xC3,0x18,0x05,0x39,0x82,0xA8,0x00,0xF8,
   0xC3,0xF8,0x4D,0xFB,0x4D,0xFB,0xC7,0xF9,0xC3,0xF0,0x82,0xD8,0xC3,0xB0,0x04,0x81,
   0x45,0x61,0x46,0x51,0x86,0x49,0x86,0x49,0x46,0x41,0x45,0x41,0x45,0x41,0x45,0x41,
   0x05,0x49,0x04,0x61,0x82,0x90,0x41,0xB0,0x00,0xD0,0x00,0xC8,0x00,0xA8,0x00,0xA8,
   0x00,0xB8,0x41,0x58,0x82,0x10,0x82,0x10,0xB2,0x94,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xBE,0xF7,0xCF,0x7B,0x82,0x10,0x04,0x21,0x86,0x29,0x86,0x41,0x04,0x99,
   0x40,0xE8,0x41,0xF8,0x86,0xF9,0xCB,0xFA,0x49,0xFA,0x82,0xF8,0x00,0xF8,0x00,0xF0,
   0x00,0xE8,0x41,0xD8,0x41,0xD0,0x41,0xC0,0x41,0xC0,0x41,0xC0,0x41,0xC0,0x41,0xC8,
   0x00,0xD0,0x00,0xE0,0x00,0xE0,0x00,0xD8,0x00,0xD0,0x00,0xB8,0x00,0xA8,0x41,0x88,
   0x82,0x48,0x82,0x10,0x82,0x10,0x00,0x00,0x45,0x29,0x79,0xCE,0xFF,0xFF,0xFF,0xFF,
   0xBE,0xF7,0xF3,0x9C,0x82,0x10,0xC3,0x18,0x45,0x29,0x86,0x31,0xC7,0x31,0x30,0x7C,
   0xF3,0xDC,0x86,0xE1,0x00,0xF0,0x00,0xF8,0x41,0xF8,0x41,0xF8,0x00,0xF8,0x00,0xF8,
   0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,
   0x00,0xE8,0x00,0xE0,0x00,0xE0,0x00,0xD8,0x00,0xC8,0x41,0xA0,0x8A,0x9A,0x0C,0x63,
   0x04,0x11,0x82,0x10,0x82,0x10,0x41,0x08,0x00,0x00,0x4D,0x6B,0x7D,0xEF,0xFF,0xFF,
   0xFB,0xDE,0x08,0x42,0x42,0x10,0x45,0x29,0x86,0x31,0x86,0x31,0x49,0x4A,0x38,0xBE,
   0xFF,0xFF,0x38,0xD6,0x86,0xA9,0x00,0xC8,0x00,0xE0,0x00,0xF0,0x00,0xF8,0x00,0xF8,
   0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF0,0x00,0xF0,
   0x00,0xE8,0x00,0xE0,0x00,0xD0,0xC3,0x98,0x8A,0x8A,0xB2,0xA4,0xBA,0xC6,0xF7,0xB5,
   0x08,0x42,0x41,0x08,0x82,0x10,0x41,0x08,0x00,0x00,0x45,0x29,0xF7,0xBD,0xFF,0xFF,
   0x71,0x8C,0x41,0x08,0x04,0x21,0x45,0x29,0x86,0x31,0x86,0x31,0x0C,0x63,0x3C,0xE7,
   0xFF,0xFF,0x79,0xD6,0x46,0xB9,0x00,0xE0,0x42,0xC8,0x82,0xA8,0x82,0xB0,0x41,0xD8,
   0x82,0xE8,0x82,0xF0,0x41,0xE8,0x41,0xE8,0x41,0xE8,0x41,0xF0,0x41,0xE8,0x41,0xD8,
   0x04,0xC1,0x08,0x92,0x4D,0x8B,0x34,0xA5,0xFB,0xC6,0xFB,0xD6,0xBA,0xCE,0x3C,0xE7,
   0x30,0x84,0xC3,0x18,0x41,0x08,0x41,0x08,0x00,0x00,0x41,0x08,0xCF,0x7B,0x7D,0xEF,
   0x49,0x4A,0x00,0x00,0x04,0x21,0x45,0x29,0x46,0x31,0x86,0x31,0x30,0x84,0xFF,0xFF,
   0xFF,0xF7,0xF7,0xDD,0x09,0xDA,0x83,0xF8,0x01,0xF0,0x42,0xC0,0x82,0x98,0x49,0x9A,
   0xF3,0xB4,0xF3,0xCC,0x71,0xBC,0x8E,0xBB,0x8E,0xBB,0x30,0xBC,0x71,0xBC,0xF3,0xBC,
   0xB6,0xBD,0xFB,0xCE,0xBE,0xE7,0x7D,0xE7,0x3B,0xDF,0xBA,0xD6,0x79,0xCE,0xFB,0xDE,
   0x75,0xAD,0x86,0x31,0x41,0x08,0x41,0x08,0x00,0x00,0x00,0x00,0x49,0x4A,0xFB,0xDE,
   0x04,0x21,0x41,0x08,0x04,0x21,0x45,0x29,0x45,0x29,0x87,0x39,0xB2,0x94,0xFF,0xFF,
   0xBE,0xF7,0x34,0xDD,0x0C,0xEB,0x09,0xFA,0x00,0xF0,0x01,0xD8,0x00,0xD8,0x8B,0xD2,
   0x7D,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xBE,0xFF,0x7D,0xEF,0xFB,0xDE,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0xBA,0xD6,
   0x78,0xC6,0xC7,0x39,0x00,0x00,0x41,0x08,0x00,0x00,0x00,0x00,0xC7,0x39,0x79,0xCE,
   0x00,0x00,0x82,0x10,0xC3,0x18,0x04,0x21,0x05,0x29,0x86,0x31,0xB3,0x9C,0xFF,0xFF,
   0xFF,0xF7,0x75,0xDD,0xC7,0xE9,0xC7,0xF9,0x01,0xF8,0x01,0xF0,0x00,0xE8,0x49,0xE2,
   0xFB,0xEE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xBE,0xF7,0x7D,0xEF,0xFB,0xDE,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0xBA,0xD6,
   0xB9,0xCE,0x08,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC7,0x39,0x38,0xC6,
   0x00,0x00,0x82,0x10,0x82,0x10,0x04,0x21,0x04,0x21,0x45,0x29,0x30,0x84,0xFF,0xFF,
   0xFF,0xFF,0x38,0xDE,0xC4,0xD0,0x00,0xF0,0x01,0xF8,0x00,0xF8,0x00,0xF0,0x08,0xD2,
   0xFB,0xE6,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xBE,0xF7,0x7D,0xEF,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0x79,0xCE,0xBA,0xD6,
   0x79,0xCE,0xC7,0x39,0x41,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x31,0x38,0xC6,
   0x00,0x00,0x00,0x00,0xC3,0x18,0xCB,0x5A,0x86,0x31,0xC3,0x18,0xCB,0x5A,0x7D,0xEF,
   0xFF,0xFF,0x7D,0xEF,0xCF,0xBB,0xC3,0xB0,0x41,0xD0,0x41,0xD0,0x82,0xB8,0x4D,0xB3,
   0x7D,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xBE,0xF7,0xBE,0xF7,0x3D,0xEF,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0x79,0xCE,0xFA,0xD6,
   0xF7,0xBD,0x04,0x21,0x86,0x31,0x04,0x21,0x00,0x00,0x00,0x00,0x86,0x31,0x38,0xC6,
   0x86,0x31,0xC3,0x18,0xCB,0x5A,0x75,0xAD,0xCF,0x7B,0x41,0x08,0x86,0x31,0xF7,0xBD,
   0xFF,0xFF,0xFF,0xFF,0xBE,0xEF,0x74,0xB5,0x30,0x9C,0x30,0x9C,0x72,0xA4,0xBB,0xD6,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xBE,0xF7,0x7D,0xEF,0x3C,0xE7,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0x79,0xCE,0x3C,0xE7,
   0x71,0x8C,0x81,0x08,0x0C,0x63,0xCF,0x7B,0x82,0x10,0x00,0x00,0x8A,0x52,0x38,0xC6,
   0x75,0xAD,0x71,0x8C,0xB6,0xB5,0x3C,0xE7,0xFB,0xDE,0xC7,0x39,0x00,0x00,0xCF,0x73,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,
   0x7D,0xEF,0x7D,0xEF,0x3B,0xDF,0xFA,0xD6,0x79,0xCE,0x79,0xCE,0xFB,0xDE,0xB9,0xCE,
   0xC7,0x39,0xC4,0x20,0x71,0x8C,0xBA,0xD6,0x71,0x8C,0xCB,0x5A,0xB2,0x94,0xBA,0xD6,
   0xFF,0xFF,0x7D,0xEF,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xB6,0xB5,0x46,0x29,0x05,0x19,
   0x75,0xA5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,
   0x7D,0xEF,0x3C,0xE7,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0xBA,0xD6,0xFC,0xDE,0x4E,0x63,
   0x42,0x08,0x0C,0x63,0xF7,0xBD,0xBE,0xF7,0xFF,0xFF,0xFB,0xDE,0xFB,0xDE,0xBE,0xF7,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF4,0x9C,0x04,0x21,
   0x05,0x21,0xB6,0xA5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0xBE,0xF7,0x7D,0xEF,
   0x3C,0xE7,0xFB,0xDE,0xBA,0xD6,0x79,0xCE,0xFB,0xDE,0xBB,0xD6,0xD1,0x73,0x83,0x18,
   0x86,0x39,0x34,0x9D,0xBD,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xFF,0x35,0xD6,0xEB,0xCC,0x43,0xB3,
   0x40,0x51,0x05,0x19,0xF5,0x8C,0xBE,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBE,0xF7,0xBE,0xF7,0x7D,0xEF,0x7D,0xEF,0x3C,0xE7,
   0xFB,0xDE,0xBA,0xDE,0xBA,0xD6,0x3C,0xDF,0x3A,0xBE,0x4F,0x63,0x82,0x49,0x40,0xA3,
   0x23,0xB4,0xCC,0x83,0x3A,0xBE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0xF7,0xB5,0xBD,0x82,0x92,0x20,0xF4,0xA0,0xFC,
   0x60,0xE4,0x40,0x82,0x84,0x41,0x8F,0x6B,0x77,0xAD,0x3D,0xE7,0xFF,0xFF,0xFF,0xFF,
   0xFE,0xFF,0xBE,0xF7,0xBE,0xF7,0xBE,0xF7,0x7D,0xEF,0x7D,0xEF,0x3C,0xE7,0xFB,0xDE,
   0xFB,0xDE,0x3D,0xE7,0xBB,0xCE,0x36,0x9D,0x0B,0x6B,0x41,0x6A,0x60,0xC4,0x20,0xFE,
   0x60,0xF5,0x00,0x8B,0xC7,0x6A,0x38,0xC6,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7D,0xEF,0x4B,0x7B,0x80,0xB2,0xA0,0xFC,0xA0,0xFC,
   0xE0,0xFC,0xE0,0xFC,0xC0,0xCB,0xC1,0x8A,0x45,0x62,0x4D,0x6B,0xB3,0x94,0xF7,0xBD,
   0x3D,0xDF,0xFF,0xF7,0xFF,0xFF,0xBE,0xF7,0x7D,0xEF,0x7D,0xEF,0x7D,0xE7,0x3D,0xDF,
   0xBA,0xC6,0x75,0xA5,0x8D,0x7B,0x84,0x7A,0x40,0xB3,0xE0,0xEC,0xE0,0xFD,0xE0,0xFD,
   0x60,0xF5,0x20,0xE5,0xA0,0xD4,0x0A,0x6B,0xFB,0xDE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7D,0xEF,0xCC,0x93,0x40,0xEB,0x60,0xFC,0xA0,0xFC,
   0xE0,0xFC,0x20,0xFD,0x60,0xFD,0x20,0xF5,0xA0,0xD4,0xC0,0xBB,0x42,0x9B,0x45,0x8B,
   0x6B,0x9C,0xAE,0x9C,0x71,0x8C,0xB3,0x94,0x33,0x9D,0x34,0xA5,0xF2,0xA4,0xF0,0xB4,
   0xCA,0x9B,0x04,0x9B,0x40,0xBB,0x20,0xE4,0x20,0xFD,0xA0,0xFD,0xA0,0xFD,0xE0,0xFD,
   0xE0,0xFD,0xE0,0xFD,0x20,0xC4,0x88,0x5A,0x38,0xBE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x78,0xD6,0x46,0xAB,0x40,0xDB,0x20,0xF4,
   0x60,0xFC,0xA0,0xFC,0xE0,0xFC,0x60,0xFD,0xA0,0xFD,0x60,0xFD,0x20,0xF5,0xA0,0xDC,
   0xC0,0xB3,0xC0,0x51,0x86,0x29,0x0D,0x63,0x8F,0x7B,0x0D,0x5B,0xC7,0x41,0x01,0x82,
   0x00,0xC3,0xC0,0xE3,0x60,0xFC,0xA0,0xFC,0xE0,0xFC,0xE0,0xFC,0x60,0xF5,0x60,0xF5,
   0x20,0xE5,0x80,0x9B,0x86,0x62,0x30,0x84,0x79,0xCE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x38,0xC6,0x2D,0x9C,0x05,0x93,
   0x43,0xA3,0x82,0xB3,0xC2,0xBB,0xC2,0xBB,0x22,0xB4,0x82,0xA3,0x42,0x93,0xC3,0x7A,
   0x85,0x62,0x0B,0x63,0x71,0x84,0xB6,0xB5,0x79,0xCE,0x79,0xC6,0xB5,0xAD,0x70,0x94,
   0x4A,0x8B,0x06,0x83,0x04,0x93,0x04,0x9B,0x43,0x9B,0x43,0x9B,0x43,0x93,0x04,0x83,
   0x08,0x73,0x8D,0x73,0xB3,0x94,0x79,0xCE,0x7D,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xDF,0x38,0xBE,
   0x75,0xB5,0x33,0xA5,0x33,0xA5,0xF3,0x9C,0xF3,0x9C,0xF3,0x9C,0xF3,0x94,0xF3,0x9C,
   0x35,0xA5,0xF8,0xBD,0xFB,0xDE,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7E,0xEF,
   0xBB,0xD6,0xF8,0xBD,0xB6,0xAD,0x75,0xAD,0x34,0xA5,0x33,0x9D,0x34,0x9D,0x35,0xA5,
   0xB7,0xAD,0x79,0xC6,0x3C,0xE7,0xBE,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
   }

-- loop through some colors on screen
glcd_background_color = GLCD_RED
glcd_clear_screen()
glcd_background_color = GLCD_BLUE
glcd_clear_screen()
glcd_background_color = GLCD_YELLOW
glcd_clear_screen()
glcd_background_color = GLCD_BLACK
glcd_clear_screen()
glcd_background_color = GLCD_WHITE
glcd_clear_screen()
glcd_background_color = GLCD_TEAL
glcd_clear_screen()

glcd_background_color = 0xffe0 -- yellow
glcd_clear_screen() -- clear screen with background color

-- display a 40x40 image at bottom right corner of screen.
glcd_draw_image(image,GLCD_X_PIXELS - 40,GLCD_Y_PIXELS - 40,40,40)

-- variables for touch
var byte touch_x
var word touch_y

-- draw some font
const byte hello_string[] = "HelLo World "
--
glcd_font_use(FONT_8X12)       -- set font size
print_string(glcd,hello_string) -- print characters to lcd
--
glcd_font_use(FONT_6X8)
print_string(glcd,hello_string)
--
glcd_font_use(FONT_5X7)
print_string(glcd,hello_string)
--
-- Do a font animation with UDP font
glcd_font_use(FONT_UDF_0XFE)
var byte test
for 5 loop
   test = 32
   for 4 loop
      glcd_char_x_pos = 150
      glcd_char_y_pos = 150
      glcd = test
      test = test + 1
      _usec_delay(50_000)
   end loop
   for 4 loop
      glcd_char_x_pos = 150
      glcd_char_y_pos = 150
      glcd = test
      test = test - 1
      _usec_delay(100_000)
   end loop
end loop

-- Set font size
glcd_font_use(FONT_8X12)
-- print "X:" and "Y:" at bottom left
glcd_char_x_pos = 0
glcd_char_y_pos = 320 - 12
const byte string_x[] = "X:   "
print_string(glcd,string_x)

glcd_char_x_pos = 80
glcd_char_y_pos = 320 - 12
const byte string_y[] = "Y:   "
print_string(glcd,string_y)

glcd_pen_color = 0xf800 -- RED PEN

-- draw shapes
glcd_box(10,20,50,100)
glcd_ellipse(20,50,10,10)
glcd_line(10,20,50,100)


-- draw some text
var dword step = 0
var byte touch_x_prev
var word touch_y_prev
forever loop
   -- put a text counter on the screen
   glcd_char_x_pos = 50
   glcd_char_y_pos = 50
   print_dword_dec(glcd, step)
   step = step + 1

   -- touch monitoring
   if touch_irq == low then
      -- read location of touch
      touch_read_xy_8_bit(touch_x, touch_y)

      glcd_char_x_pos = 16
      glcd_char_y_pos = 320 - 12
      format_byte_dec(glcd, touch_x, 3, 0)

      glcd_char_x_pos = 80 + 16
      glcd_char_y_pos = 320 - 12
      format_word_dec(glcd, touch_y, 3, 0)

      -- do some coversion to allocate in correct position on screen
      touch_x = (touch_x * 2) - 8
      touch_y = 320 - (touch_y * 3) + 40

      -- erase the previous circle
      glcd_pen_color = glcd_background_color -- RED PEN
      glcd_circle(touch_x_prev,touch_y_prev,20)

      -- draw a new circle
      glcd_pen_color = 0xf800 -- RED PEN
      glcd_circle(touch_x,touch_y,20)

      touch_x_prev = touch_x
      touch_y_prev = touch_y


      -- draw a black dot at touch location
      ;glcd_address_set(touch_x,touch_y,touch_x + 1,touch_y + 1)
      ;glcd_write_color_word(0x001f)
      ;glcd_write_color_word(0x001f)
      ;glcd_write_color_word(0x001f)
      ;glcd_write_color_word(0x001f)
   end if
end loop

