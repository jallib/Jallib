-- Title: Sample to display large numbers on a GLCD
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample draws large seven-segment like numbers on a glcd.
--              Large text takes a long time to draw if the font lib is used.
--              This is a faster since Seven-Segment like numbers can be drawn
--              easily using lines, and if a new number to be drawn is neairly
--              the same some digits do not need to be re-drawn.
--
-- Notes:
--
-- Sources:
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 32 mhz internal resonator
pragma target osc INTOSC_NOCLKOUT  -- hs crystal or resonator
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  CONTROL
pragma target lvp  enabled 
pragma target MCLR external        -- reset externally
--
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = TRUE  -- multiply internal osc by 4
--
enable_digital_io()                -- make all pins digital I/O
--
_usec_delay(100_000) -- wait for power to settle

-- Setup glcd_stm032qvt_003
alias glcd_low_port            is portb -- 8 bit port low
alias glcd_low_port_direction  is portb_direction
alias glcd_high_port           is portd -- 8 bit port high
alias glcd_high_port_direction is portd_direction

alias glcd_reset               is pin_a0 -- reset
alias glcd_reset_direction     is pin_a0_direction
alias glcd_rs                  is pin_a1 -- command switch (command select)
alias glcd_rs_direction        is pin_a1_direction
alias glcd_wr                  is pin_a2 -- Write control (write select)
alias glcd_wr_direction        is pin_a2_direction
alias glcd_rd                  is pin_e1 -- Reading Control
alias glcd_rd_direction        is pin_e1_direction
alias glcd_cs                  is pin_e2 -- lcd chip select
alias glcd_cs_direction        is pin_e2_direction
--
glcd_low_port_direction = OUTPUT
glcd_high_port_direction = OUTPUT
glcd_reset_direction = OUTPUT
glcd_wr_direction = OUTPUT
glcd_rd_direction = OUTPUT
glcd_cs_direction = OUTPUT
glcd_rs_direction = OUTPUT
--
-- Using block write is fastest, but you can only use one font type:
-- FONT_TOP_LEFT_HORIZONTAL
const GLCD_USE_BLOCK_WRITE = TRUE
include glcd_stm032qvt_003
--
stm_glcd_init()

include glcd_common

-- the number of number sets to display
const byte GLCD_DIGITS_NUMBER_SETS = 2
include glcd_digits
-- Settings for each number set
glcd_digits_properties[0].length = 6
glcd_digits_properties[0].decimal_location = 2
glcd_digits_properties[0].x = 5
glcd_digits_properties[0].y = 5
--
glcd_digits_properties[1].length = 5
glcd_digits_properties[1].decimal_location = 2
glcd_digits_properties[1].x = 5
glcd_digits_properties[1].y = 50

-- clear the screen
glcd_background_color = GLCD_YELLOW
glcd_clear_screen()

-- draw digits
glcd_pen_color = GLCD_RED
var sdword count1 = 0
var sdword count_down = 100
for 100000000 using count1 loop
   glcd_digits[0] = count1
   glcd_digits[1] = count_down
   count_down = count_down - 1
end loop

