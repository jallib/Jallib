-- Title: Sample PING/UDP/ARP via ENC28j60
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample is for ethernet network communication using
--              ENC28j60. sends/receives PING, UDP data packets,
--              and ARP
--
-- Sources:
--
-- Notes:
-- Switches + pull up resistor connected to pin_d0, pin_d1.
-- led + resistor on pin_d2
-- serial sw: tx_pin is pin_B4, rx_pin is pin_B5
--

-- include chip
include 18F4620                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc INTOSC_NOCLKOUT              -- hs crystal or resonator
;pragma target osc hs              -- hs crystal or resonator
;pragma target clock 20_000_000    -- oscillator frequency
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  disabled
pragma target lvp  disabled
pragma target MCLR external        -- reset externally
--;
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = true  -- multiply internal osc by 4
;--
_usec_delay(500_000)

include print

-- setup serial software
const serial_sw_baudrate = 115200
alias serial_sw_tx_pin is pin_B4
alias serial_sw_rx_pin is pin_B5
pin_B4_direction = output
pin_B5_direction = input
include serial_software
serial_sw_init()
alias serial_data is serial_sw_data

-- setup a button
alias button is pin_d1
alias button_direction is pin_d1_direction
--
button_direction = INPUT

-- setup a button
alias button2 is pin_d0
alias button2_direction is pin_d0_direction
--
button2_direction = INPUT

-- setup a led
alias led is pin_d2
alias led_direction is pin_d2_direction
--
led_direction = OUTPUT
led = high


include spi_master_hw        -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_00,SPI_RATE_FOSC_4) -- init spi, choose mode and speed

-- setup debug lib
alias debug_data is serial_data
const bit DEBUG_MASTER_ENABLE = FALSE    -- enables debugging
include debug
--
-- turn on and off debug levels.
;debug_lvl_0 = ON
debug_lvl_1 = ON   -- network error messages
debug_lvl_2 = ON   -- network general text
debug_lvl_3 = ON   -- network packet data type text
debug_lvl_4 = ON   -- network debug data
;debug_lvl_5 = ON
;debug_lvl_6 = ON
--
var byte debug_text1[] = "DEBUG STARTED"
debug_string(DEBUG_2,debug_text1)
debug_crlf(DEBUG_2)

-- setup ENC28j60
-- pin def
alias enc_reset is pin_a2
alias enc_reset_direction is pin_a2_direction
enc_reset_direction = output
enc_reset = 1
--
-- interrupt output pin
alias enc_int is pin_a4
alias enc_int_direction is pin_a4_direction
enc_int_direction = input
--
-- wake up on lan signal (some datasheets say this pin is not connected?)
;alias enc_wol is pin_ax
;alias enc_wol_direction is pin_ax_direction
;enc_wol_direction = input
--
-- chip select pin
alias enc_cs is pin_e0
alias enc_cs_direction is pin_e0_direction
enc_cs_direction = output
enc_cs = 1
--
var byte ENC_LOCAL_MAC[6] = {0x00,0x13,0xD4,0xC6,0x53,0x16}-- MAC address of PIC
const ENC_USE_INTERRUPT_PIN = FALSE     -- TRUE -> not tested yet
const ENC_ARRAY_SIZE = 100
const ENC_ALWAYS_SET_SPI_MODE = TRUE
include enc28j60
enc_init()
--
enc_set_clkout_freq(ENC_8_333) -- change clockout pin freq. (good communication test)
enc_set_clkout_freq(ENC_3_125) -- change clockout pin freq again

-- Setup Networking
-- choose network protocols to use
--
;const NETWORK_USE_MAC = TRUE -- libs takes care of this
--
;const NETWORK_USE_IP = TRUE -- libs takes care of this
--
const NETWORK_USE_ARP = TRUE -- required for ethernet, not slip
const NETWORK_USE_ARP_CALLBACKS = TRUE
--
const NETWORK_USE_ICMP = TRUE -- required for ping only
const NETWORK_USE_ICMP_CALLBACKS = TRUE
--
const NETWORK_USE_UDP = TRUE -- udp can transfer your data
const NETWORK_USE_UDP_CALLBACKS = TRUE
--
const NETWORK_USE_TCP = FALSE -- under development (not working)
const NETWORK_USE_TCP_CALLBACKS = FALSE
--
var byte network_local_ip[4] = {192,168,1,60}                  -- IP address of PIC
;var byte network_local_ip[] = {192.168.2.1)
--
-- set network layer
const NETWORK_LINK_LAYER_ETHERNET = TRUE -- TRUE for ethernet, FALSE for SLIP
const byte NETWORK_ENC28J60 = TRUE
--
-- include networking main files
include network_globals
include network_main
include ip_header
include arp
include ethernet_mac

const ICMP_ECHO_DATA_LENGTH = 32 -- size of data to send with PING
include icmp

-- UDP SERVER SETTINGS
const byte UDP_SERVER_PORT = 111 -- (you can rename/remove this constant)
--
-- UDP CLIENT SETTINGS
var byte udp_conn_1              -- create a variable to be used as a udp client.
const byte UDP_CLIENT_PORT = 251 -- (you can rename/remove this constant)
--
const UDP_MAX_SOCKETS = 3 -- max number of udp connections (9 bytes ram per connection)
--
include udp
udp_init()

;include network_main

;   -- setup TCP
;   const TCP_MAX_SOCKETS = 2
;   ;const TCP_MAX_CONNECTIONS  = 1
;   const TCP_SERVER = TRUE        -- server mode
;   const TCP_SERVER_PORT = 33891  -- server port
;   include tcp

--MAIN PROGRAM-----------------------------------------------------------------------------------------------------

-- CALLBACK PROCEDURES --

--------------------------------------------------------------------------------
-- called when we get a arp reply from an external source
--------------------------------------------------------------------------------
procedure arp_reply_callback() is
    -- print a message
    var byte get_ping[] = "arp reply recieved!"
    print_string(serial_data,get_ping)
    print_crlf(serial_data)
end procedure
--------------------------------------------------------------------------------
-- called when we get a arp request
--------------------------------------------------------------------------------
procedure arp_request_callback() is
    -- print a message
    var byte get_ping[] = "arp request recieved, sending reply"
    print_string(serial_data,get_ping)
    print_crlf(serial_data)
end procedure

--------------------------------------------------------------------------------
-- called when we get a ping reply (after we sent a ping out somewhere)
--------------------------------------------------------------------------------
procedure icmp_ping_reply_callback() is
    -- print a message
    var byte get_ping[] = "ping reply recieved!"
    print_string(serial_data,get_ping)
    print_crlf(serial_data)
end procedure
--------------------------------------------------------------------------------
-- called when we get a ping from an external source
--------------------------------------------------------------------------------
procedure icmp_ping_callback() is
      led = !led -- toggle led
end procedure

--------------------------------------------------------------------------------
-- Called when UDP packet is received. Minumum data size is 18 bytes.
--------------------------------------------------------------------------------
procedure udp_receive_callback(byte in socket,word in udp_data_size) is
   -- print info about the socket received
   print_udp_socket_info(0,socket)

   -- if there was an error
   if udp_error != 0 then
   end if

   -- if it is our client connection
   if socket == udp_conn_1 then
      -- maybe you want to talk back to the client?
   end if

   -- if it is our server connection
   if udp_socket_local_port[socket] == UDP_SERVER_PORT then
      -- do something with the data, we'll print it to serial port
      var word step
      for udp_data_size using step loop               -- for each byte in packet
         serial_data = udp_data[step]
      end loop

       -- send a reply message
       udp_data[0] = "T"
       udp_data[1] = "H"
       udp_data[2] = "A"
       udp_data[3] = "N"
       udp_data[4] = "K"
       udp_data[5] = "S"
       udp_data[6] = "!"

       print_crlf(serial_data)
       var byte sending_udp[] = "Sending reply UDP data" -- print a message
       print_string(serial_data,sending_udp)
       print_crlf(serial_data)
       udp_send(udp_conn_1,7)         -- send 7 bytes data to udp_conn_1

       udp_socket_disconnect(socket) -- disconnect the socket

   end if

   print_crlf(serial_data)
end procedure


;   --------------------------------------------------------------------------------
;   -- Receive UDP data. Minumum data size is 18 bytes. udp_client_port is
;   -- the PIC's port.
;   --------------------------------------------------------------------------------
;   procedure tcp_receive_callback(byte in connection_number, word in tcp_client_port,word in tcp_server_port, word in tcp_data_size) is
;      -- send some info via serial port about our packet
;      print_crlf(serial_data)
;      print_crlf(serial_data)
;      const byte str2[] = "TCP data received. port: "
;      print_string(serial_data,str2)
;      print_word_dec(serial_data, tcp_client_port)
;      const byte str_size[] = ", bytes: "
;      print_string(serial_data,str_size)
;      print_word_dec(serial_data, tcp_data_size)
;      print_crlf(serial_data)
;
;
;      -- check the TCP port number
;      if tcp_client_port == 33891 then
;
;         -- do something with the data, we'll print it to serial port
;         var word step = ETHERNET_HEADER_SIZE + ip_header_size
;         for (NETWORK_DATA_SIZE - (ETHERNET_HEADER_SIZE + ip_header_size)) loop -- for each byte in packet
;            print_byte_hex(serial_data,network_data[step])
;            serial_data = " "
;            step = step + 1
;         end loop
;
;      end if
;
;   end procedure


-- MAIN PROGRAM LOOP --

-- print some start characters
for 10 loop
   serial_data = "!"
end loop
print_crlf(serial_data)


if NETWORK_LINK_LAYER_ETHERNET == TRUE then
   -- you must send some arp requests and get at leaset one reply before you do
   -- anything.
   ;network_set_remote_ip(192,168,2,2)
   network_set_remote_ip(192,168,1,1)
   for 10 loop -- 10 times just to make sure we get a reply.
      -- send arp request
       arp_send_request()

       -- print message
       var byte sending_arp[] = "sent arp request"
       print_string(serial_data,sending_arp)
       print_crlf(serial_data)
   end loop
end if

-- uncomment if you are using WIN XP slip connection
;if NETWORK_LINK_LAYER == NET_SLIP Then
;   -- wait for "CLIENT" from windows slip connection (yes, i got lazy)
;   while !serial_hw_data_available loop
;   end loop
;
;   -- reply with "CLIENTSERVER" to initiate connection
;   const byte str1[] = "CLIENTSERVER"   -- define a string
;   print_string(serial_hw_data, str1)   -- send via serial port
;end if

-- main loop
var word packet_size
forever loop
   -- send ping when button is pressed
   if button == LOW then
       -- print a message
       print_crlf(serial_data)
       var byte sending_ping[] = "sending ping"
       print_string(serial_data,sending_ping)
       print_crlf(serial_data)

      ;network_set_remote_ip(74,125,226,18) -- ping google's ip address
      ;network_set_remote_ip(192,168,2,2)   -- ping a computer
      network_set_remote_ip(192,168,1,10) -- ping google's ip address
      icmp_send_echo()

      while button == LOW loop
         _usec_delay(100_000)
      end loop

   end if
   
   -- send arp when button is pressed
   if button2 == LOW then

       -- crlf
       print_crlf(serial_data)

       -- set remote ip
       network_set_remote_ip(192,168,1,105)
;      network_set_remote_ip(192,168,2,2)

       -- EXAMPLE 1: Send data from udp_data[] internal array
       -- less ram usage and more cpu cycles then udp_send_array()
       -- send UDP data "HELLO"
       udp_data[0] = "H"                                 -- set data
       udp_data[1] = "E"
       udp_data[2] = "L"
       udp_data[3] = "L"
       udp_data[4] = "O"
       --
       udp_conn_1 = udp_socket_connect(1234,UDP_CLIENT_PORT) -- connect
       --
       print_udp_socket_info(1,udp_conn_1) -- print socket info
       --
       if udp_error == 0 then                     -- if there are no errors
          var byte sending_udp[] = "Sending UDP data" -- print a message
          print_string(serial_data,sending_udp)
          print_crlf(serial_data)
          udp_send(udp_conn_1,5)         -- send 5 bytes data to udp_conn_1
       end if
       --
       udp_socket_disconnect(udp_conn_1) -- disconnect the socket

;      -- EXAMPLE 2: Send an array
;      -- more ram usage and less cpu cycles then udp_send()
;      -- send the data (source port, destination port, data)
;      --
;      udp_conn_1 = udp_socket_connect(1234,UDP_CLIENT_PORT) -- connect
;      --
;      print_udp_socket_info(1,udp_conn_1) -- print socket info
;      --
;      var byte test[] = "HELLO WORLD"                   -- set data
;      if udp_error == 0 then                            -- if there are no errors
;         var byte sending_udp[] = "Sending UDP data"    -- print a message
;         print_string(serial_data,sending_udp)
;         print_crlf(serial_data)
;         udp_send_array(udp_conn_1,test)                -- send udp data
;      else
;         var byte sending_udp[] = "UDP error occurred"  -- print a message
;         print_string(serial_data,sending_udp)
;         print_crlf(serial_data)
;      end if
;      udp_socket_disconnect(udp_conn_1)                 -- disconnect


     while button2 == LOW loop
        _usec_delay(100_000)
     end loop

   end if
   
   -- poll to see if there are network packets available
   network_poll()
   
end loop

