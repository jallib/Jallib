-- ------------------------------------------------------
-- Title: Test program for ds18b20.jal
-- 
-- Author: Vasile Guta Ciucur, Copyright (c) 2010..2014, all rights reserved.
-- 
-- Adapted-by: mkerna@gmail.com, Joep Suijs
-- 
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
-- 
-- Description: Test program
--    Read sensor temperature DS18B20 from a specific device using the
--    drive's ID
-- 
-- Sources:
-- 
-- Notes: requires LCD to display result
-- 
-- ------------------------------------------------------

;@jallib use chipdef        


;@jallib use lcd_hd44780_4

include delay
include print  
include format
enable_digital_io()  -- set all IO as digital

-- setup lcd
lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include lcd_hd44780_4                -- LCD library with 4 data lines
lcd_init()                           -- initialize LCD
alias device is lcd
                               
-- ----------------------------                               
-- start of setup ds18b20 stuff              
-- ----------------------------                               
              
-- setup pin definitions for dallas one-wire bus
alias d1w_bus            is pin_b1
alias d1w_bus_direction  is pin_b1_direction     
include one_wire           -- include one-wire library
d1w_init()                 -- init one-wire bus

-- select one of the output formats below
const ds18b20_value_raw          = 0
const ds18b20_value_celcius      = 1
const ds18b20_value_farenheit    = 0

const ds18b20_ignore_crc         = 0 -- 1 tell lib to ignore crc (code becomes smaller and faster, but reliability of data is less)
const ds18b20_max_retries        = 2 -- 1 means the library re-reads once when crc fails, 4 means up to 4 retries (so max 5 reads)

include ds18b20            -- include library for ds18b20 temperature sensor with one-wire interface

-- ---------------------------                               
-- end of setup ds18b20 stuff 
-- ---------------------------                               

-- strings and vars for the main loop
const byte str1[]       = "Temp="
const byte str_err1[]   = "ds18b20 read failed."
var byte i
var sword temperature                
var bit r                            

forever loop           
 
                 
   ds18b20_convert()  -- tell all ds18b20 devices to start conversion                 

   -- note: the statement above starts the conversion and it can take
   -- up to 750ms to complete. 
   -- If the sensor is in parasite mode, it is mandatory to leave the bus 
   -- during conversion. You could include a delay like:
   delay_1ms(750)
   -- If you have other stuff to do, feel free to do so and create proper
   -- timing in an other way. 
   --
   -- If the sensor is conventional powered, you don't have to keep the
   -- bus idle and could read the sensor before conversion is complete.
   -- The sensor will return the previous value.
   
   r = ds18b20_s_temp(temperature)                 -- read conversion result   
   lcd_cursor_position(0,0)                        -- first line
   if (r) then
      -- success, so print temperature
      print_string(device, str1)                   -- print string
      format_sword_dec(device, temperature, 4, 1)  -- print temperature in xx.x format
      device = "C"
      device = " "
   else
      -- print fail message
      print_string(device, str_err1)    
   end if

   -- read the device's ID and print it    
   lcd_cursor_position(1,0)          -- second line

   r = ds18b20_s_read_rom()
   if (r) then
      -- read_rom successful, so print ID which is now stored in scratchpad 
      for 8 using i loop
         print_byte_hex(device, scratchpad[i])
      end loop                
   else                      
      -- print fail message
      print_string(device, str_err1)
   end if
 
end loop
