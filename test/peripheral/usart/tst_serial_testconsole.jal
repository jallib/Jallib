-- ----------------------------------------------------------------------------
-- Title: Serial test console
--
-- Author: Joep Suijs, Copyright (c) 2009..2011, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4m
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: support lib for testing
-- --
-- This file provides a framework to select (unit) tests via the
-- serial port.
--
-- Sources:
--
-- Notes:
-- setup: a terminal program connected to the serial port
--
-- ----------------------------------------------------------------------------

-- The user could include this header before definition of the
-- unit_test to gain access to tc_value* vars.
-- To be sure it is included at least once, it is included here again.
-- And the compiler prevents multiple inclusion :)
include test_serial_tc_header

-- -----------------------------------------------------------------------------
-- run_test -
-- -----------------------------------------------------------------------------
-- conditional compile enables automatic adjustment to up to 26 tests.
-- -----------------------------------------------------------------------------
procedure _run_test(byte in nr) is
   if (defined(unit_test_a) == true) then  if (nr == "A") then unit_test_a() end if end if
   if (defined(unit_test_b) == true) then  if (nr == "B") then unit_test_b() end if end if
   if (defined(unit_test_c) == true) then  if (nr == "C") then unit_test_c() end if end if
   if (defined(unit_test_d) == true) then  if (nr == "D") then unit_test_d() end if end if
   if (defined(unit_test_e) == true) then  if (nr == "E") then unit_test_e() end if end if
   if (defined(unit_test_f) == true) then  if (nr == "F") then unit_test_f() end if end if
   if (defined(unit_test_g) == true) then  if (nr == "G") then unit_test_g() end if end if
   if (defined(unit_test_h) == true) then  if (nr == "H") then unit_test_h() end if end if
   if (defined(unit_test_i) == true) then  if (nr == "I") then unit_test_i() end if end if
   if (defined(unit_test_j) == true) then  if (nr == "J") then unit_test_j() end if end if
   if (defined(unit_test_k) == true) then  if (nr == "K") then unit_test_k() end if end if
   if (defined(unit_test_l) == true) then  if (nr == "L") then unit_test_l() end if end if
   if (defined(unit_test_m) == true) then  if (nr == "M") then unit_test_m() end if end if
   if (defined(unit_test_n) == true) then  if (nr == "N") then unit_test_n() end if end if
   if (defined(unit_test_o) == true) then  if (nr == "O") then unit_test_o() end if end if
   if (defined(unit_test_p) == true) then  if (nr == "P") then unit_test_p() end if end if
   if (defined(unit_test_q) == true) then  if (nr == "Q") then unit_test_q() end if end if
   if (defined(unit_test_r) == true) then  if (nr == "R") then unit_test_r() end if end if
   if (defined(unit_test_s) == true) then  if (nr == "S") then unit_test_s() end if end if
   if (defined(unit_test_t) == true) then  if (nr == "T") then unit_test_t() end if end if
   if (defined(unit_test_u) == true) then  if (nr == "U") then unit_test_u() end if end if
   if (defined(unit_test_v) == true) then  if (nr == "V") then unit_test_v() end if end if
   if (defined(unit_test_w) == true) then  if (nr == "W") then unit_test_w() end if end if
   if (defined(unit_test_x) == true) then  if (nr == "X") then unit_test_x() end if end if
   if (defined(unit_test_y) == true) then  if (nr == "Y") then unit_test_y() end if end if
   if (defined(unit_test_z) == true) then  if (nr == "Z") then unit_test_z() end if end if
end procedure

-- -----------------------------------------------------------------------------
-- _print_default_testmsg
-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------
const byte default_tst_msg1[] = "unit test '"
const byte default_tst_msg2[] = "' - "
procedure _print_default_testmsg(byte in nr) is
  print_string(serial_hw_data, default_tst_msg1)
  serial_hw_data = nr
  print_string(serial_hw_data, default_tst_msg2)
end procedure

-- -----------------------------------------------------------------------------
-- print_testname - print message (custom or standard) for existing tests
-- -----------------------------------------------------------------------------
-- conditional compile enables automatic adjustment to up to 26 tests.
-- -----------------------------------------------------------------------------
function _print_testname(byte in nr) return bit is

   _print_default_testmsg(nr)

   if (defined(unit_test_a) == true) then if (nr == "A") then if (defined(testname_a) == true) then print_string(serial_hw_data, testname_a) end if return true end if end if
   if (defined(unit_test_b) == true) then if (nr == "B") then if (defined(testname_b) == true) then print_string(serial_hw_data, testname_b) end if return true end if end if
   if (defined(unit_test_c) == true) then if (nr == "C") then if (defined(testname_c) == true) then print_string(serial_hw_data, testname_c) end if return true end if end if
   if (defined(unit_test_d) == true) then if (nr == "D") then if (defined(testname_d) == true) then print_string(serial_hw_data, testname_d) end if return true end if end if
   if (defined(unit_test_e) == true) then if (nr == "E") then if (defined(testname_e) == true) then print_string(serial_hw_data, testname_e) end if return true end if end if
   if (defined(unit_test_f) == true) then if (nr == "F") then if (defined(testname_f) == true) then print_string(serial_hw_data, testname_f) end if return true end if end if
   if (defined(unit_test_g) == true) then if (nr == "G") then if (defined(testname_g) == true) then print_string(serial_hw_data, testname_g) end if return true end if end if
   if (defined(unit_test_h) == true) then if (nr == "H") then if (defined(testname_h) == true) then print_string(serial_hw_data, testname_h) end if return true end if end if
   if (defined(unit_test_i) == true) then if (nr == "I") then if (defined(testname_i) == true) then print_string(serial_hw_data, testname_i) end if return true end if end if
   if (defined(unit_test_j) == true) then if (nr == "J") then if (defined(testname_j) == true) then print_string(serial_hw_data, testname_j) end if return true end if end if
   if (defined(unit_test_k) == true) then if (nr == "K") then if (defined(testname_k) == true) then print_string(serial_hw_data, testname_k) end if return true end if end if
   if (defined(unit_test_l) == true) then if (nr == "L") then if (defined(testname_l) == true) then print_string(serial_hw_data, testname_l) end if return true end if end if
   if (defined(unit_test_m) == true) then if (nr == "M") then if (defined(testname_m) == true) then print_string(serial_hw_data, testname_m) end if return true end if end if
   if (defined(unit_test_n) == true) then if (nr == "N") then if (defined(testname_n) == true) then print_string(serial_hw_data, testname_n) end if return true end if end if
   if (defined(unit_test_o) == true) then if (nr == "O") then if (defined(testname_o) == true) then print_string(serial_hw_data, testname_o) end if return true end if end if
   if (defined(unit_test_p) == true) then if (nr == "P") then if (defined(testname_p) == true) then print_string(serial_hw_data, testname_p) end if return true end if end if
   if (defined(unit_test_q) == true) then if (nr == "Q") then if (defined(testname_q) == true) then print_string(serial_hw_data, testname_q) end if return true end if end if
   if (defined(unit_test_r) == true) then if (nr == "R") then if (defined(testname_r) == true) then print_string(serial_hw_data, testname_r) end if return true end if end if
   if (defined(unit_test_s) == true) then if (nr == "S") then if (defined(testname_s) == true) then print_string(serial_hw_data, testname_s) end if return true end if end if
   if (defined(unit_test_t) == true) then if (nr == "T") then if (defined(testname_t) == true) then print_string(serial_hw_data, testname_t) end if return true end if end if
   if (defined(unit_test_u) == true) then if (nr == "U") then if (defined(testname_u) == true) then print_string(serial_hw_data, testname_u) end if return true end if end if
   if (defined(unit_test_v) == true) then if (nr == "V") then if (defined(testname_v) == true) then print_string(serial_hw_data, testname_v) end if return true end if end if
   if (defined(unit_test_w) == true) then if (nr == "W") then if (defined(testname_w) == true) then print_string(serial_hw_data, testname_w) end if return true end if end if
   if (defined(unit_test_x) == true) then if (nr == "X") then if (defined(testname_x) == true) then print_string(serial_hw_data, testname_x) end if return true end if end if
   if (defined(unit_test_y) == true) then if (nr == "Y") then if (defined(testname_y) == true) then print_string(serial_hw_data, testname_y) end if return true end if end if
   if (defined(unit_test_z) == true) then if (nr == "Z") then if (defined(testname_z) == true) then print_string(serial_hw_data, testname_z) end if return true end if end if

   return false;
end function


procedure _serial_varmenu_printvar(byte in varnr) is
   const byte test_vmp1[] = "tc_var"

   print_string(serial_hw_data, test_vmp1)
   serial_hw_data = "0" + varnr
   serial_hw_data = " "
   serial_hw_data = "="
   serial_hw_data = " "
   print_word_dec(serial_hw_data, tc_var[varnr])
   serial_hw_data = " "
   serial_hw_data = "("
   print_prefix = true
   print_word_hex(serial_hw_data, tc_var[varnr])
   serial_hw_data = ")"
   print_crlf(serial_hw_data)

end procedure


var byte tc_menu_index = 0

-- ----------------------------------------------------------------------------
-- _testconsole_varmenu - enable variable setting from serial console
-- ----------------------------------------------------------------------------
-- ! selects this menu
-- ` exits this menu
-- todo -- h set hex input mode
-- todo -- d set decimal input mode
-- space print all vars
-- 0..9 select var
-- todo i goto value input mode
-- + increment var by 1
-- = increment var by 1 (= is unshifted plus on my keyboard)
-- - decrement var by 1
--
-- todo -- in value input mode:
-- todo --    enter - store value
-- todo --    space - abort value input
-- todo --    0..9 A..F - input value (value = value * 10 + input)
-- ----------------------------------------------------------------------------
procedure _testconsole_varmenu() is
   const byte test_varmenu_msg[] = "Testconsole variable menu.\r\n"
   var byte ledcounter;
   var bit print_all_vars = true
   var bit print_active_var = true
   var byte char, i

   print_string(serial_hw_data, test_varmenu_msg)
   forever loop

      -- --------------
      -- printing stuff
      -- --------------
      if (print_all_vars) then
         for 10 using i loop
            if (i ==  tc_menu_index) then
               serial_hw_data = "*"
            end if
            _serial_varmenu_printvar(i)
         end loop
         print_all_vars = false
      end if

      if (print_active_var) then
         serial_hw_data = "*"
         _serial_varmenu_printvar(tc_menu_index)
         print_active_var = false
      end if

      -- -----------------------
      -- check for received char
      -- -----------------------
      if (serial_hw_read(char) == true) then
         -- char received
         if (char == "`") then
            -- exit menu
            return
         end if

         if (char == " ") then
            print_all_vars = true
         end if

         if ((char == "+") | (char == "=")) then
            -- increment var by 1
            tc_var[tc_menu_index] = tc_var[tc_menu_index] + 1
            print_active_var = true
         end if

         if (char == "-") then
            -- decrement var by 1
            tc_var[tc_menu_index] = tc_var[tc_menu_index] - 1
            print_active_var = true
         end if

         if ((char >="0") & (char <= "9")) then
            -- select var to change
            tc_menu_index = char & 0x0F -- ascii to numeric
            print_active_var = true
         end if
      end if

      -- ---------------------------
      -- blink led while in var menu
      -- ---------------------------
      ledcounter = ledcounter + 1
      LED = (ledcounter > 127)

   end loop

end procedure

-- -----------------------------------------------------------------------------
-- testconsole - this is the main test loop
-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------
procedure testconsole() is
   var byte char
   var byte testnr
   const byte test_ready_msg[] = "Testconsole ready.\r\n"

   forever loop

      print_string(serial_hw_data, test_ready_msg)
      testnr = 0

      -- wait for char
      LED = on
      while (serial_hw_read(char) == false) loop end loop
      toupper(char)  -- convert testcmd to upper case
      LED = off

      if (char == "!") then
         _testconsole_varmenu()
         char = 0 -- no more processing
      end if
      if ((char >= "A") & (char <= "Z")) then
         -- valid test range
         testnr   = char               -- A...Z
       end if

      -- print test name
      if (testnr != 0) then
         if(_print_testname(testnr) == false) then
            -- test does not exist
            const byte unkown_tst_msg[] = "unknown unit test."
            print_string(serial_hw_data, unkown_tst_msg)
           testnr = 0
         end if
         print_crlf(serial_hw_data)
      end if

      -- execute test
      if (testnr > 0) then
         _run_test(testnr)
      end if

   end loop

end procedure
