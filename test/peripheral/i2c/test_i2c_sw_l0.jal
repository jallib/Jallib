-- ----------------------------------------------------------------------------
-- Title: Test program for i2c_software.jal
-- 
-- Author: Joep Suijs, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: 
--  
-- Compiler: >=2.4q2
--   
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--  
-- Description: Level 0 i2c test program
--    interact with an i2c eeprom using the i2c primitives
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--  
-- Sources:
--   
-- Notes: 
--    setup: 
--         an 24lc256 i2c eeprom, connected to the test board i2c pins.
--         a serial connection to a terminal
--  
-- ----------------------------------------------------------------------------

;@jallib use chipdef      
enable_digital_io()                -- make all pins digital I/O

;@jallib use i2c

-- generic setup (see releated examples for more details)
;@jallib use serial
include serial_hardware
serial_hw_init()
include print
include delay

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)

include i2c_software
;include i2c_hardware

i2c_initialize()

-- we're alive
const byte str1[] = "Test.\r\n" 
print_string(serial_hw_data, str1)

var bit r
var byte i
forever loop

   -- read first 3 bytes from an 24lc256 eeprom and output these to the serial port
   -- then, increment the last one (write one byte)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x00) -- memory address low  byte
   
   i2c_restart()
   r = r & i2c_transmit_byte(0xA1) -- i2c address for read (of memory from eeprom)
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(true)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i = i2c_receive_byte(false)
   print_byte_hex(serial_hw_data, i);
   serial_hw_data = " "
   
   i2c_stop()

   -- write part (relies on var i, we just read!)
   i2c_start()
   r =     i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)
   r = r & i2c_transmit_byte(0x00) -- memory address high byte
   r = r & i2c_transmit_byte(0x02) -- memory address low  byte
   r = r & i2c_transmit_byte(i+1)  -- data byte
   i2c_stop()
   
   print_crlf(serial_hw_data)
   
   delay_100ms(10)
end loop
