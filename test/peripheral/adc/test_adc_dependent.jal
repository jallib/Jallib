-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008-2014, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.4q2
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--  
-- Description: this program shows how to use adc_hardware library. 
-- It regurlarly performs an Analog-to-Digital Conversion, on channels AN0
-- and sends the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--   
-- Few words about diagram: this program performs ADC on channels AN0, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
-- 		 
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN0-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--		- R1=1K, R2=1K: you should get ~127/~512 as ADC value (low/high)
-- 		- R1=1K, R2=2.2K: you should get ~175/~704 as ADC value (low/high)

;@jallib use chipdef

-- set all IO as digital, will turn ADC on later (by adc lib)
enable_digital_io()

include print
include delay

;@jallib use serial
-- ok, now setup serial
include serial_hardware
serial_hw_init()

-- inform user PIC is ready !
serial_hw_write("!")

-- ok, now let's configure ADC
-- we want to measure using low resolution
-- (that's our choice, we could use high resolution as well, if this pic type supports this)
const bit ADC_HIGH_RESOLUTION = low
-- we said we want 1 analog channel...
const byte ADC_NCHANNEL = 1
-- and no external voltage reference
const byte ADC_NVREF = ADC_NO_EXT_VREF
-- now we can include the library
include adc
-- And initialize the whole with our parameters
adc_init()

-- will periodically send those chars
var word measure
var byte lowmeasure
const byte prefix[] = "Channel "
const byte highstr[] = " (high) "
const byte lowstr[] = " (low) "
const byte suffix[] = ": "
forever loop
   var byte channel = 0
   -- loop over all channels and read
   for 2 using channel loop

	  -- get ADC result, high resolution
	  measure = adc_read_high_res(channel)
	  -- send it back through serial
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,highstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  -- print_word_bin(serial_hw_data,measure) ; this one works !
	  print_word_dec(serial_hw_data,measure) ; I should get ~512
	  print_crlf(serial_hw_data)
	  -- and sleep a litte...
	  delay_1ms(100)

	  -- Even if we set high resolution, we can still access results
	  -- in low resolution (the 2 LSb will be removed)
	  lowmeasure = adc_read_low_res(channel)
	  print_string(serial_hw_data,prefix)
	  print_string(serial_hw_data,lowstr)
	  print_byte_dec(serial_hw_data,channel)
	  print_string(serial_hw_data,suffix)
	  print_byte_dec(serial_hw_data,lowmeasure) ; I should get ~127
	  print_crlf(serial_hw_data)
	  -- and sleep a litte...
	  delay_1ms(100)
   end loop
end loop

